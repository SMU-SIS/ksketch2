<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:view="sg.edu.smu.ksketch2.canvas.components.view.*"
		xmlns:buttons="sg.edu.smu.ksketch2.canvas.components.buttons.*" 
		xmlns:s="library://ns.adobe.com/flex/spark" actionBarVisible="false" 
		xmlns:popup="sg.edu.smu.ksketch2.canvas.components.popup.*"
		addedToStage="addedToStageHandler(event)"
		>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:HTTPService id="GetUser"               
					   resultFormat="text" 
					   result="ParseJSONObject(event)" 
					   showBusyCursor="false">                        
		</s:HTTPService>
	</fx:Declarations>
	<fx:Script>
        
		<![CDATA[
			import sg.edu.smu.ksketch2.canvas.mainView.KSketch_HomeView;
			import com.adobe.serialization.json.JSON;
			
			import flash.events.StatusEvent;
			import flash.net.URLRequest;
			
			import mx.rpc.events.ResultEvent;
			
			import air.net.URLMonitor;
			
			import sg.edu.smu.ksketch2.KSketchWebLinks;
			import sg.edu.smu.ksketch2.KSketch_User;
			import sg.edu.smu.ksketch2.canvas.components.popup.KSketch_DataProgressBar;
			import sg.edu.smu.ksketch2.canvas.controls.KOrientationControl;
			
			private var progressTimer:Timer;
			private var _stage:Stage;
			private var _stageWidth:Number;
			private var _stageHeight:Number;
			private var monitor:URLMonitor;
			
			public static var userData:Object = new Object();
			private var webView:StageWebView = new StageWebView();
			private var _orientationControl:KOrientationControl;
			
			public static var _isLoggedIn:Boolean = false;
			
			private function addedToStageHandler(event:Event):void
			{
				_orientationControl = new KOrientationControl(stage);
				_orientationControl.init(event);
				
				webView.stage = stage;
				_stageWidth = _orientationControl.stageWidth;
				_stageHeight = _orientationControl.stageHeight;
				
				//check for network connection
				monitor = new URLMonitor(new URLRequest(KSketchWebLinks.url));
				monitor.addEventListener(StatusEvent.STATUS, prepareView);
				monitor.start();
			}
			
			private function prepareView(event:StatusEvent):void
			{
				//only show Webview (which is Janrain login page) when there is a connection
				if(monitor.available)
				{
					if(_stageWidth > _stageHeight)
						webView.viewPort = new Rectangle(0, 0, _stageWidth, _stageHeight);
					else
						webView.viewPort = new Rectangle(0, 0, _stageHeight, _stageWidth);
					
					webView.loadURL(KSketchWebLinks.url);
					webView.addEventListener(flash.events.LocationChangeEvent.LOCATION_CHANGE, locationChangedHandler);
					webView.addEventListener(flash.events.LocationChangeEvent.LOCATION_CHANGING, locationChangingHandler);
				}
				else
				{
					skipConnection();
				}
				
				monitor.stop();
				monitor.removeEventListener(StatusEvent.STATUS, prepareView);
			}
			
			private function skipConnection():void
			{	
				navigator.pushView(KSketch_HomeView);
			}
			
			//FOR Android
			private function locationChangingHandler(event:LocationChangeEvent):void
			{
				var currentURL:String = event.location.toString();
				var isRedirectedToLogin:Boolean = currentURL.indexOf(KSketchWebLinks.redirecturl_login) >= 0;
				var isRedirectedToSkip:Boolean = currentURL.indexOf(KSketchWebLinks.redirecturl_skip) >= 0;
				
				trace("trace url: " + currentURL);
				if(isRedirectedToLogin || isRedirectedToSkip)
				{
					if(currentURL.indexOf(KSketchWebLinks.redirecturl_login) >= 0)
					{
						webView.stop();
						webView.viewPort = null;
						webView.dispose();
						webView = null;
						
						//get json url
						GetUser.url = KSketchWebLinks.jsonurlUser;
						GetUser.send();
						startProgressBar();
					}
					else if(currentURL.indexOf(KSketchWebLinks.redirecturl_skip) >= 0)
					{
						webView.stop();
						webView.viewPort = null;
						webView.dispose();
						webView = null;
						
						skipConnection();
					}
				}
				//else //this is to prevent navigation to other external links in the stage web view
				//	webView.loadURL(KSketchWebLinks.url);
				
			}
			
			//FOR IOS
			private function locationChangedHandler(event:LocationChangeEvent):void
			{
				var currentURL:String = event.location.toString();
				trace("current url: " + currentURL);
				if(currentURL.indexOf(KSketchWebLinks.redirecturl_login) >= 0)
				{
					webView.stop();
					webView.viewPort = null;
					webView.dispose();
					webView = null;
					
					//get json url
					GetUser.url = KSketchWebLinks.jsonurlUser;
					GetUser.send();
					startProgressBar();
				}
				else if(currentURL.indexOf(KSketchWebLinks.redirecturl_skip) >= 0)
				{
					webView.stop();
					webView.viewPort = null;
					webView.dispose();
					webView = null;
					
					skipConnection();
				}
			}
			
			public function ParseJSONObject(event:ResultEvent):void
			{
				var rawData:String = String(event.result);
				trace("user data form login: " + rawData);
				var obj:Object = com.adobe.serialization.json.JSON.decode(rawData,true);
				
				//check if user data does not exist
				if(obj != null)
				{
					// create a new User instance and
					// save it to data property
					var kUser:KSketch_User = new KSketch_User(obj);
					userData.kUser = kUser;
					
					_isLoggedIn = true;
					
					navigator.pushView(KSketch_HomeView, userData);
				}
				
				progressTimer.stop();
				progressTimer.removeEventListener(TimerEvent.TIMER, timer_tickHandler);
				progressBar.visible = false;
			}
			
			protected function startProgressBar():void
			{
				progressBar.visible = true;
				
				progressTimer = new Timer(1);
				progressTimer.addEventListener(TimerEvent.TIMER, timer_tickHandler);
				progressTimer.start();
			}
			
			protected function timer_tickHandler(event:TimerEvent):void
			{
				progressBar.value += .01;
				
				if (progressBar.value >= 1)
					progressBar.value = 0;
			}
			
		]]>
	</fx:Script>
	<popup:DataProgressBar id="progressBar" skinClass="sg.edu.smu.ksketch2.canvas.components.popup.KSketch_DataProgressBar"
						   horizontalCenter="0" verticalCenter="0" visible="false"/>
	<!--
	<s:Group width="100%" height="100%">
		<s:Rect width="100%" height="100%">
			<s:fill> <s:SolidColor color="0xE7E7E7"/> </s:fill>
		</s:Rect>
		
		<s:Group width="100%" height="100%">
			<s:layout> <s:VerticalLayout gap="2"/> </s:layout>
			
			<s:Group id="disconnectedContent" width="100%" height="100%" visible="false">
				<s:layout> <s:HorizontalLayout gap="5" paddingLeft="50" paddingRight="50" paddingTop="50"/> </s:layout>
				
				<s:Group width="40%" height="40%">
					<s:layout> <s:HorizontalLayout paddingLeft="68" paddingTop="10"/> </s:layout>
					<buttons:KSketch_Button id="logoHolder"
											width="{KSketchStyles.LOGO_BUTTON_WIDTH}" 
											height="{KSketchStyles.LOGO_BUTTON_HEIGHT}"/>
				</s:Group>
				
				
				<s:Group width="60%">
					<s:layout> <s:VerticalLayout paddingLeft="10" paddingTop="50"/> </s:layout>
					<s:Label width="80%" fontFamily="{KSketchStyles.APP_FONT_FAMILY}" 
							 fontSize="{KSketchStyles.LOGIN_CONNECTION_FONT_SIZE}"
							 text="Whoops! No network connection is detected, though it would be great to have you logged in. What would you like to do?" />
					
					<s:Group width="100%">
						<s:layout><s:HorizontalLayout gap="50" paddingTop="30"/></s:layout>
						
						<s:Button width="25%" label="Try Again" click="checkNetworkConnection()"/>
						<s:Button width="25%" label="Skip" click="skipConnection()"/>
					</s:Group>
				</s:Group>
			</s:Group>
		</s:Group>
	</s:Group>
	-->
</s:View>