<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:view="sg.edu.smu.ksketch2.canvas.components.view.*"
		xmlns:buttons="sg.edu.smu.ksketch2.canvas.components.buttons.*" 
		xmlns:s="library://ns.adobe.com/flex/spark" actionBarVisible="false" 
		xmlns:popup="sg.edu.smu.ksketch2.canvas.components.popup.*"
		viewActivate="viewActivateHandler(event)"
		>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:HTTPService id="GetUser"
					   resultFormat="text" 
					   result="ParseJSONObject(event)" 
					   showBusyCursor="false">                        
		</s:HTTPService>
	</fx:Declarations>
	<fx:Script>
        
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			
			import flash.events.StatusEvent;
			import flash.media.StageWebView;
			import flash.net.URLRequest;
			
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.events.ViewNavigatorEvent;
			
			import air.net.URLMonitor;
			
			import sg.edu.smu.ksketch2.KSketchWebLinks;
			import sg.edu.smu.ksketch2.KSketch_User;
			import sg.edu.smu.ksketch2.canvas.components.popup.KSketch_DataProgressBar;
			import sg.edu.smu.ksketch2.canvas.components.view.KSketch_HomeView;
			
			public static const LOGIN_CANCEL:String = "Skip Login";
			public static const LOGIN_LOSTCONN:String = "Lost Connection";
			public static const LOGIN_JANRAINFAIL:String = "Janrain Failed";
			
			
			public static var userData:Object = new Object();
			public static var _isLoggedIn:Boolean = false;
			
			private var progressTimer:Timer;
			private var _stageWidth:Number;
			private var _stageHeight:Number;
			private var _monitor:URLMonitor;
			private var _monitorTimer:Timer;
			private var _webView:StageWebView = new StageWebView();
			private var _isLoggedOut:Boolean = false;
			private var token:String = "";
			protected function viewActivateHandler(event:ViewNavigatorEvent):void
			{
				// TODO Auto-generated method stub
				
				data = null;
				_webView.stage = stage;
				_stageWidth = stage.stageWidth;
				_stageHeight = stage.stageHeight;

				//check for network connection
				_monitorTimer = new Timer(3000);
				_monitor = new URLMonitor(new URLRequest(KSketchWebLinks.url));
				
				_monitorTimer.addEventListener(TimerEvent.TIMER, endMonitor);
				_monitor.addEventListener(StatusEvent.STATUS, prepareView);
				
				_monitorTimer.start();
				_monitor.start();
			}
			
			private function endMonitor(event:TimerEvent):void
			{
				_monitorTimer.stop();
				_monitor.stop();
				
				_monitorTimer.removeEventListener(TimerEvent.TIMER, endMonitor);
				_monitor.removeEventListener(StatusEvent.STATUS, prepareView);
				
				skipConnection(LOGIN_LOSTCONN);
			}
			
			private function prepareView(event:StatusEvent):void
			{
				//only show Webview (which is Janrain login page) when there is a connection
				if(_monitor.available)
				{
					if(_stageWidth > _stageHeight)
						_webView.viewPort = new Rectangle(0, 0, _stageWidth, _stageHeight);
					else
						_webView.viewPort = new Rectangle(0, 0, _stageHeight, _stageWidth);
					
					_webView.loadURL(KSketchWebLinks.url);
					_webView.addEventListener(flash.events.LocationChangeEvent.LOCATION_CHANGE, locationChangedHandler);				//for IOS
					_webView.addEventListener(flash.events.LocationChangeEvent.LOCATION_CHANGING, locationChangingHandler);			//for ANDROID
					_webView.addEventListener(ErrorEvent.ERROR, errorEventHandler);
					
				}
				else
				{
					if(_isLoggedOut)
						skipConnection(LOGIN_CANCEL);
					else
						skipConnection(LOGIN_LOSTCONN);
				}
				
				_monitorTimer.stop();
				_monitor.stop();
				
				_monitor.removeEventListener(StatusEvent.STATUS, prepareView);
				_monitorTimer.removeEventListener(TimerEvent.TIMER, endMonitor);
			}
			
			public function skipConnection(errorHandled:String):void
			{	
				if(GetUser.hasEventListener(FaultEvent.FAULT))
					GetUser.removeEventListener(FaultEvent.FAULT, faultHandler);
					
				if(_webView)
				{
					//remove error event listeners
					if(_webView.hasEventListener(ErrorEvent.ERROR))
						_webView.removeEventListener(ErrorEvent.ERROR, errorEventHandler);
					
					_webView.stop();
					_webView.viewPort = null;
					_webView.dispose();
					_webView = null;
				}
				
				_isLoggedOut = false;
				navigator.pushView(KSketch_HomeView, errorHandled);
			}
			
			//FOR Android
			private function locationChangingHandler(event:LocationChangeEvent):void
			{
				var currentURL:String = event.location.toString();
				
				//if successful login
				if(currentURL.indexOf(KSketchWebLinks.redirecturl_login) >= 0) 
				{
					//retrieve id from HTML page
					_webView.loadURL(KSketchWebLinks.urlUser);
				}
				else if((currentURL.indexOf(KSketchWebLinks.redirecturl_skip) >= 0) || (currentURL.indexOf(KSketchWebLinks.redirecturl_index) >= 0))
				{
					skipConnection(LOGIN_CANCEL);
				}
			}
			
			//FOR IOS
			private function locationChangedHandler(event:LocationChangeEvent):void
			{
				var currentURL:String = event.location.toString();
				
				if(currentURL.indexOf(KSketchWebLinks.redirecturl_login) >= 0) 
				{
					//retrieve id from HTML page
					_webView.loadURL(KSketchWebLinks.urlUser);
				}
				else if ((currentURL.indexOf(KSketchWebLinks.login_success) >= 0))
				{
					_webView.stop();
					_webView.viewPort = null;
					_webView.dispose();
					_webView = null;

					var arr:Array = currentURL.split(".html?");
					var vars:URLVariables = new URLVariables(arr[1]);
					
					//get json url
					GetUser.url = KSketchWebLinks.jsonurlUserMobile + "?id=" + vars.id;
					token = vars.token;
					GetUser.send();
					GetUser.addEventListener(FaultEvent.FAULT, faultHandler);
					startProgressBar();
				}
				else if((currentURL.indexOf(KSketchWebLinks.redirecturl_skip) >= 0) || (currentURL.indexOf(KSketchWebLinks.redirecturl_index) >= 0))
				{
					skipConnection(LOGIN_CANCEL);
				}
			}
			
			public function ParseJSONObject(event:ResultEvent):void
			{
				var rawData:String = String(event.result);
				var obj:Object = com.adobe.serialization.json.JSON.decode(rawData,true);
				
				//check if user data does not exist
				if(obj != null)
				{
					// create a new User instance and
					// save it to data property
					var kUser:KSketch_User = new KSketch_User(obj);
					kUser.token = token;
					userData.kUser = kUser;
					userData.listSketches = "";	
					userData.resolveConflict = 1;
					_isLoggedIn = true;
					
					navigator.pushView(KSketch_HomeView, userData);
				}
					
				progressTimer.stop();
				progressTimer.removeEventListener(TimerEvent.TIMER, timer_tickHandler);
				progressBar.visible = false;
			}
			
			protected function startProgressBar():void
			{
				progressBar.visible = true;
				
				progressTimer = new Timer(1);
				progressTimer.addEventListener(TimerEvent.TIMER, timer_tickHandler);
				progressTimer.start();
			}
			
			protected function timer_tickHandler(event:TimerEvent):void
			{
				progressBar.value += .01;
				
				if (progressBar.value >= 1)
					progressBar.value = 0;
			}
			
			private function faultHandler(event:FaultEvent):void
			{
				skipConnection(LOGIN_JANRAINFAIL);
			}
			
			private function errorEventHandler(event:ErrorEvent):void
			{
				skipConnection(LOGIN_LOSTCONN);
			}
			
		]]>
	</fx:Script>
	<popup:DataProgressBar id="progressBar" skinClass="sg.edu.smu.ksketch2.canvas.components.popup.KSketch_DataProgressBar"
						   horizontalCenter="0" verticalCenter="0" visible="false"/>
</s:View>