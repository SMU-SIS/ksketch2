<?xml version="1.0" encoding="utf-8"?>
<s:Button xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 skinClass="sg.edu.smu.ksketch2.canvas.components.buttons.KSketch_Canvas_Button_Skin"
		 addedToStage="{buttonState = SHOW_PLAY}">
	<fx:Script>
		<![CDATA[
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			
			import spark.components.Application;
			import spark.components.Image;
			import spark.components.SkinnablePopUpContainer;
			
			import sg.edu.smu.ksketch2.KSketch2;
			import sg.edu.smu.ksketch2.KSketchAssets;
			import sg.edu.smu.ksketch2.KSketchStyles;
			import sg.edu.smu.ksketch2.canvas.components.timebar.KSketch_TimeControl;
			import sg.edu.smu.ksketch2.canvas.controls.KMobileInteractionControl;
			import sg.edu.smu.ksketch2.utils.KSelection;
			
			private var _KSketch:KSketch2;
			private var _interceptor:UIComponent;
			private var _interactionControl:KMobileInteractionControl;
			private var _timeControl:KSketch_TimeControl;
			private var _buttonState:int;
			private var _oldSelection:KSelection;
			private var _menu:SkinnablePopUpContainer;
			private var _wasMenuOpen:Boolean = false;
			
			private const SHOW_PLAY:int = 0;
			private const SHOW_PAUSE:int = 1;
			
			
			public function init(timeControl:KSketch_TimeControl, interactionControl:KMobileInteractionControl, interceptor:UIComponent
								, KSketchInstance:KSketch2, menu:SkinnablePopUpContainer):void
			{
				_KSketch = KSketchInstance;
				_interactionControl = interactionControl;
				_timeControl = timeControl;
				_interceptor = interceptor;
				_menu = menu;
				
				timeControl.addEventListener(KSketch_TimeControl.PLAY_START, _handlePlayPause);
				timeControl.addEventListener(KSketch_TimeControl.PLAY_STOP, _handlePlayPause);
			}
			
			public function playToggle():void
			{

				if(_buttonState == SHOW_PLAY)
					_timeControl.play();
				else
					_timeControl.stop();
			}
			
			private function _handlePlayPause(event:Event):void
			{
				var app:Application = FlexGlobals.topLevelApplication as Application;
				_interceptor.graphics.clear();
				
				if(event.type == KSketch_TimeControl.PLAY_START)
				{
					buttonState = SHOW_PAUSE;
					_oldSelection =_interactionControl.selection;
					_interactionControl.selection = null;
					_interceptor.visible = true;
					
					var playBounds:Rectangle = getBounds(app);
					_interceptor.graphics.beginFill(0x000000);
					_interceptor.graphics.drawRect(0,0, app.width, app.height);
					_interceptor.graphics.drawRect(playBounds.x, playBounds.y, playBounds.width, playBounds.height);
					_interceptor.graphics.endFill();
					
					if(_menu.isOpen)
					{
						_menu.close();
						_wasMenuOpen = true;
					}
					else
						_wasMenuOpen = false;
					
					var log:XML = <op/>;
					var date:Date = new Date();
					
					log.@category = "Timeline";
					log.@type = "Play";
					log.@elapsedTime = KSketch_TimeControl.toTimeCode(date.time - _KSketch.logStartTime);
					_KSketch.log.appendChild(log);
				}
				else
				{
					buttonState = SHOW_PLAY;	// IF IT IS PAUSING,THEN SHOW PLAY!
					_interactionControl.selection = _oldSelection;
					_oldSelection = null;
					_interceptor.visible = false;
					
					if(_wasMenuOpen)
						_menu.open(app);
					
					var log2:XML = <op/>;
					var date2:Date = new Date();
					
					log2.@category = "Timeline";
					log2.@type = "Pause";
					log2.@elapsedTime = KSketch_TimeControl.toTimeCode(date2.time - _KSketch.logStartTime);
					_KSketch.log.appendChild(log2);
				}
			}
			
			private function set buttonState(value:int):void
			{
				var textureControl:Image = (skin as KSketch_Canvas_Button_Skin).texture;

				_buttonState = value;

				if(_buttonState == SHOW_PLAY)
					textureControl.source = KSketchAssets.texture_play;
				else
					textureControl.source = KSketchAssets.texture_pause;

				(skin as KSketch_Canvas_Button_Skin).backgroundFill.color = KSketchStyles.CANVAS_BUTTON_ACTIVATED;
			}
		]]>
	</fx:Script>
</s:Button>
