<?xml version="1.0" encoding="utf-8"?>
<!--
*Copyright 2010-2015 Singapore Management University
*Developed under a grant from the Singapore-MIT GAMBIT Game Lab

*This Source Code Form is subject to the terms of the
*Mozilla Public License, v. 2.0. If a copy of the MPL was
*not distributed with this file, You can obtain one at
*http://mozilla.org/MPL/2.0/.
-->
<s:SkinnablePopUpContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
						   xmlns:s="library://ns.adobe.com/flex/spark"
						   xmlns:buttons="sg.edu.smu.ksketch2.canvas.components.buttons.*" 
						   backgroundAlpha="1" backgroundColor="{KSketchGlobals.COLOR_GREY_MEDIUM}" xmlns:mx="library://ns.adobe.com/flex/mx"
						   creationComplete="_initButtons()">
	<fx:Script>
		<![CDATA[
			import flash.utils.getDefinitionByName;
			
			import sg.edu.smu.ksketch2.KSketchAssets;
			import sg.edu.smu.ksketch2.KSketchGlobals;
			import sg.edu.smu.ksketch2.canvas.components.view.KSketch_HomeView;
			import sg.edu.smu.ksketch2.utils.KSketch_Avatar;	
			
			private var GAP:Number = 20 * KSketchGlobals.SCALE;
			private var PADDINGLEFT:Number = 5 * KSketchGlobals.SCALE;
			private var PADDINGRIGHT:Number = 5 * KSketchGlobals.SCALE;
			private var PADDINGTOP:Number = 20 * KSketchGlobals.SCALE;
			private var PADDINGTOP_IMAGE:Number = -20 * KSketchGlobals.SCALE;
			private var PADDINGBOTTOM:Number = 20 * KSketchGlobals.SCALE;
			private var BUTTONDIMENSION:Number = 55 * KSketchGlobals.SCALE;
			private var BUTTON_WIDTH:Number = 74 * KSketchGlobals.SCALE;
			private var BUTTON_HEIGHT:Number = 120 * KSketchGlobals.SCALE;
			[Bindable]
			public var upColor:uint = KSketchGlobals.COLOR_GREY_LIGHT;					
			
			private var _homeView:KSketch_HomeView;
			private var _option:int;
			
			public function init(homeView:KSketch_HomeView, option:int):void
			{
				_homeView = homeView;
				_option = option;					
			}		
			
			public function showDialog():void{
				
				open(_homeView);
			}
			
			private function _initButtons():void
			{			
				if(_option == 0)
				{
					grpMain.removeElement(panelAvatar);
					panelTherapyResult.visible = true;
				}					
				else
				{
					grpMain.removeElement(panelTherapyResult);
					panelAvatar.visible = true;
					_loadAvatars();
				}
									
				_cancelButton.init("Cancel");
				_cancelButton.initSkin();
			}
			
			private function _sendTherapyResult():void
			{
				_homeView.sendTherapyResult();
				close();
			}
			
			private function _resetTherapyResult():void
			{
				_homeView.resetTherapyResult();
				close();
			}
			
			private function _cancel():void
			{
				close();
			}
			
			private function _changeAvatar(event:MouseEvent):void
			{
				_homeView.setAvatar((event.currentTarget as Image).id)
				close();
			}			
			
			private function _loadAvatars():void
			{
				var dict:Dictionary = KSketch_Avatar.AVATAR_XML;
				if(dict)
				{ 
					for(var obj:Object in dict)
					{
						if(obj.toString() != KSketch_Avatar.AVATAR_DEFAULT)
						{
							var img:Image = KSketch_Avatar.generateAvatarImage(obj, BUTTON_WIDTH);
							img.addEventListener(MouseEvent.CLICK,_changeAvatar);
							panelAvatar.addElement(img);
						}
					}
				}
			}
		]]>
	</fx:Script>
	
	<s:filters>
		<s:DropShadowFilter
			color="{KSketchGlobals.COLOR_BLACK}" angle="{KSketchGlobals.ANGLE_50}"
			alpha="{KSketchGlobals.ALPHA_06}"
			strength="{KSketchGlobals.RECT_STRENGTH}"
			blurX="{KSketchGlobals.RECT_BLURX}"
			blurY="{KSketchGlobals.RECT_BLURY}"/>
	</s:filters>
	<s:Group>
		<s:Rect width="100%" height="100%" radiusX="{KSketchGlobals.RECT_RADIUSX}" radiusY="{KSketchGlobals.RECT_RADIUSY}">
			<s:fill>
				<s:SolidColor color="{KSketchGlobals.COLOR_GREY_MEDIUM}"/>
			</s:fill>
		</s:Rect>	
		<s:Group id="grpMain">
			<s:layout>
				<s:VerticalLayout gap="{GAP}" paddingLeft="{PADDINGLEFT}" 
								  paddingRight="{PADDINGRIGHT}" paddingBottom="{PADDINGBOTTOM}" 
								  verticalAlign="middle" horizontalAlign="center"/>
			</s:layout> 
			<s:Group id="panelTherapyResult" visible="false">
				<s:layout>
					<s:HorizontalLayout horizontalAlign="center" gap="{GAP}" verticalAlign="baseline" 
										paddingLeft="{PADDINGLEFT}" paddingRight="{PADDINGRIGHT}"/>
				</s:layout>	
		
				<s:Rect>
					<s:fill>
						<s:SolidColor alpha="1" color="{KSketchGlobals.COLOR_GREY_LIGHT}"/>
					</s:fill>
				</s:Rect>
				<s:Group id="grpSend" click="_sendTherapyResult()">			
					<s:layout>
						<s:VerticalLayout horizontalAlign="center"
										  paddingLeft="{PADDINGLEFT}"
										  paddingRight="{PADDINGRIGHT}" 
										  verticalAlign="bottom"/>
					</s:layout> 
					<s:Image source="{KSketchAssets.texture_therapy_sendData}" width="{BUTTON_WIDTH}" />
					<s:Label text="Send results" paddingTop="{PADDINGTOP_IMAGE}"
							 fontFamily="{KSketchGlobals.FONT_FAMILY}"
							 fontSize="{KSketchGlobals.FONT_SIZE_18}"/>			
				</s:Group>
				
				<s:Rect>
					<s:fill>
						<s:SolidColor alpha="1" color="{KSketchGlobals.COLOR_GREY_LIGHT}"/>
					</s:fill>
				</s:Rect>
				<s:Group id="grpReset" click="_resetTherapyResult()">			
					<s:layout>
						<s:VerticalLayout horizontalAlign="center"
										  paddingLeft="{PADDINGLEFT}"
										  paddingRight="{PADDINGRIGHT}" 
										  verticalAlign="bottom"/>
					</s:layout> 
					<s:Image source="{KSketchAssets.texture_therapy_delete}" width="{BUTTON_WIDTH}" />
					<s:Label text="Reset results" paddingTop="{PADDINGTOP_IMAGE}"
							 fontFamily="{KSketchGlobals.FONT_FAMILY}"
							 fontSize="{KSketchGlobals.FONT_SIZE_18}"/>			
				</s:Group>
			</s:Group>
			
			<!--add avatar dynamically-->
			<s:Group id="panelAvatar" visible="false">
				<s:layout>
					<s:HorizontalLayout horizontalAlign="center" gap="{GAP}" verticalAlign="baseline" 
										paddingLeft="{PADDINGLEFT}" paddingRight="{PADDINGRIGHT}"/>
				</s:layout>					
			</s:Group>
			
			<s:Group id="grpCancel" click="_cancel()" >			
				<s:layout>
					<s:VerticalLayout horizontalAlign="right"
									  paddingRight="{PADDINGRIGHT}" />
				</s:layout> 
				<buttons:KSketch_DialogButton id="_cancelButton" label="Cancel" click="_cancel()"/>		
			</s:Group>
		</s:Group>
	</s:Group>	
</s:SkinnablePopUpContainer>