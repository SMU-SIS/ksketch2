<?xml version="1.0" encoding="utf-8"?>
<!--
*Copyright 2010-2012 Singapore Management University
*Developed under a grant from the Singapore-MIT GAMBIT Game Lab

*This Source Code Form is subject to the terms of the
*Mozilla Public License, v. 2.0. If a copy of the MPL was
*not distributed with this file, You can obtain one at
*http://mozilla.org/MPL/2.0/.
-->
<s:SkinnablePopUpContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
						   xmlns:s="library://ns.adobe.com/flex/spark"
						   xmlns:buttons="sg.edu.smu.ksketch2.canvas.components.buttons.*"
						   backgroundAlpha="0" initialize="initStyle()"
						   creationComplete="_initButtons()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:HTTPService id="httpService"
					   useProxy="false"  
					   method="POST"
					   resultFormat="text" 
					   >
		</s:HTTPService>
	</fx:Declarations>
	
	<fx:Script>
	<![CDATA[
		import mx.events.FlexEvent;
		import mx.managers.PopUpManager;

		import sg.edu.smu.ksketch2.KSketchAssets;
		import sg.edu.smu.ksketch2.KSketchStyles;
		import sg.edu.smu.ksketch2.canvas.KSketch_CanvasView_Preferences;
		import sg.edu.smu.ksketch2.canvas.components.view.KSketch_CanvasView;
		import sg.edu.smu.ksketch2.canvas.controls.KActivityControl;
		import sg.edu.smu.ksketch2.model.objects.KInstructions;

		private var _canvasView:KSketch_CanvasView;
		private var _menu:KSketch_PopUp_Menu;
		private var _hasBegin:Boolean;
		private var _kInstructions:KInstructions;
		private var _currentInstruction:int;
		private var _currentActivity:int;
		private var _activityTypes:Array = ['INTRO', 'RECALL', 'TRACE', 'TRACK', 'RECREATE'];
		private var instructionObjectIDs:Array;
		private var instructionMessages:Array;
		private var _kAlertBox:KSketch_Alert;
		private var _activityControl:KActivityControl;
		private var _alertTimer:Timer;

		public function init(canvasView:KSketch_CanvasView, menu:KSketch_PopUp_Menu, kInstructions:KInstructions,
							 kAlertBox:KSketch_Alert, activityControl:KActivityControl):void {
			_canvasView = canvasView;
			_menu = menu;
			_hasBegin = false;
			_kInstructions = kInstructions;
			_currentInstruction = 0;
			_currentActivity = 0;
			activityButton_Prev.enabled = false;
			instructionButton_Prev.enabled = false;
			instructionObjectIDs = new Array();
			instructionMessages = new Array();
			instructionObjectIDs = _kInstructions.getObjectIDs();
			instructionMessages = _kInstructions.getInstructions();
			instructionMessage.text = instructionMessages[_currentActivity][_currentInstruction];
			instructionHeader.text = "Step " + (_currentInstruction + 1);
			activityHeader.text = _activityTypes[_currentActivity];
			_kAlertBox = kAlertBox;
			_activityControl = activityControl;
		}

		private function _initButtons():void {
			activityButton_Prev.init(KSketchAssets.texture_instructions_prev, KSketchAssets.texture_instructions_prev);
			activityButton_Prev.initSkin();
			activityButton_Next.init(KSketchAssets.texture_instructions_next, KSketchAssets.texture_instructions_next);
			activityButton_Next.initSkin();

			instructionButton_Prev.init(KSketchAssets.texture_instructions_prev, KSketchAssets.texture_instructions_prev);
			instructionButton_Prev.initSkin();
			instructionButton_Next.init(KSketchAssets.texture_instructions_next, KSketchAssets.texture_instructions_next);
			instructionButton_Next.initSkin();
		}

		private function initStyle():void {
			this.removeEventListener(FlexEvent.INITIALIZE, initStyle);

			activityHeader.setStyle("fontSize", KSketchStyles.DIALOG_BUTTON_NORMAL_FONT);
			activityButton_Prev.setStyle("fontSize", KSketchStyles.DIALOG_BUTTON_SIZE);
			activityButton_Next.setStyle("fontSize", KSketchStyles.DIALOG_BUTTON_SIZE);

			instructionHeader.setStyle("fontSize", KSketchStyles.DIALOG_BUTTON_NORMAL_FONT);
			instructionButton_Prev.setStyle("fontSize", KSketchStyles.DIALOG_BUTTON_SIZE);
			instructionButton_Next.setStyle("fontSize", KSketchStyles.DIALOG_BUTTON_SIZE);
			instructionButton_Start.setStyle("fontSize", KSketchStyles.DIALOG_BUTTON_SIZE);
			instructionMessage.setStyle("fontSize", KSketchStyles.DIALOG_BUTTON_SIZE);

			if (_menu.isTiming)
				instructionButton_Start.label = "DONE";
			else
				instructionButton_Start.label = "START";
		}

		override public function open(owner:DisplayObjectContainer, modal:Boolean = false):void {
			initStyle();
			super.open(owner, modal);
		}

		override public function close(commit:Boolean = false, data:* = null):void {
			super.close(commit, data);
		}

		public function actionActivity():void {
			if (!_hasBegin) {
				_hasBegin = true;

				_activityControl.startActivity(KSketch_CanvasView_Preferences.activity);
				_menu.resetTimer();
			}
			else {
				_hasBegin = false;
				_menu.resetTimer();
			}
		}

		public function startStopActivity():void {
			if (instructionButton_Start.label == "START") {
				instructionButton_Start.label = "DONE";
				activityButton_Prev.enabled = false;
				activityButton_Next.enabled = false;
				instructionButton_Prev.enabled = false;
				instructionButton_Next.enabled = false;

				_menu.actionInstructions();
				_activityControl.startActivity(activityHeader.text);

				if (_currentInstruction == 0 && _activityTypes[_currentActivity] == "TRACK") {
					_alertTimer = new Timer(1000, 3);
					_alertTimer.addEventListener(TimerEvent.TIMER, updateCount);
					_alertTimer.addEventListener(TimerEvent.TIMER_COMPLETE, startTiming);
					if (!_kAlertBox.isOpen) {
						_kAlertBox.open(_canvasView, true);
						_kAlertBox.updateText("3");
						PopUpManager.centerPopUp(_kAlertBox);
					}
					_alertTimer.start();


				}
				else {
					_menu.startTimer();
				}
			}
			else if (instructionButton_Start.label == "DONE") {
				if (activityHeader.text == "TRACE")
					_activityControl.processTrace();

				instructionButton_Start.label = "START";
				enableDisableActivity();
				enableDisableButtons();

				nextInstruction();
				if (instructionMessage.text == "")
					nextActvity();

				_menu.stopTimer();
			}
		}

		private function startTiming(event:TimerEvent):void {
			if (_currentInstruction == 0) {
				_kAlertBox.close();
				_canvasView.autoPlayAnimation();
			}
			_menu.startTimer();

		}

		private function updateCount(event:TimerEvent):void {

			_kAlertBox.updateText(String(3 - _alertTimer.currentCount));
		}

		private function previousInstruction():void {
			_currentInstruction -= 1;
			instructionMessage.text = instructionMessages[_currentActivity][_currentInstruction];
			instructionHeader.text = "Step " + (_currentInstruction + 1);
			enableDisableButtons();
		}

		private function nextInstruction():void {
			if (_currentInstruction < instructionMessages[_currentActivity].length - 1) {
				_currentInstruction += 1;
				instructionMessage.text = instructionMessages[_currentActivity][_currentInstruction];
				instructionHeader.text = "Step " + (_currentInstruction + 1);
				enableDisableButtons();
			} else {
				nextActvity();
				enableDisableButtons();
				_menu.openInstructions();
				instructionButton_Start.label = "START";
			}
		}

		private function enableDisableButtons():void {
			if (_currentInstruction != 0)
				instructionButton_Prev.enabled = true;
			else
				instructionButton_Prev.enabled = false;
			if (_currentInstruction == instructionMessages[_currentActivity].length - 1)
				instructionButton_Next.enabled = false;
			else
				instructionButton_Next.enabled = true;
		}

		private function previousActivity():void {
			_currentActivity -= 1;
			_currentInstruction = 0;
			activityHeader.text = _activityTypes[_currentActivity];
			instructionMessage.text = instructionMessages[_currentActivity][_currentInstruction];
			instructionHeader.text = "Step " + (_currentInstruction + 1);
			enableDisableActivity();
			enableDisableButtons();
		}

		private function nextActvity():void {
			_currentInstruction = 0;
			_currentActivity += 1;
			activityHeader.text = _activityTypes[_currentActivity];
			instructionMessage.text = instructionMessages[_currentActivity][_currentInstruction];
			instructionHeader.text = "Step " + (_currentInstruction + 1);
			enableDisableActivity();

		}

		private function enableDisableActivity():void {
			if (_currentActivity != 0)
				activityButton_Prev.enabled = true;
			else
				activityButton_Prev.enabled = false;
			if (_currentActivity == instructionMessages.length - 1)
				activityButton_Next.enabled = false;
			else
				activityButton_Next.enabled = true;
		}

		public function currentObjectID():int {
			return int(instructionObjectIDs[_currentActivity][_currentInstruction]);
		}

		public function currentInstruction():int {
			return _currentInstruction;
		}
		]]>
	</fx:Script>
	<s:filters>
		<s:DropShadowFilter 
			color="{KSketchStyles.CANVAS_SHADOW_COLOR}" angle="{KSketchStyles.CANVAS_SHADOW_ANGLE}"
			alpha="{KSketchStyles.CANVAS_SHADOW_ALPHA * 0.5}"
			strength="{KSketchStyles.CANVAS_SHADOW_STRENGTH}"
			blurX="{KSketchStyles.CANVAS_SHADOW_X_DISTANCE * 0.75}"
			blurY="{KSketchStyles.CANVAS_SHADOW_Y_DISTANCE * 0.75}"/>
	</s:filters>
	<s:Group id="instructions" visible="true">
		<s:Rect id="instructionBox" width="240" height="150%" radiusX="{KSketchStyles.MENU_CORNER_RADIUS}" radiusY="{KSketchStyles.MENU_CORNER_RADIUS}">
			<s:fill>
				<s:SolidColor color="{KSketchStyles.MENU_BACKGROUND_COLOR}"/>
			</s:fill>
		</s:Rect>
		<s:Group>
			<s:layout>
				<s:VerticalLayout gap="{KSketchStyles.DIALOG_PADDING_20}" horizontalAlign="center" verticalAlign="middle"/>
			</s:layout>
			<s:Group width="100%">
				<s:layout>
					<s:HorizontalLayout  gap="{KSketchStyles.DIALOG_PADDING_20}" horizontalAlign="center" verticalAlign="middle"/>
				</s:layout>
				<buttons:KSketch_ListButton id="activityButton_Prev" height="{KSketchStyles.DIALOG_MEASUREMENT_25}" click="previousActivity()"/>
				<s:Label width="100" id="activityHeader"/>
				<buttons:KSketch_ListButton id="activityButton_Next" height="{KSketchStyles.DIALOG_MEASUREMENT_25}" click="nextActvity()"/>
			</s:Group>
			
			
			<s:Line xFrom="0" xTo="225" yFrom="0" yTo="0">
				<s:stroke>
					<s:SolidColorStroke color="0x000000" weight="2" caps="square"/>
				</s:stroke>
			</s:Line>
			
			<s:Group width="100%">
				<s:layout>
					<s:HorizontalLayout  gap="{KSketchStyles.DIALOG_PADDING_20}" horizontalAlign="center" verticalAlign="middle"/>
				</s:layout>
				<buttons:KSketch_ListButton id="instructionButton_Prev" height="{KSketchStyles.DIALOG_MEASUREMENT_25}" click="previousInstruction()"/>
				<s:Label width="95" id="instructionHeader" text="Default"/>
				<buttons:KSketch_ListButton id="instructionButton_Next" height="{KSketchStyles.DIALOG_MEASUREMENT_25}" click="nextInstruction()"/>
			</s:Group>
			
			<s:Label id="instructionMessage" text="This is the default text. {'\n'}Set message according to activity."/>
			<s:Button id="instructionButton_Start" click="startStopActivity()" width="100%" height="{KSketchStyles.DIALOG_MEASUREMENT_25}"/>
			
		</s:Group>
	</s:Group>
</s:SkinnablePopUpContainer>