<?xml version="1.0" encoding="utf-8"?>
<!--
*Copyright 2010-2012 Singapore Management University
*Developed under a grant from the Singapore-MIT GAMBIT Game Lab

*This Source Code Form is subject to the terms of the
*Mozilla Public License, v. 2.0. If a copy of the MPL was
*not distributed with this file, You can obtain one at
*http://mozilla.org/MPL/2.0/.
-->
<s:SkinnablePopUpContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
						   xmlns:s="library://ns.adobe.com/flex/spark"
						   xmlns:buttons="sg.edu.smu.ksketch2.canvas.components.buttons.*"
						   backgroundAlpha="0" initialize="initStyle()"
						   creationComplete="_initButtons()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:HTTPService id="httpService"
					   useProxy="false"  
					   method="POST"
					   resultFormat="text" 
					   >
		</s:HTTPService>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import sg.edu.smu.ksketch2.KSketchAssets;
			import sg.edu.smu.ksketch2.KSketchStyles;
			import sg.edu.smu.ksketch2.canvas.KSketch_CanvasView_Preferences;
			import sg.edu.smu.ksketch2.canvas.components.view.KSketch_CanvasView;
			
			private var _canvasView:KSketch_CanvasView;
			private var _menu:KSketch_PopUp_Menu;
			private var _hasBegin:Boolean;
			
			public function init(canvasView:KSketch_CanvasView, menu:KSketch_PopUp_Menu):void
			{
				_canvasView = canvasView;
				_menu = menu;
				_hasBegin = false; 
			}
			
			private function _initButtons():void
			{
				activityButton_Prev.init(KSketchAssets.texture_instructions_prev, KSketchAssets.texture_instructions_prev);
				activityButton_Prev.initSkin();
				activityButton_Next.init(KSketchAssets.texture_instructions_next, KSketchAssets.texture_instructions_next);
				activityButton_Next.initSkin();
				
				instructionButton_Prev.init(KSketchAssets.texture_instructions_prev, KSketchAssets.texture_instructions_prev);
				instructionButton_Prev.initSkin();
				instructionButton_Next.init(KSketchAssets.texture_instructions_next, KSketchAssets.texture_instructions_next);
				instructionButton_Next.initSkin();
			}
			
			private function initStyle():void
			{
				this.removeEventListener(FlexEvent.INITIALIZE, initStyle);
				
				activityHeader.setStyle("fontSize", KSketchStyles.DIALOG_BUTTON_NORMAL_FONT);
				activityButton_Prev.setStyle("fontSize", KSketchStyles.DIALOG_BUTTON_SIZE);
				activityButton_Next.setStyle("fontSize", KSketchStyles.DIALOG_BUTTON_SIZE);
				
				instructionHeader.setStyle("fontSize", KSketchStyles.DIALOG_BUTTON_NORMAL_FONT);
				instructionButton_Prev.setStyle("fontSize", KSketchStyles.DIALOG_BUTTON_SIZE);
				instructionButton_Next.setStyle("fontSize", KSketchStyles.DIALOG_BUTTON_SIZE);
				instructionButton_Start.setStyle("fontSize", KSketchStyles.DIALOG_BUTTON_SIZE);
				instructionMessage.setStyle("fontSize", KSketchStyles.DIALOG_BUTTON_SIZE);
				
				activityHeader.text = KSketch_CanvasView_Preferences.activity;
				instructionHeader.text = "Instr. 1";
				
				if(_menu.isTiming)
					instructionButton_Start.label = "Stop";
				else
					instructionButton_Start.label = "Start";
			}
			
			override public function open(owner:DisplayObjectContainer, modal:Boolean=false):void
			{
				initStyle();
				super.open(owner, modal);
			}
			
			override public function close(commit:Boolean=false, data:*=null):void
			{
				super.close(commit,data);
			}
			
			public function actionActivity():void
			{
				if(!_hasBegin)
				{
					_hasBegin = true;
					
					_canvasView.startActivity(KSketch_CanvasView_Preferences.activity);
					_menu.resetTimer();
				}
				else 
				{
					_hasBegin = false;
					_menu.resetTimer();
				}
			}
			
			private function startStopActivity():void
			{
				if(instructionButton_Start.label == "Start")
				{
					instructionButton_Start.label = "Stop";
					
					_menu.startTimer();
					_menu.actionInstructions();
				}
				else if(instructionButton_Start.label == "Stop") 
				{
					instructionButton_Start.label = "Start";
					
					_menu.stopTimer();
				}
			}
			
		]]>
	</fx:Script>
	<s:filters>
		<s:DropShadowFilter 
			color="{KSketchStyles.CANVAS_SHADOW_COLOR}" angle="{KSketchStyles.CANVAS_SHADOW_ANGLE}"
			alpha="{KSketchStyles.CANVAS_SHADOW_ALPHA * 0.5}"
			strength="{KSketchStyles.CANVAS_SHADOW_STRENGTH}"
			blurX="{KSketchStyles.CANVAS_SHADOW_X_DISTANCE * 0.75}"
			blurY="{KSketchStyles.CANVAS_SHADOW_Y_DISTANCE * 0.75}"/>
	</s:filters>
	<s:Group id="instructions" visible="true">
		<s:Rect id="instructionBox" width="230" height="150%" radiusX="{KSketchStyles.MENU_CORNER_RADIUS}" radiusY="{KSketchStyles.MENU_CORNER_RADIUS}">
			<s:fill>
				<s:SolidColor color="{KSketchStyles.MENU_BACKGROUND_COLOR}"/>
			</s:fill>
		</s:Rect>
		<s:Group>
			<s:layout>
				<s:VerticalLayout gap="{KSketchStyles.DIALOG_PADDING_20}" horizontalAlign="center" verticalAlign="middle"/>
			</s:layout>
			<s:Group width="100%">
				<s:layout>
					<s:HorizontalLayout  gap="{KSketchStyles.DIALOG_PADDING_20}" horizontalAlign="center" verticalAlign="middle"/>
				</s:layout>
				<buttons:KSketch_ListButton id="activityButton_Prev" height="{KSketchStyles.DIALOG_MEASUREMENT_25}"/>
				<s:Label width="80" id="activityHeader"/>
				<buttons:KSketch_ListButton id="activityButton_Next" height="{KSketchStyles.DIALOG_MEASUREMENT_25}"/>
			</s:Group>
			
			
			<s:Line xFrom="0" xTo="225" yFrom="0" yTo="0">
				<s:stroke>
					<s:SolidColorStroke color="0x000000" weight="2" caps="square"/>
				</s:stroke>
			</s:Line>
			
			<s:Group width="100%">
				<s:layout>
					<s:HorizontalLayout  gap="{KSketchStyles.DIALOG_PADDING_20}" horizontalAlign="center" verticalAlign="middle"/>
				</s:layout>
				<buttons:KSketch_ListButton id="instructionButton_Prev" height="{KSketchStyles.DIALOG_MEASUREMENT_25}"/>
				<s:Label width="80" id="instructionHeader"/>
				<buttons:KSketch_ListButton id="instructionButton_Next" height="{KSketchStyles.DIALOG_MEASUREMENT_25}"/>
			</s:Group>
			
			<s:Label id="instructionMessage" text="This is the default text. {'\n'}Set message according to activity."/>
			<s:Button id="instructionButton_Start" click="startStopActivity()" width="100%" height="{KSketchStyles.DIALOG_MEASUREMENT_25}"/>
			
		</s:Group>
	</s:Group>
</s:SkinnablePopUpContainer>