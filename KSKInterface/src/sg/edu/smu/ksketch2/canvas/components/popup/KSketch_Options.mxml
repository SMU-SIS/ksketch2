<?xml version="1.0" encoding="utf-8"?>
<!--
*Copyright 2010-2012 Singapore Management University
*Developed under a grant from the Singapore-MIT GAMBIT Game Lab

*This Source Code Form is subject to the terms of the
*Mozilla Public License, v. 2.0. If a copy of the MPL was
*not distributed with this file, You can obtain one at
*http://mozilla.org/MPL/2.0/.
-->
<s:SkinnablePopUpContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
						   xmlns:s="library://ns.adobe.com/flex/spark" backgroundAlpha="0" initialize="initStyle()">
	<fx:Script>
		<![CDATA[
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.events.ItemClickEvent;
			
			import spark.components.Application;
			
			import sg.edu.smu.ksketch2.KSketchStyles;
			import sg.edu.smu.ksketch2.canvas.KSketch_CanvasView_Preferences;
			import sg.edu.smu.ksketch2.canvas.components.timebar.KSketch_TimeControl;
			import sg.edu.smu.ksketch2.canvas.components.view.KSketch_CanvasView;
			import sg.edu.smu.ksketch2.model.data_structures.KKeyFrame;
			import sg.edu.smu.ksketch2.operators.KSingleReferenceFrameOperator;
			
			private var _canvasView:KSketch_CanvasView;
			private var _menu:KSketch_PopUp_Menu;
			public var mode:int;
			
			private var _oneStarAvg:Number;
			private var _twoStarAvg:Number;
			private var _threeStarAvg:Number;
			
			private var _oneStarMax:Number;
			private var _twoStarMax:Number;
			private var _threeStarMax:Number;
			
			[Bindable]
			private var timeValue:String = "02:00";
			
			[Bindable]
			private var maximumSliderValue:int = 10;
			
			[Bindable]
			private var minimumSliderValue:int = 0;
			
			private function initStyle():void
			{
				this.removeEventListener(FlexEvent.INITIALIZE, initStyle);
				header.setStyle("fontSize", KSketchStyles.DIALOG_BUTTON_HEADER);
				diffGroup.setStyle("fontSize", KSketchStyles.DIALOGBUTTON_FONT_SIZE);
				diffLabel.setStyle("fontSize", KSketchStyles.DIALOG_BUTTON_NORMAL_FONT);
				toolbarGroup.setStyle("fontSize", KSketchStyles.DIALOGBUTTON_FONT_SIZE);
				toolLabel.setStyle("fontSize", KSketchStyles.DIALOG_BUTTON_NORMAL_FONT);
				initGroup.setStyle("fontSize", KSketchStyles.DIALOGBUTTON_FONT_SIZE);
				initLabel.setStyle("fontSize", KSketchStyles.DIALOG_BUTTON_NORMAL_FONT);
				closeButton.setStyle("fontSize", KSketchStyles.DIALOG_BUTTON_SIZE);
				var duration:int = KSketch_CanvasView_Preferences.duration;
				timeValue = Math.ceil(duration/60)+":"+duration%60;	
			}
			
			public function init(canvasView:KSketch_CanvasView, menu:KSketch_PopUp_Menu):void
			{
				_canvasView = canvasView;
				_menu = menu;
				
				_menu.open(_canvasView);
				KSketch_CanvasView_Preferences.menuOpen = KSketch_CanvasView_Preferences.OPEN;
				
			}
			
			override public function open(owner:DisplayObjectContainer, modal:Boolean=false):void
			{
				super.open(owner, modal);
			}
			
			public function applyPreferences():void
			{
				_timebarBottom();
				_autoInsertKey(false);
				_doubleTap(false);
				_menuOpen(true);
				_menuLeft();
				
				//KSKETCH-SYNPHNE
				_tapAnywhere();
			}
			
			//KSKETCH-SYNPHNE
			//================================================================================================================
			private function _tapAnywhere():void
			{
				tapAnywhere.selected = true;
				KSketch_CanvasView_Preferences.tapAnywhere = KSketch_CanvasView_Preferences.TAPANYWHERE_ON;
			}
			
			private function _initiation(event:ItemClickEvent):void
			{
				if (event.currentTarget.selectedValue == "anywhere") {
					KSketch_CanvasView_Preferences.tapAnywhere = KSketch_CanvasView_Preferences.TAPANYWHERE_ON;
				} else {
					KSketch_CanvasView_Preferences.tapAnywhere = KSketch_CanvasView_Preferences.TAPANYWHERE_OFF;
				}
			}
			
			private function _duration(event:Event):void
			{
				var tempArray:Array=activityDuration.text.split(":");
				var durationInSec:int = 120;
				if(tempArray.length == 1)
					durationInSec = int(tempArray[0])*60;
				else if(tempArray.length == 2)
					durationInSec = int(tempArray[0])*60 + int(tempArray[1]);
				KSketch_CanvasView_Preferences.duration = durationInSec;
			}
			
			protected function oneStarSlider_Avg_changeEndHandler(event:FlexEvent):void
			{
				var changedValue:Number = (event.currentTarget as HSlider).value;
				_oneStarAvg = changedValue;
			}
			
			protected function twoStarSlider_Avg_changeEndHandler(event:FlexEvent):void
			{
				var changedValue:Number = (event.currentTarget as HSlider).value;
				_twoStarAvg = changedValue;
			}
			
			protected function threeStarSlider_Avg_changeEndHandler(event:FlexEvent):void
			{
				var changedValue:Number = (event.currentTarget as HSlider).value;
				_threeStarAvg = changedValue;
			}
			
			protected function oneStarSlider_Max_changeEndHandler(event:FlexEvent):void
			{
				var changedValue:Number = (event.currentTarget as HSlider).value;
				_oneStarMax = changedValue;
			}
			
			protected function twoStarSlider_Max_changeEndHandler(event:FlexEvent):void
			{
				var changedValue:Number = (event.currentTarget as HSlider).value;
				_twoStarMax = changedValue;
			}
			
			protected function threeStarSlider_Max_changeEndHandler(event:FlexEvent):void
			{
				var changedValue:Number = (event.currentTarget as HSlider).value;
				_threeStarMax = changedValue;
			}
			
			public function get starValueArr():Array
			{
				var arr:Array = [_oneStarAvg, _twoStarAvg, _threeStarAvg, _oneStarMax, _twoStarMax, _threeStarMax];
				return arr;
			}
			//================================================================================================================
			
			private function _timebarTop():void
			{
				if(_canvasView.mainCanvas.getElementIndex(_canvasView.timebar_group) <= _canvasView.mainCanvas.getElementIndex(_canvasView.canvas_component))
					return;

				_canvasView.mainCanvas.swapElements(_canvasView.timebar_group, _canvasView.canvas_component);
				KSketch_CanvasView_Preferences.timebarPosition = KSketch_CanvasView_Preferences.POS_TOP;
				_canvasView.timeControl.position = KSketch_TimeControl.BAR_TOP;
				_menu.dispatchEvent(new FlexEvent(FlexEvent.UPDATE_COMPLETE));
			}
			
			private function _timebarBottom():void
			{
				if(_canvasView.mainCanvas.getElementIndex(_canvasView.timebar_group) >= _canvasView.mainCanvas.getElementIndex(_canvasView.canvas_component))
					return;
				
				_canvasView.mainCanvas.swapElements(_canvasView.timebar_group, _canvasView.canvas_component);
				KSketch_CanvasView_Preferences.timebarPosition = KSketch_CanvasView_Preferences.POS_BOTTOM;
				_canvasView.timeControl.position = KSketch_TimeControl.BAR_BOTTOM;
				_menu.dispatchEvent(new FlexEvent(FlexEvent.UPDATE_COMPLETE));
			}
			
			private function _menuTop():void
			{
				_menu.position = KSketch_PopUp_Menu.UP;
				KSketch_CanvasView_Preferences.menuPosition = KSketch_CanvasView_Preferences.POS_TOP;
			}
			
			private function _menuLeft():void
			{
				_menu.position = KSketch_PopUp_Menu.LEFT;
				KSketch_CanvasView_Preferences.menuPosition = KSketch_CanvasView_Preferences.POS_LEFT;
				leftAlign.selected = true;
			}
			
			private function _menuRight():void
			{
				_menu.position = KSketch_PopUp_Menu.RIGHT;
				KSketch_CanvasView_Preferences.menuPosition = KSketch_CanvasView_Preferences.POS_RIGHT;
				rightAlign.selected = true;
			}
			
			private function _menuBottom():void
			{
				_menu.position = KSketch_PopUp_Menu.DOWN;
				KSketch_CanvasView_Preferences.menuPosition = KSketch_CanvasView_Preferences.POS_BOTTOM;
			}
			
			private function _menuOpen(value:Boolean):void
			{
				if(value)
				{
					_menu.open(_canvasView);
					KSketch_CanvasView_Preferences.menuOpen = KSketch_CanvasView_Preferences.OPEN;
				}
				else
					KSketch_CanvasView_Preferences.menuOpen = KSketch_CanvasView_Preferences.CLOSE;
			}
			
			private function _autoInsertKey(value:Boolean):void
			{
				if(value)
				{
					_setStudy(0);
					KSketch_CanvasView_Preferences.autoInsert = KSketch_CanvasView_Preferences.AUTO;
				}
				else
				{
					_setStudy(1);
					KSketch_CanvasView_Preferences.autoInsert = KSketch_CanvasView_Preferences.NOT_AUTO;
				}
			}
			
			private function _doubleTap(value:Boolean):void
			{
				if(value)
				{
					KSketch_CanvasView_Preferences.doubleTap = KSketch_CanvasView_Preferences.DOUBLETAP_ON;
				}
				else
				{
					KSketch_CanvasView_Preferences.doubleTap = KSketch_CanvasView_Preferences.DOUBLETAP_OFF;
				}
			}
			
			private function _autoLog(value:Boolean):void
			{
				if(value)
				{
					_canvasView.enableLog = true;
					KSketch_CanvasView_Preferences.autoLog = KSketch_CanvasView_Preferences.AUTOLOG_ON;
				}
				else
				{
					_canvasView.enableLog = false;
					KSketch_CanvasView_Preferences.autoLog = KSketch_CanvasView_Preferences.AUTOLOG_OFF;
				}
			}
			
			private function _setStudy(value:int):void
			{
				KSingleReferenceFrameOperator.mode = value;
				KSketch_Timebar_Context_Double.mode = value;
				KKeyFrame.mode = value;
				mode = value;
			}
			
			override public function close(commit:Boolean=false, data:*=null):void
			{
				super.close(commit, data);
				(FlexGlobals.topLevelApplication as Application).setFocus();
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:RadioButtonGroup id="initiationGroup" itemClick="_initiation(event);"/>
	</fx:Declarations>
	<s:filters>
		<s:DropShadowFilter 
			color="{KSketchStyles.CANVAS_SHADOW_COLOR}" angle="{KSketchStyles.CANVAS_SHADOW_ANGLE}"
			alpha="{KSketchStyles.CANVAS_SHADOW_ALPHA * 0.5}"
			strength="{KSketchStyles.CANVAS_SHADOW_STRENGTH}"
			blurX="{KSketchStyles.CANVAS_SHADOW_X_DISTANCE * 0.75}"
			blurY="{KSketchStyles.CANVAS_SHADOW_Y_DISTANCE * 0.75}"/>
	</s:filters>
	<s:Rect width="100%" height="100%" radiusX="{KSketchStyles.MENU_CORNER_RADIUS}" radiusY="{KSketchStyles.MENU_CORNER_RADIUS}">
		<s:fill>
			<s:SolidColor color="{KSketchStyles.MENU_BACKGROUND_COLOR}"/>
		</s:fill>
	</s:Rect>
	<s:Group>
		<s:layout>
			<s:VerticalLayout gap="{KSketchStyles.DIALOG_PADDING_20}" paddingLeft="{KSketchStyles.DIALOG_PADDING_15}" paddingRight="{KSketchStyles.DIALOG_PADDING_10}" paddingTop="{KSketchStyles.DIALOG_PADDING_20}" paddingBottom="{KSketchStyles.DIALOG_PADDING_10}"/>
		</s:layout>
		<s:Label id="header" text="Options"/>
		
		<s:Group id="toolbarGroup">
			<s:layout>
				<s:VerticalLayout paddingLeft="10"/>
			</s:layout>
			<s:Label id="toolLabel" text="Toolbar alignment"/>
			<s:Group>
				<s:layout>
					<s:VerticalLayout/>
				</s:layout>
				
				<s:Group>
					<s:layout>
						<s:HorizontalLayout/>
					</s:layout>
					<s:RadioButton groupName="toolGroup" id="rightAlign" value="right" label="Right" fontSize="{KSketchStyles.DIALOGBUTTON_FONT_SIZE}"/>
					<s:RadioButton groupName="toolGroup" id="leftAlign" value="left" label="Left"  fontSize="{KSketchStyles.DIALOGBUTTON_FONT_SIZE}"/>
				</s:Group>
			</s:Group>
		</s:Group>
		
		<s:Group id="initGroup">
			<s:layout>
				<s:VerticalLayout paddingLeft="10"/>
			</s:layout>
			<s:Label id="initLabel" text="Initiation"/>
			<s:Group>
				<s:layout>
					<s:VerticalLayout/>
				</s:layout>
				
				<s:Group>
					<s:layout>
						<s:HorizontalLayout/>
					</s:layout>
					<s:RadioButton groupName="initiationGroup" id="tapAnywhere" value="anywhere" label="Tap Anywhere" fontSize="{KSketchStyles.DIALOGBUTTON_FONT_SIZE}"/>
					<s:RadioButton groupName="initiationGroup" id="tapObject" value="object" label="Tap Object"  fontSize="{KSketchStyles.DIALOGBUTTON_FONT_SIZE}"/>
				</s:Group>
			</s:Group>
		</s:Group>
		
		<s:Group id="diffGroup">
			<s:layout>
				<s:VerticalLayout paddingLeft="10"/>
			</s:layout>
			<s:Label id="diffLabel" text="Difficulty"/>
			<s:Group>
				<s:layout>
					<s:VerticalLayout/>
				</s:layout>
				
				<s:Group>
					<s:layout>
						<s:HorizontalLayout verticalAlign="middle"/>
					</s:layout>
					<s:Label id="titleTime" text="Time Threshold (MM:SS)"/>
					<s:TextInput id="activityDuration" text="{timeValue}" height="{KSketchStyles.DIALOG_MEASUREMENT_50}" width="{KSketchStyles.DIALOG_MEASUREMENT_100}" change="_duration(event)" fontSize="{KSketchStyles.DIALOGBUTTON_FONT_SIZE}" />
				</s:Group>
				
				<s:Group>
					<s:layout>
						<s:VerticalLayout/>
					</s:layout>
					<s:Label id="titleAccuracyAvg" text="Accuracy Threshold - Average Distance"/>
					<s:Group>
						<s:Form>
							<s:FormItem label="3-stars:">
								<s:HSlider id="threeStarSlider_avg"
										   minimum="{minimumSliderValue}"
										   maximum="{maximumSliderValue}"
										   snapInterval="0.05"
										   changeEnd="threeStarSlider_Avg_changeEndHandler(event)"
										   showDataTip="true"/>
							</s:FormItem>
							<s:FormItem label="2-stars:">
								<s:HSlider id="twoStarSlider_avg"
										   minimum="{minimumSliderValue}"
										   maximum="{maximumSliderValue}"
										   snapInterval="0.05"
										   changeEnd="twoStarSlider_Avg_changeEndHandler(event)"
										   showDataTip="true"/>
							</s:FormItem>
							<s:FormItem label="1-star :">
								<s:HSlider id="oneStarSlider_avg"
										   minimum="{minimumSliderValue}"
										   maximum="{maximumSliderValue}"
										   snapInterval="0.05"
										   changeEnd="oneStarSlider_Avg_changeEndHandler(event)"
										   showDataTip="true"/>
							</s:FormItem>
						</s:Form>
					</s:Group>
				</s:Group>
				
				<s:Group>
					<s:layout>
						<s:VerticalLayout/>
					</s:layout>
					<s:Label id="titleAccuracyMax" text="Accuracy Threshold - Maximum Distance"/>
					<s:Group>
						<s:Form>
							<s:FormItem label="3-stars:">
								<s:HSlider id="threeStarSlider_max"
										   minimum="{minimumSliderValue}"
										   maximum="{maximumSliderValue}"
										   snapInterval="0.05"
										   changeEnd="threeStarSlider_Max_changeEndHandler(event)"
										   showDataTip="true"/>
							</s:FormItem>
							<s:FormItem label="2-stars:">
								<s:HSlider id="twoStarSlider_max"
										   minimum="{minimumSliderValue}"
										   maximum="{maximumSliderValue}"
										   snapInterval="0.05"
										   changeEnd="twoStarSlider_Max_changeEndHandler(event)"
										   showDataTip="true"/>
							</s:FormItem>
							<s:FormItem label="1-star :">
								<s:HSlider id="oneStarSlider_max"
										   minimum="{minimumSliderValue}"
										   maximum="{maximumSliderValue}"
										   snapInterval="0.05"
										   changeEnd="oneStarSlider_Max_changeEndHandler(event)"
										   showDataTip="true"/>
							</s:FormItem>
						</s:Form>
					</s:Group>
				</s:Group>
				
			</s:Group>
		</s:Group>
		
		<s:Group width="100%">
			<s:layout>
				<s:VerticalLayout paddingLeft="{KSketchStyles.DIALOG_PADDING_10}" horizontalAlign="right"/>
			</s:layout>
			<s:Button id="closeButton" label="Close" click="close()" height="{KSketchStyles.DIALOG_MEASUREMENT_25}"/>
		</s:Group>
	</s:Group>
	
</s:SkinnablePopUpContainer>
