<?xml version="1.0" encoding="utf-8"?>
<!--
*Copyright 2010-2012 Singapore Management University
*Developed under a grant from the Singapore-MIT GAMBIT Game Lab

*This Source Code Form is subject to the terms of the
*Mozilla Public License, v. 2.0. If a copy of the MPL was
*not distributed with this file, You can obtain one at
*http://mozilla.org/MPL/2.0/.
-->
<s:SkinnablePopUpContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
						   xmlns:s="library://ns.adobe.com/flex/spark" 
						   xmlns:buttons="sg.edu.smu.ksketch2.canvas.components.buttons.*"
						   backgroundAlpha="0" 
						   initialize="_initStyle()"
						   creationComplete="_initContent()">
	<fx:Script>
		<![CDATA[
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.events.ItemClickEvent;
			
			import spark.components.Application;
			
			import sg.edu.smu.ksketch2.KSketchGlobals;
			import sg.edu.smu.ksketch2.canvas.KSketch_CanvasView_Preferences;
			import sg.edu.smu.ksketch2.canvas.components.timebar.KSketch_TimeControl;
			import sg.edu.smu.ksketch2.canvas.components.view.KSketch_CanvasView;
			import sg.edu.smu.ksketch2.model.data_structures.KKeyFrame;
			import sg.edu.smu.ksketch2.operators.KSingleReferenceFrameOperator;
			
			private var GAP:Number = 20 * KSketchGlobals.SCALE;
			private var PADDINGLEFT:Number = 5 * KSketchGlobals.SCALE;
			private var PADDINGRIGHT:Number = 5 * KSketchGlobals.SCALE;
			private var PADDINGTOP:Number = 20 * KSketchGlobals.SCALE;
			private var PADDINGBOTTOM:Number = 20 * KSketchGlobals.SCALE;
			private var CONTENT_PADDING:Number = 10 * KSketchGlobals.SCALE;
			private var TIMELABEL_WIDTH:Number = 100 * KSketchGlobals.SCALE;
			private var TIMELABEL_HEIGHT:Number = 50 * KSketchGlobals.SCALE;
			
			private var _canvasView:KSketch_CanvasView;
			private var _menu:KSketch_PopUp_Menu;
			public var mode:int;
			
			//KSKETCH-SYNPHNE
			private var _oneStarAvg:Number;
			private var _twoStarAvg:Number;
			private var _threeStarAvg:Number;
			
			private var _oneStarMax:Number;
			private var _twoStarMax:Number;
			private var _threeStarMax:Number;
			
			[Bindable] private var timeValue:String = "02:00";
			[Bindable] private var maximumSliderValue:int = 10;
			[Bindable] private var minimumSliderValue:int = 0;
			
			private function _initStyle():void
			{
				this.removeEventListener(FlexEvent.INITIALIZE, _initStyle);
				
				header.setStyle("fontSize", KSketchGlobals.FONT_SIZE_26);
				menuLabel.setStyle("fontSize", KSketchGlobals.FONT_SIZE_18);
				autoInsertKey.setStyle("fontSize", KSketchGlobals.FONT_SIZE_14);
				doubleTap.setStyle("fontSize", KSketchGlobals.FONT_SIZE_14);
				autoLog.setStyle("fontSize", KSketchGlobals.FONT_SIZE_14);
				initLabel.setStyle("fontSize", KSketchGlobals.FONT_SIZE_18);
				tapAnywhere.setStyle("fontSize", KSketchGlobals.FONT_SIZE_14);
				tapObject.setStyle("fontSize", KSketchGlobals.FONT_SIZE_14);
				titleTime.setStyle("fontSize", KSketchGlobals.FONT_SIZE_18);
				activityDuration.setStyle("fontSize", KSketchGlobals.FONT_SIZE_14);
				titleAccuracyAvg.setStyle("fontSize", KSketchGlobals.FONT_SIZE_18);
				titleAccuracyMax.setStyle("fontSize", KSketchGlobals.FONT_SIZE_18);
				
				closeButton.init("Close");
				menuLeftButton.init("Left");
				menuRightButton.init("Right");
				closeButton.initSkin();
				menuLeftButton.initSkin();
				menuRightButton.initSkin();
			}
			
			public function init(canvasView:KSketch_CanvasView, menu:KSketch_PopUp_Menu):void
			{
				_canvasView = canvasView;
				_menu = menu;
				
				_menu.open(_canvasView);
				KSketch_CanvasView_Preferences.menuOpen = KSketch_CanvasView_Preferences.OPEN;
			}
			
			override public function open(owner:DisplayObjectContainer, modal:Boolean=false):void
			{
				super.open(owner, modal);
				
				/*switch(KSketch_CanvasView_Preferences.menuOpen)
				{
					case KSketch_CanvasView_Preferences.OPEN:
						menuOpen.selected = false;
						break;
					default:
						menuOpen.selected = true;
				}*/
				
				switch(KSketch_CanvasView_Preferences.autoInsert)
				{
					case KSketch_CanvasView_Preferences.AUTO:
						autoInsertKey.selected = true;
						break;
					default:
						autoInsertKey.selected = false;
				}
				
				switch(KSketch_CanvasView_Preferences.doubleTap)
				{
					case KSketch_CanvasView_Preferences.DOUBLETAP_ON:
						doubleTap.selected = true;
						break;
					default:
						doubleTap.selected = false;
				}
			}
			
			public function applyPreferences():void
			{
				_menuOpen(true); 
				
				switch(KSketch_CanvasView_Preferences.timebarPosition)
				{
					case KSketch_CanvasView_Preferences.POS_TOP:
						_timebarTop();
						break;
					default:
						_timebarBottom();
				}
				
				switch(KSketch_CanvasView_Preferences.menuPosition)
				{
					case KSketch_CanvasView_Preferences.POS_LEFT:
						_menuLeft();
						break;
					case KSketch_CanvasView_Preferences.POS_RIGHT:
						_menuRight();
						break;
					case KSketch_CanvasView_Preferences.POS_BOTTOM:
						_menuBottom();
						break;
					case KSketch_CanvasView_Preferences.POS_TOP:
					default:
						_menuTop();
				}
				
				switch(KSketch_CanvasView_Preferences.autoInsert)
				{
					case KSketch_CanvasView_Preferences.AUTO:
						autoInsertKey.selected = true;
						_autoInsertKey(true);
						break;
					default:
						autoInsertKey.selected = false;
						_autoInsertKey(false);
				}
				
				switch(KSketch_CanvasView_Preferences.doubleTap)
				{
					case KSketch_CanvasView_Preferences.DOUBLETAP_ON:
						doubleTap.selected = true;
						_doubleTap(true);
						break;
					default:
						doubleTap.selected = false;
						_doubleTap(false);
				}
				
				switch(KSketch_CanvasView_Preferences.autoLog)
				{
					case KSketch_CanvasView_Preferences.AUTOLOG_ON:
						autoLog.selected = true;
						_autoLog(true);
						break;
					default:
						autoLog.selected = false;
						_autoLog(false);
				}
				
				if(KSketch_CanvasView.isSynphne)
					_menuLeft();
			}
			
			private function _timebarPos1():void
			{
				_timebarBottom();
				_menuTop();
			}
			
			private function _timebarPos2():void
			{
				_timebarTop();
				_menuBottom();
			}
			
			private function _timebarTop():void
			{
				if(_canvasView.mainCanvas.getElementIndex(_canvasView.timebar_group) <= _canvasView.mainCanvas.getElementIndex(_canvasView.canvas_component))
					return;

				_canvasView.mainCanvas.swapElements(_canvasView.timebar_group, _canvasView.canvas_component);
				KSketch_CanvasView_Preferences.timebarPosition = KSketch_CanvasView_Preferences.POS_TOP;
				_canvasView.timeControl.position = KSketch_TimeControl.BAR_TOP;
				_menu.dispatchEvent(new FlexEvent(FlexEvent.UPDATE_COMPLETE));
			}
			
			private function _timebarBottom():void
			{
				if(_canvasView.mainCanvas.getElementIndex(_canvasView.timebar_group) >= _canvasView.mainCanvas.getElementIndex(_canvasView.canvas_component))
					return;
				
				_canvasView.mainCanvas.swapElements(_canvasView.timebar_group, _canvasView.canvas_component);
				KSketch_CanvasView_Preferences.timebarPosition = KSketch_CanvasView_Preferences.POS_BOTTOM;
				_canvasView.timeControl.position = KSketch_TimeControl.BAR_BOTTOM;
				_menu.dispatchEvent(new FlexEvent(FlexEvent.UPDATE_COMPLETE));
			}
			
			private function _menuTop():void
			{
				_menu.position = KSketch_PopUp_Menu.UP;
				KSketch_CanvasView_Preferences.menuPosition = KSketch_CanvasView_Preferences.POS_TOP;
			}
			
			private function _menuLeft():void
			{
				_menu.position = KSketch_PopUp_Menu.LEFT;
				KSketch_CanvasView_Preferences.menuPosition = KSketch_CanvasView_Preferences.POS_LEFT;
			}
			
			private function _menuRight():void
			{
				_menu.position = KSketch_PopUp_Menu.RIGHT;
				KSketch_CanvasView_Preferences.menuPosition = KSketch_CanvasView_Preferences.POS_RIGHT;
			}
			
			private function _menuBottom():void
			{
				_menu.position = KSketch_PopUp_Menu.DOWN;
				KSketch_CanvasView_Preferences.menuPosition = KSketch_CanvasView_Preferences.POS_BOTTOM;
			}
			
			private function _menuOpen(value:Boolean):void
			{
				if(value)
				{
					_menu.open(_canvasView);
					KSketch_CanvasView_Preferences.menuOpen = KSketch_CanvasView_Preferences.OPEN;
				}
				else
					KSketch_CanvasView_Preferences.menuOpen = KSketch_CanvasView_Preferences.CLOSE;
			}
			
			private function _autoInsertKey(value:Boolean):void
			{
				if(value)
				{
					_setStudy(0);
					KSketch_CanvasView_Preferences.autoInsert = KSketch_CanvasView_Preferences.AUTO;
				}
				else
				{
					_setStudy(1);
					KSketch_CanvasView_Preferences.autoInsert = KSketch_CanvasView_Preferences.NOT_AUTO;
				}
			}
			
			private function _doubleTap(value:Boolean):void
			{
				if(value)
				{
					_menu.turnOnDoubleTapAction(true);
					KSketch_CanvasView_Preferences.doubleTap = KSketch_CanvasView_Preferences.DOUBLETAP_ON;
				}
				else
				{
					_menu.turnOnDoubleTapAction(false);
					KSketch_CanvasView_Preferences.doubleTap = KSketch_CanvasView_Preferences.DOUBLETAP_OFF;
				}
			}
			
			private function _autoLog(value:Boolean):void
			{
				if(value)
				{
					_canvasView.enableLog = true;
					KSketch_CanvasView_Preferences.autoLog = KSketch_CanvasView_Preferences.AUTOLOG_ON;
				}
				else
				{
					_canvasView.enableLog = false;
					KSketch_CanvasView_Preferences.autoLog = KSketch_CanvasView_Preferences.AUTOLOG_OFF;
				}
			}
			
			private function _setStudy(value:int):void
			{
				KSingleReferenceFrameOperator.mode = value;
				KSketch_Timebar_Context_Double.mode = value;
				KKeyFrame.mode = value;
				mode = value;
			}
			
			override public function close(commit:Boolean=false, data:*=null):void
			{
				super.close(commit, data);
				(FlexGlobals.topLevelApplication as Application).setFocus();
			}
			
			//KSKETCH-SYNPHNE
			private function _initContent():void
			{
				if(KSketch_CanvasView.isSynphne)
				{
					optionContainer.removeElementAt(2);
				}
				else
					optionContainer.removeElementAt(3);
			}
			
			private function _tapAnywhere():void
			{
				tapAnywhere.selected = true;
				KSketch_CanvasView_Preferences.tapAnywhere = KSketch_CanvasView_Preferences.TAPANYWHERE_ON;
			}
			
			private function _initiation(event:ItemClickEvent):void
			{
				if (event.currentTarget.selectedValue == "anywhere") {
					KSketch_CanvasView_Preferences.tapAnywhere = KSketch_CanvasView_Preferences.TAPANYWHERE_ON;
				} else {
					KSketch_CanvasView_Preferences.tapAnywhere = KSketch_CanvasView_Preferences.TAPANYWHERE_OFF;
				}
			}
			
			private function _duration(event:Event):void
			{
				var tempArray:Array=activityDuration.text.split(":");
				var durationInSec:int = 120;
				if(tempArray.length == 1)
					durationInSec = int(tempArray[0])*60;
				else if(tempArray.length == 2)
					durationInSec = int(tempArray[0])*60 + int(tempArray[1]);
				KSketch_CanvasView_Preferences.duration = durationInSec;
			}
			
			protected function oneStarSlider_Avg_changeEndHandler(event:FlexEvent):void
			{
				var changedValue:Number = (event.currentTarget as HSlider).value;
				_oneStarAvg = changedValue;
			}
			
			protected function twoStarSlider_Avg_changeEndHandler(event:FlexEvent):void
			{
				var changedValue:Number = (event.currentTarget as HSlider).value;
				_twoStarAvg = changedValue;
			}
			
			protected function threeStarSlider_Avg_changeEndHandler(event:FlexEvent):void
			{
				var changedValue:Number = (event.currentTarget as HSlider).value;
				_threeStarAvg = changedValue;
			}
			
			protected function oneStarSlider_Max_changeEndHandler(event:FlexEvent):void
			{
				var changedValue:Number = (event.currentTarget as HSlider).value;
				_oneStarMax = changedValue;
			}
			
			protected function twoStarSlider_Max_changeEndHandler(event:FlexEvent):void
			{
				var changedValue:Number = (event.currentTarget as HSlider).value;
				_twoStarMax = changedValue;
			}
			
			protected function threeStarSlider_Max_changeEndHandler(event:FlexEvent):void
			{
				var changedValue:Number = (event.currentTarget as HSlider).value;
				_threeStarMax = changedValue;
			}
			
			public function get starValueArr():Array
			{
				if(isNaN(_oneStarAvg))
					_oneStarAvg = 5;
				if(isNaN(_twoStarAvg))
					_twoStarAvg = 3;
				if(isNaN(_threeStarAvg))
					_threeStarAvg = 1;
				
				if(isNaN(_oneStarMax))
					_oneStarMax = 5;
				if(isNaN(_twoStarMax))
					_twoStarMax = 3;
				if(isNaN(_threeStarMax))
					_threeStarMax = 1;
				
				var arr:Array = [_oneStarAvg, _twoStarAvg, _threeStarAvg, _oneStarMax, _twoStarMax, _threeStarMax];
				return arr;
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:RadioButtonGroup id="initiationGroup" itemClick="_initiation(event);"/>
	</fx:Declarations>
	<s:filters>
		<s:DropShadowFilter 
			color="{KSketchGlobals.COLOR_BLACK}" angle="{KSketchGlobals.ANGLE_50}"
			alpha="{KSketchGlobals.ALPHA_06}"
			strength="{KSketchGlobals.RECT_STRENGTH}"
			blurX="{KSketchGlobals.RECT_BLURX}"
			blurY="{KSketchGlobals.RECT_BLURY}"/>
	</s:filters>
	<s:Rect width="100%" height="100%" radiusX="{KSketchGlobals.RECT_RADIUSX}" radiusY="{KSketchGlobals.RECT_RADIUSY}">
		<s:fill>
			<s:SolidColor color="{KSketchGlobals.COLOR_GREY_MEDIUM}"/>
		</s:fill>
	</s:Rect>
	<s:Group id="optionContainer">
		<s:layout>
			<s:VerticalLayout gap="{GAP}" paddingLeft="{PADDINGLEFT}" 
							  paddingRight="{PADDINGRIGHT}" paddingTop="{PADDINGTOP}" 
							  paddingBottom="{PADDINGBOTTOM}" verticalAlign="middle" horizontalAlign="left"/>
		</s:layout>
		<s:Label id="header" text="Options"/>
		
		<s:Group>
			<s:layout>
				<s:VerticalLayout paddingLeft="{CONTENT_PADDING}"/>
			</s:layout>
			<s:Label id="menuLabel" text="Menu position"/>
			<s:Group>
				<s:layout>
					<s:HorizontalLayout/>
				</s:layout>
				<buttons:KSketch_DialogButton id="menuLeftButton" click="_menuLeft()"/>
				<buttons:KSketch_DialogButton id="menuRightButton" click="_menuRight()"/>
			</s:Group>
		</s:Group>
		
		<s:Group id="optionItems">
			<s:Group>
				<s:layout>
					<s:HorizontalLayout paddingLeft="{CONTENT_PADDING}" 
										paddingRight="{CONTENT_PADDING}" 
										verticalAlign="middle"/>
				</s:layout>
				<s:CheckBox id="autoInsertKey" label="Insert key frames automatically" click="_autoInsertKey(autoInsertKey.selected)"/>
			</s:Group>
			
			<s:Group>
				<s:layout>
					<s:HorizontalLayout paddingLeft="{CONTENT_PADDING}" 
										paddingRight="{CONTENT_PADDING}" 
										verticalAlign="middle"/>
				</s:layout>
				<s:CheckBox id="doubleTap" label="Double-tap left/right for undo/redo" click="_doubleTap(doubleTap.selected)"/>
			</s:Group>
			
			<s:Group>
				<s:layout>
					<s:HorizontalLayout paddingLeft="{CONTENT_PADDING}" 
										paddingRight="{CONTENT_PADDING}" 
										verticalAlign="middle"/>
				</s:layout>
				<s:CheckBox id="autoLog" label="Enable Log" click="_autoLog(autoLog.selected)"/>
			</s:Group>
		</s:Group>
		
		<s:Group id="synphneItems">
			<s:layout>
				<s:VerticalLayout/>
			</s:layout>
			<s:Group id="initGroup">
				<s:layout>
					<s:VerticalLayout paddingLeft="{CONTENT_PADDING}"/>
				</s:layout>
				<s:Label id="initLabel" text="Initiation"/>
				<s:Group>
					<s:layout>
						<s:VerticalLayout/>
					</s:layout>
					
					<s:Group>
						<s:layout>
							<s:HorizontalLayout/>
						</s:layout>
						<s:RadioButton groupName="initiationGroup" id="tapAnywhere" value="anywhere" label="Tap Anywhere"/>
						<s:RadioButton groupName="initiationGroup" id="tapObject" value="object" label="Tap Object"/>
					</s:Group>
				</s:Group>
			</s:Group>
			
			<s:Group id="diffGroup">
				<s:layout>
					<s:VerticalLayout paddingLeft="{CONTENT_PADDING}"/>
				</s:layout>
				<s:Group>
					<s:layout>
						<s:VerticalLayout/>
					</s:layout>
					
					<s:Group>
						<s:layout>
							<s:HorizontalLayout verticalAlign="middle"/>
						</s:layout>
						<s:Label id="titleTime" text="Time Threshold (MM:SS)"/>
						<s:TextInput id="activityDuration" text="{timeValue}" 
									 height="{TIMELABEL_HEIGHT}" 
									 width="{TIMELABEL_WIDTH}" change="_duration(event)"/>
					</s:Group>
					
					<s:Group>
						<s:layout>
							<s:VerticalLayout/>
						</s:layout>
						<s:Label id="titleAccuracyAvg" text="Accuracy Threshold - Average Distance"/>
						<s:Group>
							<s:Form>
								<s:FormItem label="3-stars:">
									<s:HSlider id="threeStarSlider_avg"
											   minimum="{minimumSliderValue}"
											   maximum="{maximumSliderValue}"
											   snapInterval="0.05"
											   changeEnd="threeStarSlider_Avg_changeEndHandler(event)"
											   showDataTip="true"/>
								</s:FormItem>
								<s:FormItem label="2-stars:">
									<s:HSlider id="twoStarSlider_avg"
											   minimum="{minimumSliderValue}"
											   maximum="{maximumSliderValue}"
											   snapInterval="0.05"
											   changeEnd="twoStarSlider_Avg_changeEndHandler(event)"
											   showDataTip="true"/>
								</s:FormItem>
								<s:FormItem label="1-star :">
									<s:HSlider id="oneStarSlider_avg"
											   minimum="{minimumSliderValue}"
											   maximum="{maximumSliderValue}"
											   snapInterval="0.05"
											   changeEnd="oneStarSlider_Avg_changeEndHandler(event)"
											   showDataTip="true"/>
								</s:FormItem>
							</s:Form>
						</s:Group>
					</s:Group>
					
					<s:Group>
						<s:layout>
							<s:VerticalLayout/>
						</s:layout>
						<s:Label id="titleAccuracyMax" text="Accuracy Threshold - Maximum Distance"/>
						<s:Group>
							<s:Form>
								<s:FormItem label="3-stars:">
									<s:HSlider id="threeStarSlider_max"
											   minimum="{minimumSliderValue}"
											   maximum="{maximumSliderValue}"
											   snapInterval="0.05"
											   changeEnd="threeStarSlider_Max_changeEndHandler(event)"
											   showDataTip="true"/>
								</s:FormItem>
								<s:FormItem label="2-stars:">
									<s:HSlider id="twoStarSlider_max"
											   minimum="{minimumSliderValue}"
											   maximum="{maximumSliderValue}"
											   snapInterval="0.05"
											   changeEnd="twoStarSlider_Max_changeEndHandler(event)"
											   showDataTip="true"/>
								</s:FormItem>
								<s:FormItem label="1-star :">
									<s:HSlider id="oneStarSlider_max"
											   minimum="{minimumSliderValue}"
											   maximum="{maximumSliderValue}"
											   snapInterval="0.05"
											   changeEnd="oneStarSlider_Max_changeEndHandler(event)"
											   showDataTip="true"/>
								</s:FormItem>
							</s:Form>
						</s:Group>
					</s:Group>
					
				</s:Group>
			</s:Group>
		</s:Group>
		
		<s:Group width="100%">
			<s:layout>
				<s:VerticalLayout paddingLeft="{CONTENT_PADDING}" horizontalAlign="right"/>
			</s:layout>
			<buttons:KSketch_DialogButton id="closeButton" click="close()"/>
		</s:Group>
	</s:Group>
</s:SkinnablePopUpContainer>
