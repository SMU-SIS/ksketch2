<?xml version="1.0" encoding="utf-8"?>
<!--
*Copyright 2010-2012 Singapore Management University
*Developed under a grant from the Singapore-MIT GAMBIT Game Lab

*This Source Code Form is subject to the terms of the
*Mozilla Public License, v. 2.0. If a copy of the MPL was
*not distributed with this file, You can obtain one at
*http://mozilla.org/MPL/2.0/.
-->
<s:SkinnablePopUpContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
						   xmlns:s="library://ns.adobe.com/flex/spark" backgroundAlpha="0" initialize="initStyle()">
	<fx:Script>
		<![CDATA[
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			
			import spark.components.Application;
			
			import sg.edu.smu.ksketch2.KSketchStyles;
			import sg.edu.smu.ksketch2.canvas.KSketch_CanvasView_Preferences;
			import sg.edu.smu.ksketch2.canvas.components.timebar.KSketch_TimeControl;
			import sg.edu.smu.ksketch2.canvas.components.view.KSketch_CanvasView;
			import sg.edu.smu.ksketch2.model.data_structures.KKeyFrame;
			import sg.edu.smu.ksketch2.operators.KSingleReferenceFrameOperator;
			
			private var _canvasView:KSketch_CanvasView;
			private var _menu:KSketch_PopUp_Menu;
			public var mode:int;
			
			private function initStyle():void
			{
				this.removeEventListener(FlexEvent.INITIALIZE, initStyle);
				header.setStyle("fontSize", KSketchStyles.FONT_SIZE_26);
				autoInsertKey.setStyle("fontSize", KSketchStyles.FONT_SIZE_18);
				doubleTap.setStyle("fontSize", KSketchStyles.FONT_SIZE_18);
				autoLog.setStyle("fontSize", KSketchStyles.FONT_SIZE_18);
				closeButton.setStyle("fontSize", KSketchStyles.FONT_SIZE_14);
			}
			
			public function init(canvasView:KSketch_CanvasView, menu:KSketch_PopUp_Menu):void
			{
				_canvasView = canvasView;
				_menu = menu;
				
				_menu.open(_canvasView);
				KSketch_CanvasView_Preferences.menuOpen = KSketch_CanvasView_Preferences.OPEN;
			}
			
			override public function open(owner:DisplayObjectContainer, modal:Boolean=false):void
			{
				super.open(owner, modal);
				
				/*switch(KSketch_CanvasView_Preferences.menuOpen)
				{
					case KSketch_CanvasView_Preferences.OPEN:
						menuOpen.selected = false;
						break;
					default:
						menuOpen.selected = true;
				}*/
				
				switch(KSketch_CanvasView_Preferences.autoInsert)
				{
					case KSketch_CanvasView_Preferences.AUTO:
						autoInsertKey.selected = true;
						break;
					default:
						autoInsertKey.selected = false;
				}
				
				switch(KSketch_CanvasView_Preferences.doubleTap)
				{
					case KSketch_CanvasView_Preferences.DOUBLETAP_ON:
						doubleTap.selected = true;
						break;
					default:
						doubleTap.selected = false;
				}
			}
			
			public function applyPreferences():void
			{
				switch(KSketch_CanvasView_Preferences.timebarPosition)
				{
					case KSketch_CanvasView_Preferences.POS_TOP:
						_timebarTop();
						break;
					default:
						_timebarBottom();
				}
				
				/*switch(KSketch_CanvasView_Preferences.menuOpen)
				{
					case KSketch_CanvasView_Preferences.OPEN:
						menuOpen.selected = false;
						_menuOpen(false);
						break;
					default:
						menuOpen.selected = true;
						_menuOpen(true);
				}*/

				switch(KSketch_CanvasView_Preferences.menuPosition)
				{
					case KSketch_CanvasView_Preferences.POS_LEFT:
						_menuLeft();
						break;
					case KSketch_CanvasView_Preferences.POS_RIGHT:
						_menuRight();
						break;
					case KSketch_CanvasView_Preferences.POS_BOTTOM:
						_menuBottom();
						break;
					case KSketch_CanvasView_Preferences.POS_TOP:
					default:
						_menuTop();
				}
				
				switch(KSketch_CanvasView_Preferences.autoInsert)
				{
					case KSketch_CanvasView_Preferences.AUTO:
						autoInsertKey.selected = true;
						_autoInsertKey(true);
						break;
					default:
						autoInsertKey.selected = false;
						_autoInsertKey(false);
				}
				
				switch(KSketch_CanvasView_Preferences.doubleTap)
				{
					case KSketch_CanvasView_Preferences.DOUBLETAP_ON:
						doubleTap.selected = true;
						_doubleTap(true);
						break;
					default:
						doubleTap.selected = false;
						_doubleTap(false);
				}
				
				switch(KSketch_CanvasView_Preferences.autoLog)
				{
					case KSketch_CanvasView_Preferences.AUTOLOG_ON:
						autoLog.selected = true;
						_autoLog(true);
						break;
					default:
						autoLog.selected = false;
						_autoLog(false);
				}
			}
			
			private function _timebarPos1():void
			{
				_timebarBottom();
				_menuTop();
			}
			
			private function _timebarPos2():void
			{
				_timebarTop();
				_menuBottom();
			}
			
			private function _timebarTop():void
			{
				if(_canvasView.mainCanvas.getElementIndex(_canvasView.timebar_group) <= _canvasView.mainCanvas.getElementIndex(_canvasView.canvas_component))
					return;

				_canvasView.mainCanvas.swapElements(_canvasView.timebar_group, _canvasView.canvas_component);
				KSketch_CanvasView_Preferences.timebarPosition = KSketch_CanvasView_Preferences.POS_TOP;
				_canvasView.timeControl.position = KSketch_TimeControl.BAR_TOP;
				_menu.dispatchEvent(new FlexEvent(FlexEvent.UPDATE_COMPLETE));
			}
			
			private function _timebarBottom():void
			{
				if(_canvasView.mainCanvas.getElementIndex(_canvasView.timebar_group) >= _canvasView.mainCanvas.getElementIndex(_canvasView.canvas_component))
					return;
				
				_canvasView.mainCanvas.swapElements(_canvasView.timebar_group, _canvasView.canvas_component);
				KSketch_CanvasView_Preferences.timebarPosition = KSketch_CanvasView_Preferences.POS_BOTTOM;
				_canvasView.timeControl.position = KSketch_TimeControl.BAR_BOTTOM;
				_menu.dispatchEvent(new FlexEvent(FlexEvent.UPDATE_COMPLETE));
			}
			
			private function _menuTop():void
			{
				_menu.position = KSketch_PopUp_Menu.UP;
				KSketch_CanvasView_Preferences.menuPosition = KSketch_CanvasView_Preferences.POS_TOP;
			}
			
			private function _menuLeft():void
			{
				_menu.position = KSketch_PopUp_Menu.LEFT;
				KSketch_CanvasView_Preferences.menuPosition = KSketch_CanvasView_Preferences.POS_LEFT;
			}
			
			private function _menuRight():void
			{
				_menu.position = KSketch_PopUp_Menu.RIGHT;
				KSketch_CanvasView_Preferences.menuPosition = KSketch_CanvasView_Preferences.POS_RIGHT;
			}
			
			private function _menuBottom():void
			{
				_menu.position = KSketch_PopUp_Menu.DOWN;
				KSketch_CanvasView_Preferences.menuPosition = KSketch_CanvasView_Preferences.POS_BOTTOM;
			}
			
			private function _menuOpen(value:Boolean):void
			{
				if(value)
				{
					_menu.open(_canvasView);
					KSketch_CanvasView_Preferences.menuOpen = KSketch_CanvasView_Preferences.OPEN;
				}
				else
					KSketch_CanvasView_Preferences.menuOpen = KSketch_CanvasView_Preferences.CLOSE;
			}
			
			private function _autoInsertKey(value:Boolean):void
			{
				if(value)
				{
					_setStudy(0);
					KSketch_CanvasView_Preferences.autoInsert = KSketch_CanvasView_Preferences.AUTO;
				}
				else
				{
					_setStudy(1);
					KSketch_CanvasView_Preferences.autoInsert = KSketch_CanvasView_Preferences.NOT_AUTO;
				}
			}
			
			private function _doubleTap(value:Boolean):void
			{
				if(value)
				{
					_menu.turnOnDoubleTapAction(true);
					KSketch_CanvasView_Preferences.doubleTap = KSketch_CanvasView_Preferences.DOUBLETAP_ON;
				}
				else
				{
					_menu.turnOnDoubleTapAction(false);
					KSketch_CanvasView_Preferences.doubleTap = KSketch_CanvasView_Preferences.DOUBLETAP_OFF;
				}
			}
			
			private function _autoLog(value:Boolean):void
			{
				if(value)
				{
					_canvasView.enableLog = true;
					KSketch_CanvasView_Preferences.autoLog = KSketch_CanvasView_Preferences.AUTOLOG_ON;
				}
				else
				{
					_canvasView.enableLog = false;
					KSketch_CanvasView_Preferences.autoLog = KSketch_CanvasView_Preferences.AUTOLOG_OFF;
				}
			}
			
			private function _setStudy(value:int):void
			{
				KSingleReferenceFrameOperator.mode = value;
				KSketch_Timebar_Context_Double.mode = value;
				KKeyFrame.mode = value;
				mode = value;
			}
			
			override public function close(commit:Boolean=false, data:*=null):void
			{
				super.close(commit, data);
				(FlexGlobals.topLevelApplication as Application).setFocus();
			}
		]]>
	</fx:Script>
	<s:filters>
		<s:DropShadowFilter 
			color="{KSketchStyles.COLOR_BLACK}" angle="{KSketchStyles.ANGLE_50}"
			alpha="{KSketchStyles.ALPHA_06}"
			strength="{KSketchStyles.NUMBER_01}"
			blurX="{KSketchStyles.NUMBER_12}"
			blurY="{KSketchStyles.NUMBER_12}"/>
	</s:filters>
	<s:Rect width="100%" height="100%" radiusX="{KSketchStyles.NUMBER_05}" radiusY="{KSketchStyles.NUMBER_05}">
		<s:fill>
			<s:SolidColor color="{KSketchStyles.COLOR_GREY_MEDIUM}"/>
		</s:fill>
	</s:Rect>
	<s:Group>
		<s:layout>
			<s:VerticalLayout gap="{KSketchStyles.NUMBER_20}" paddingLeft="{KSketchStyles.NUMBER_05}" paddingRight="{KSketchStyles.NUMBER_05}" paddingTop="{KSketchStyles.NUMBER_20}" paddingBottom="{KSketchStyles.NUMBER_20}" verticalAlign="middle" horizontalAlign="center"/>
		</s:layout>
		<s:Label id="header" text="Options"/>
		
		<!-- disable option for release
		<s:Group>
			<s:layout>
				<s:VerticalLayout paddingLeft="10"/>
			</s:layout>
			<s:Label text="Timebar position" fontSize="18"/>
			<s:Group>
				<s:layout>
					<s:VerticalLayout/>
				</s:layout>
				<s:RadioButton label="Toolbar top and Timebar bottom" click="_timebarPos1()" fontSize="14"/>
				<s:RadioButton label="Toolbar bottom and Timebar top" click="_timebarPos2()" fontSize="14"/>
			</s:Group>
		</s:Group>
		
		<s:Group>
			<s:layout>
				<s:VerticalLayout paddingLeft="10"/>
			</s:layout>
			<s:Label text="Timebar position" fontSize="18"/>
			<s:Group>
				<s:layout>
					<s:HorizontalLayout/>
				</s:layout>
				<s:Button label="Top" click="_timebarTop()" fontSize="14"/>
				<s:Button label="Bottom" click="_timebarBottom()" fontSize="14"/>
			</s:Group>
		</s:Group>
		
		<s:Group>
			<s:layout>
				<s:VerticalLayout paddingLeft="10"/>
			</s:layout>
			<s:Label text="Menu position" fontSize="18"/>
			<s:Group>
				<s:layout>
					<s:HorizontalLayout/>
				</s:layout>
				<s:Button label="Top" click="_menuTop()" fontSize="14"/>
				<s:Button label="Bottom" click="_menuBottom()" fontSize="14"/>
				<s:Button label="Left" click="_menuLeft()" fontSize="14"/>
				<s:Button label="Right" click="_menuRight()" fontSize="14"/>
			</s:Group>
		</s:Group>
		
		<s:Group>
			<s:layout>
				<s:VerticalLayout paddingLeft="10"/>
			</s:layout>
			<s:Label text="Study Mode" fontSize="18"/>
			<s:Group>
				<s:layout>
					<s:HorizontalLayout/>
				</s:layout>
				<s:RadioButton label="K" click="_setStudy(0)" fontSize="14"/>
				<s:RadioButton label="P" click="_setStudy(1)" fontSize="14"/>
				<s:RadioButton label="KP" click="_setStudy(2)" fontSize="14"/>
				<s:RadioButton label="KP2" click="_setStudy(3)" fontSize="14"/>
			</s:Group>
		</s:Group>
		
		<s:Group>
			<s:layout>
				<s:HorizontalLayout paddingLeft="10" verticalAlign="middle"/>
			</s:layout>
			<s:CheckBox label="Menu Auto Open" id="menuOpen" click="_menuOpen(menuOpen.selected)" fontSize="14"/>
		</s:Group>
		-->
		<s:Group>
			<s:layout>
				<s:HorizontalLayout paddingLeft="{KSketchStyles.NUMBER_10}" paddingRight="{KSketchStyles.NUMBER_15}" verticalAlign="middle"/>
			</s:layout>
			<s:CheckBox id="autoInsertKey" label="Insert key frames automatically" click="_autoInsertKey(autoInsertKey.selected)"/>
		</s:Group>
		
		<s:Group>
			<s:layout>
				<s:HorizontalLayout paddingLeft="{KSketchStyles.NUMBER_10}" paddingRight="{KSketchStyles.NUMBER_15}" verticalAlign="middle"/>
			</s:layout>
			<s:CheckBox id="doubleTap" label="Double-tap left/right for undo/redo" click="_doubleTap(doubleTap.selected)"/>
		</s:Group>
		
		<s:Group>
			<s:layout>
				<s:HorizontalLayout paddingLeft="{KSketchStyles.NUMBER_10}" paddingRight="{KSketchStyles.NUMBER_15}" verticalAlign="middle"/>
			</s:layout>
			<s:CheckBox id="autoLog" label="Enable Log" click="_autoLog(autoLog.selected)"/>
		</s:Group>
		
		<s:Group width="100%">
			<s:layout>
				<s:VerticalLayout paddingLeft="{KSketchStyles.NUMBER_10}" horizontalAlign="right"/>
			</s:layout>
			<s:Button id="closeButton" label="Close" click="close()" height="{KSketchStyles.NUMBER_50}"/>
		</s:Group>
	</s:Group>
</s:SkinnablePopUpContainer>
