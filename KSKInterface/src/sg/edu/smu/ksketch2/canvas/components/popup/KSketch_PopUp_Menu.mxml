<?xml version="1.0" encoding="utf-8"?>
<!--
*Copyright 2010-2012 Singapore Management University
*Developed under a grant from the Singapore-MIT GAMBIT Game Lab

*This Source Code Form is subject to the terms of the
*Mozilla Public License, v. 2.0. If a copy of the MPL was
*not distributed with this file, You can obtain one at
*http://mozilla.org/MPL/2.0/.
-->
<s:SkinnablePopUpContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
						   xmlns:s="library://ns.adobe.com/flex/spark"
						   backgroundAlpha="0"
						   creationComplete="_initButtons()"
						   updateComplete="updateMenuDisplay()"
						   xmlns:buttons="sg.edu.smu.ksketch2.canvas.components.buttons.*">
	<fx:Script>
		<![CDATA[
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import sg.edu.smu.ksketch2.KSketch2;
			import sg.edu.smu.ksketch2.KSketchAssets;
			import sg.edu.smu.ksketch2.KSketchStyles;
			import sg.edu.smu.ksketch2.canvas.components.view.KSketch_CanvasView;
			import sg.edu.smu.ksketch2.canvas.controls.KInteractionControl;
			import sg.edu.smu.ksketch2.canvas.controls.interactors.KCanvasInteractorManager;
			import sg.edu.smu.ksketch2.canvas.controls.interactors.KMultiTouchDrawInteractor;
			import sg.edu.smu.ksketch2.canvas.controls.interactors.draw.KDrawInteractor;
			import sg.edu.smu.ksketch2.utils.GoogleAnalytics;
			
			public static const ORIGIN:Point = new Point();
			public static const LEFT:int = 0;
			public static const RIGHT:int = 1;
			public static const UP:int = 2;
			public static const DOWN:int = 3;
			
			//Positioning variables
			private var _referenceComponent:UIComponent;
			private var _canvasOrigin:Point = new Point();
			private var _position:int;
			
			private var dataSource:IDataInput;
			
			//Current pen button that has been toggled
			private var _selectedButton:KSketch_Toggle_Button;
			
			private var _canvasView:KSketch_CanvasView;
			private var _options:KSketch_Options;
			private var _saveOptions:KSketch_SaveOptions;
			private var _feedback:KSketch_Feedback_Message;
			
			private var _KSketch:KSketch2;
			private var _interactionControl:KInteractionControl;
			private var _canvasControl:KCanvasInteractorManager;
			private var _googleAnalytics:GoogleAnalytics;
			
			/**
			 * @referenceComponent: the component that this menu will refer to for positioning itself
			 * @canvasView: the host view
			 * @optionsPanel: an initialised KSketch_Options (this has to be done in the canvas first because of the timebar)
			 * @ksketchInstance: The canvas's ksketch instance
			 */
			public function init(referenceComponent:UIComponent,
								 canvasView:KSketch_CanvasView, optionsPanel:KSketch_Options,
								 savePanel:KSketch_SaveOptions, KSketchInstance:KSketch2, 
								 interactionControl:KInteractionControl, canvasControl:KCanvasInteractorManager,
								 feedback:KSketch_Feedback_Message,googleAnalytics:GoogleAnalytics):void
			{
				_referenceComponent = referenceComponent;
				_canvasOrigin = referenceComponent.localToGlobal(_canvasOrigin);
				_position = 1;
				
				_canvasView = canvasView;
				_KSketch = KSketchInstance;
				_interactionControl = interactionControl;
				_canvasControl = canvasControl;
				_options = optionsPanel;
				_feedback = feedback;
				_googleAnalytics = googleAnalytics;
				
				if(savePanel)
					_saveOptions = savePanel;
			}
			
			public function _initButtons():void
			{
				undoButton.init(KSketchAssets.texture_undo, KSketchAssets.texture_undo_down);
				undoButton.initSkin();
				redoButton.init(KSketchAssets.texture_redo, KSketchAssets.texture_redo_down);
				redoButton.initSkin();
				optionButton.init(KSketchAssets.texture_options, KSketchAssets.texture_options_down);
				optionButton.initSkin();
				//imageButton.init(KSketchAssets.texture_images, KSketchAssets.texture_images_down);
				//imageButton.initSkin();
				
				if(_saveOptions)
				{
					newButton.visible = true;
					newButton.init(KSketchAssets.texture_new, KSketchAssets.texture_new_down);
					newButton.initSkin();
					
					exitButton.visible = true;
					exitButton.init(KSketchAssets.texture_prevScreen, KSketchAssets.texture_prevScreen_down);
					exitButton.initSkin();
				}
				
				eraserToggle.init(KSketchAssets.texture_eraser, KSketchAssets.texture_eraser_down);
				eraserToggle.initSkin();
				blackToggle.init(KSketchAssets.texture_blackPen, KSketchAssets.texture_blackPen_down);
				blackToggle.initSkin();
				redToggle.init(KSketchAssets.texture_redPen, KSketchAssets.texture_redPen_down);
				redToggle.initSkin();
				blueToggle.init(KSketchAssets.texture_bluePen, KSketchAssets.texture_bluePen_down);
				blueToggle.initSkin();
				greenToggle.init(KSketchAssets.texture_greenPen, KSketchAssets.texture_greenPen_down);
				greenToggle.initSkin();
				lassoToggle.init(KSketchAssets.texture_lasso, KSketchAssets.texture_lasso_down);
				lassoToggle.initSkin();
				
				_setPen(blackToggle);
			}
			
			public function set position(value:int):void
			{
				_position = value;
				switch(_position)
				{
					case UP:
					case DOWN:
						buttonLayout.requestedColumnCount = -1;
						buttonLayout.requestedRowCount = 1;
						break;
					case LEFT:
					case RIGHT:
					default:
						buttonLayout.requestedColumnCount = 1;
						buttonLayout.requestedRowCount = -1;
						break;
				}
				
				dispatchEvent(new FlexEvent(FlexEvent.UPDATE_COMPLETE));
			}
			
			public function updateMenuDisplay():void
			{
				if(_referenceComponent)
					_canvasOrigin = _referenceComponent.localToGlobal(ORIGIN);
				
				switch(_position)
				{ 
					case UP:
					default:
						x = _canvasOrigin.x + (_referenceComponent.width/2) - (width/2);
						y = _canvasOrigin.y + KSketchStyles.MENU_GAP;
						break;
					case DOWN:
						x = _canvasOrigin.x + (_referenceComponent.width/2) - (width/2);
						y = _canvasOrigin.y + _referenceComponent.height - height - KSketchStyles.MENU_GAP;
						break;
					case LEFT:
						x = _canvasOrigin.x + KSketchStyles.MENU_GAP;
						y = _canvasOrigin.y + (_referenceComponent.height/2) - (height/2);
						break;
					case RIGHT:
						x = _canvasOrigin.x + _referenceComponent.width - width - KSketchStyles.MENU_GAP;
						y = _canvasOrigin.y + (_referenceComponent.height/2) - (height/2);
						break;
				}
			}
			
			private function _setPen(button:KSketch_Toggle_Button):void
			{
				_googleAnalytics.tracker.trackPageview( "/popupmenu/" + button.id);
				
				if(_selectedButton)
					_selectedButton.selected = false;
				
				button.selected = true;
				_selectedButton = button;
				
				switch(_selectedButton)
				{
					case eraserToggle:
						KMultiTouchDrawInteractor.eraser = true;
						_canvasControl.lasso = false;
						break;
					case blackToggle:
						KMultiTouchDrawInteractor.eraser = false;
						_canvasControl.lasso = false;
						KDrawInteractor.penColor = KSketchStyles.BLACK_PEN;
						break;
					case blueToggle:
						KMultiTouchDrawInteractor.eraser = false;
						_canvasControl.lasso = false;
						KDrawInteractor.penColor = KSketchStyles.BLUE_PEN;
						break;
					case redToggle:
						KMultiTouchDrawInteractor.eraser = false;
						_canvasControl.lasso = false;
						KDrawInteractor.penColor = KSketchStyles.RED_PEN;
						break;
					case greenToggle:
						KMultiTouchDrawInteractor.eraser = false;
						_canvasControl.lasso = false;
						KDrawInteractor.penColor = KSketchStyles.GREEN_PEN;
						break;
					case lassoToggle:
						KMultiTouchDrawInteractor.eraser = false;
						_canvasControl.lasso = true;
						break;
				}
			}
			
			/**
			 * Clears the current document of every single content, without saving it.
			 */
			private function _clear():void
			{
				_googleAnalytics.tracker.trackPageview( "/popupmenu/clearCanvas" );
				
				KSketch_SaveOptions.returnToHome = false;
				if(_canvasView._interactionControl.hasUndo)
				{
					_saveOptions.open(_canvasView);
					PopUpManager.centerPopUp(_saveOptions);
				}
				else
				{
					KSketch_CanvasView.createNewSketch = true;
					_interactionControl.reset();
				}
			}
			
			
			/**
			 * Triggers undo/redo action
			 */
			public function _undoRedoAction(action:Boolean):void
			{
				_canvasControl.doubleTapAction(action, _feedback);
			}
			
			
			/**
			 * Triggers exit
			 */
			public function _saveExit():void
			{
				_googleAnalytics.tracker.trackPageview( "/popupmenu/exitCanvas" );
				
				KSketch_SaveOptions.returnToHome = true;
				if(_canvasView._interactionControl.hasUndo)
				{
					_saveOptions.open(_canvasView);
					PopUpManager.centerPopUp(_saveOptions);
				}
				else
					_exit();
			}
			
			public function _exit():void
			{
				close();
				_canvasView.exit();
				KSketch_CanvasView.createNewSketch = false;
			}
			
			/**
			 * Opens the options dialog box
			 */
			private function _openOptions():void
			{
				_googleAnalytics.tracker.trackPageview( "/popupmenu/openOptions" );
				_options.open(_canvasView,true);
				PopUpManager.centerPopUp(_options);
			}
			
			/**
			 * Opens the options dialog box
			 */
			private function _openSaveOptions():void
			{
				_saveOptions.open(_canvasView);
				PopUpManager.centerPopUp(_saveOptions);
			}
			
			/**
			 * Import image
			 */
			private function _importImage():void				
			{
				_googleAnalytics.tracker.trackPageview( "/popupmenu/importImage" );
				var newImageWindow:KSketch_ImageImport_Control = new KSketch_ImageImport_Control();
				newImageWindow.init(_KSketch, _interactionControl, _canvasView);
				newImageWindow.createDeferredContent();
				newImageWindow.open(_canvasView, true);
				PopUpManager.centerPopUp(newImageWindow);
			}
		]]>
	</fx:Script>
	
	<s:filters>
		<s:DropShadowFilter 
			color="{KSketchStyles.CANVAS_SHADOW_COLOR}" angle="{KSketchStyles.CANVAS_SHADOW_ANGLE}"
			alpha="{KSketchStyles.CANVAS_SHADOW_ALPHA * 0.5}"
			strength="{KSketchStyles.CANVAS_SHADOW_STRENGTH}"
			blurX="{KSketchStyles.CANVAS_SHADOW_X_DISTANCE * 0.75}"
			blurY="{KSketchStyles.CANVAS_SHADOW_Y_DISTANCE * 0.75}"/>
	</s:filters>
	<s:Rect width="100%" height="100%" radiusX="{KSketchStyles.MENU_CORNER_RADIUS}" radiusY="{KSketchStyles.MENU_CORNER_RADIUS}">
		<s:fill>
			<s:SolidColor color="{KSketchStyles.MENU_BACKGROUND_COLOR}"/>
		</s:fill>
	</s:Rect>
	<s:Group id="buttonContainer">
		<s:layout>
			<s:TileLayout id="buttonLayout" requestedColumnCount="1" requestedRowCount="-1"
						  horizontalGap="{KSketchStyles.MENU_BUTTON_GAP}" verticalGap="{KSketchStyles.MENU_BUTTON_GAP}"
						  paddingLeft="{KSketchStyles.MENU_PADDING}" paddingRight="{KSketchStyles.MENU_PADDING}"
						  paddingBottom="{KSketchStyles.MENU_PADDING}" paddingTop="{KSketchStyles.MENU_PADDING}"/>
		</s:layout>
		
		<buttons:KSketch_Button
			includeInLayout="{!KSketch_CanvasView.isWeb}"
			click="_saveExit()"
			id="exitButton"
			width="{KSketchStyles.TIMEBAR_BUTTON_WIDTH}"
			height="{KSketchStyles.TIMEBAR_BUTTON_HEIGHT}"
			visible="false"
			/>
		<buttons:KSketch_Button
			includeInLayout="{!KSketch_CanvasView.isWeb}"
			click="_clear()"
			id="newButton"
			width="{KSketchStyles.TIMEBAR_BUTTON_WIDTH}"
			height="{KSketchStyles.TIMEBAR_BUTTON_HEIGHT}"
			visible="false"
			/>
		<buttons:KSketch_Button
			click="_undoRedoAction(true)"
			id="undoButton"
			width="{KSketchStyles.TIMEBAR_BUTTON_WIDTH}"
			height="{KSketchStyles.TIMEBAR_BUTTON_HEIGHT}"
			/>
		<buttons:KSketch_Button
			click="_undoRedoAction(false)"
			id="redoButton"
			width="{KSketchStyles.TIMEBAR_BUTTON_WIDTH}"
			height="{KSketchStyles.TIMEBAR_BUTTON_HEIGHT}"
			/>
		
		<!-- add in separator to the next button-->
		<s:Group>
			<s:layout> <s:HorizontalLayout gap="5"/> </s:layout>
			<s:Group width="100%">
				<s:Line xFrom="0" xTo="0" yFrom="0" yTo="50">
					<s:stroke>
						<s:SolidColorStroke color="0x000000" weight="2" caps="square"/>
					</s:stroke>
				</s:Line>
			</s:Group>
			<buttons:KSketch_Toggle_Button
				click="{_setPen(lassoToggle)}"
				id="lassoToggle"
				width="{KSketchStyles.TIMEBAR_BUTTON_WIDTH}"
				height="{KSketchStyles.TIMEBAR_BUTTON_HEIGHT}"
				/>
		</s:Group>
		
		<buttons:KSketch_Toggle_Button
			click="{_setPen(blackToggle)}"
			id="blackToggle"
			width="{KSketchStyles.TIMEBAR_BUTTON_WIDTH}"
			height="{KSketchStyles.TIMEBAR_BUTTON_HEIGHT}"
			/>
		<buttons:KSketch_Toggle_Button
			click="{_setPen(redToggle)}"
			id="redToggle"
			width="{KSketchStyles.TIMEBAR_BUTTON_WIDTH}"
			height="{KSketchStyles.TIMEBAR_BUTTON_HEIGHT}"
			/>
		<buttons:KSketch_Toggle_Button
			click="{_setPen(blueToggle)}"
			id="blueToggle"
			width="{KSketchStyles.TIMEBAR_BUTTON_WIDTH}"
			height="{KSketchStyles.TIMEBAR_BUTTON_HEIGHT}"
			/>
		<buttons:KSketch_Toggle_Button
			click="{_setPen(greenToggle)}"
			id="greenToggle"
			width="{KSketchStyles.TIMEBAR_BUTTON_WIDTH}"
			height="{KSketchStyles.TIMEBAR_BUTTON_HEIGHT}"
			/>
		<buttons:KSketch_Toggle_Button
			click="{_setPen(eraserToggle)}"
			id="eraserToggle"
			width="{KSketchStyles.TIMEBAR_BUTTON_WIDTH}"
			height="{KSketchStyles.TIMEBAR_BUTTON_HEIGHT}"
			/>
		
		<!-- add in separator to the next button-->
		<s:Group>
			<s:layout> <s:HorizontalLayout gap="5"/> </s:layout>
			<s:Group width="100%">
				<s:Line xFrom="0" xTo="0" yFrom="0" yTo="50">
					<s:stroke>
						<s:SolidColorStroke color="0x000000" weight="2" caps="square"/>
					</s:stroke>
				</s:Line>
			</s:Group>
			<buttons:KSketch_Button
				click="_openOptions()"
				id="optionButton"
				width="{KSketchStyles.TIMEBAR_BUTTON_WIDTH}"
				height="{KSketchStyles.TIMEBAR_BUTTON_HEIGHT}"
				/>
		</s:Group>
		<!--
		<buttons:KSketch_Button
			click="_importImage()"
			id="imageButton"
			width="{KSketchStyles.TIMEBAR_BUTTON_WIDTH}"
			height="{KSketchStyles.TIMEBAR_BUTTON_HEIGHT}"
			/>
		-->
	</s:Group>
</s:SkinnablePopUpContainer>
