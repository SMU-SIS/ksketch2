<?xml version="1.0" encoding="utf-8"?>
<!--
*Copyright 2010-2012 Singapore Management University
*Developed under a grant from the Singapore-MIT GAMBIT Game Lab

*This Source Code Form is subject to the terms of the
*Mozilla Public License, v. 2.0. If a copy of the MPL was
*not distributed with this file, You can obtain one at
*http://mozilla.org/MPL/2.0/.
-->
<s:SkinnablePopUpContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
						   xmlns:s="library://ns.adobe.com/flex/spark"
						   backgroundAlpha="0"
						   creationComplete="_initButtons()"
						   updateComplete="_updateMenuDisplay()"
						   xmlns:buttons="sg.edu.smu.ksketch2.canvas.components.buttons.*">
	<fx:Script>
		<![CDATA[
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			
			import sg.edu.smu.ksketch2.KSketchStyles;
			import sg.edu.smu.ksketch2.canvas.KSketchAssets;
			
			public static const EVENT_POSITION_CHANGED:String = "position changed";
			public static const LEFT:int = 0;
			public static const RIGHT:int = 1;
			public static const UP:int = 2;
			public static const DOWN:int = 3;
			
			private var _referenceComponent:UIComponent;
			private var _canvasOrigin:Point = new Point();
			private var _position:int;
			
			private var _selectedButton:KSketch_Toggle_Button;
			
			public function init(referenceComponent:UIComponent):void
			{
				_referenceComponent = referenceComponent;
				_canvasOrigin = referenceComponent.localToGlobal(_canvasOrigin);
				_position = 1;
				
				addEventListener(EVENT_POSITION_CHANGED, _updateMenuDisplay);
			}
			
			public function _initButtons():void
			{
				newButton.init(KSketchAssets.texture_new, KSketchAssets.texture_new_down);
				newButton.initSkin();
				optionButton.init(KSketchAssets.texture_options, KSketchAssets.texture_options_down);
				optionButton.initSkin();
				exitButton.init(KSketchAssets.texture_document, KSketchAssets.texture_document_down);
				exitButton.initSkin();
				
				eraserToggle.init(KSketchAssets.texture_eraser, KSketchAssets.texture_eraser_down);
				eraserToggle.initSkin();
				blackToggle.init(KSketchAssets.texture_blackPen, KSketchAssets.texture_blackPen_down);
				blackToggle.initSkin();
				redToggle.init(KSketchAssets.texture_redPen, KSketchAssets.texture_redPen_down);
				redToggle.initSkin();
				blueToggle.init(KSketchAssets.texture_bluePen, KSketchAssets.texture_bluePen_down);
				blueToggle.initSkin();
				greenToggle.init(KSketchAssets.texture_greenPen, KSketchAssets.texture_greenPen_down);
				greenToggle.initSkin();
				
				_setPen(blackToggle);
			}
			
			public function set position(value:int):void
			{
				_position = value;
				
				switch(_position)
				{
					case UP:
					case DOWN:
						buttonLayout.requestedColumnCount = -1;
						buttonLayout.requestedRowCount = 1;
						break;
					case LEFT:
					case RIGHT:
					default:
						buttonLayout.requestedColumnCount = 1;
						buttonLayout.requestedRowCount = -1;
						break;
				}
				
				dispatchEvent(new FlexEvent(FlexEvent.UPDATE_COMPLETE));
			}
			
			private function _updateMenuDisplay():void
			{
				switch(_position)
				{ 
					case UP:
						x = _canvasOrigin.x + (_referenceComponent.width/2) - (width/2);
						y = _canvasOrigin.y + KSketchStyles.MENU_GAP;
						break;
					case DOWN:
						x = _canvasOrigin.x + (_referenceComponent.width/2) - (width/2);
						y = _canvasOrigin.y + _referenceComponent.height - height - KSketchStyles.MENU_GAP;
						break;
					case LEFT:
						x = _canvasOrigin.x + KSketchStyles.MENU_GAP;
						y = _canvasOrigin.y + (_referenceComponent.height/2) - (height/2);
						break;
					case RIGHT:
					default:
						x = _canvasOrigin.x + _referenceComponent.width - width - KSketchStyles.MENU_GAP;
						y = _canvasOrigin.y + (_referenceComponent.height/2) - (height/2);
				}
			}
			
			private function _setPen(button:KSketch_Toggle_Button):void
			{
				if(button == _selectedButton)
					return;
				
				if(_selectedButton)
					_selectedButton.selected = false;
				
				button.selected = true;
				_selectedButton = button;
			}
		]]>
	</fx:Script>
	
	<s:filters>
		<s:DropShadowFilter 
			color="{KSketchStyles.CANVAS_SHADOW_COLOR}" angle="{KSketchStyles.CANVAS_SHADOW_ANGLE}"
			alpha="{KSketchStyles.CANVAS_SHADOW_ALPHA * 0.5}"
			strength="{KSketchStyles.CANVAS_SHADOW_STRENGTH}"
			blurX="{KSketchStyles.CANVAS_SHADOW_X_DISTANCE * 0.75}"
			blurY="{KSketchStyles.CANVAS_SHADOW_Y_DISTANCE * 0.75}"/>
	</s:filters>
	<s:Rect width="100%" height="100%" radiusX="{KSketchStyles.MENU_CORNER_RADIUS}" radiusY="{KSketchStyles.MENU_CORNER_RADIUS}">
		<s:fill>
			<s:SolidColor color="{KSketchStyles.MENU_BACKGROUND_COLOR}"/>
		</s:fill>
	</s:Rect>
	<s:Group id="buttonContainer">
		<s:layout>
			<s:TileLayout id="buttonLayout" requestedColumnCount="1" requestedRowCount="-1"
						  horizontalGap="{KSketchStyles.MENU_BUTTON_GAP}" verticalGap="{KSketchStyles.MENU_BUTTON_GAP}"
						  paddingLeft="{KSketchStyles.MENU_PADDING}" paddingRight="{KSketchStyles.MENU_PADDING}"
						  paddingBottom="{KSketchStyles.MENU_PADDING}" paddingTop="{KSketchStyles.MENU_PADDING}"/>
		</s:layout>
		<buttons:KSketch_Button
			id="newButton"
			click="{position = LEFT}"
			width="{KSketchStyles.TIMEBAR_BUTTON_WIDTH}"
			height="{KSketchStyles.TIMEBAR_BUTTON_HEIGHT}"
			
			/>
		<buttons:KSketch_Toggle_Button
			click="{_setPen(eraserToggle)}"
			id="eraserToggle"
			width="{KSketchStyles.TIMEBAR_BUTTON_WIDTH}"
			height="{KSketchStyles.TIMEBAR_BUTTON_HEIGHT}"
			/>
		<buttons:KSketch_Toggle_Button
			click="{_setPen(blackToggle)}"
			id="blackToggle"
			width="{KSketchStyles.TIMEBAR_BUTTON_WIDTH}"
			height="{KSketchStyles.TIMEBAR_BUTTON_HEIGHT}"
			/>
		<buttons:KSketch_Toggle_Button
			click="{_setPen(redToggle)}"
			id="redToggle"
			width="{KSketchStyles.TIMEBAR_BUTTON_WIDTH}"
			height="{KSketchStyles.TIMEBAR_BUTTON_HEIGHT}"
			/>
		<buttons:KSketch_Toggle_Button
			click="{_setPen(blueToggle)}"
			id="blueToggle"
			width="{KSketchStyles.TIMEBAR_BUTTON_WIDTH}"
			height="{KSketchStyles.TIMEBAR_BUTTON_HEIGHT}"
			/>
		<buttons:KSketch_Toggle_Button
			click="{_setPen(greenToggle)}"
			id="greenToggle"
			width="{KSketchStyles.TIMEBAR_BUTTON_WIDTH}"
			height="{KSketchStyles.TIMEBAR_BUTTON_HEIGHT}"
			/>
		<buttons:KSketch_Button
			id="optionButton"
			width="{KSketchStyles.TIMEBAR_BUTTON_WIDTH}"
			height="{KSketchStyles.TIMEBAR_BUTTON_HEIGHT}"
			/>
		<buttons:KSketch_Button
			id="exitButton"
			width="{KSketchStyles.TIMEBAR_BUTTON_WIDTH}"
			height="{KSketchStyles.TIMEBAR_BUTTON_HEIGHT}"
			/>
	</s:Group>
</s:SkinnablePopUpContainer>
