<?xml version="1.0" encoding="utf-8"?>
<!--
*Copyright 2010-2012 Singapore Management University
*Developed under a grant from the Singapore-MIT GAMBIT Game Lab

*This Source Code Form is subject to the terms of the
*Mozilla Public License, v. 2.0. If a copy of the MPL was
*not distributed with this file, You can obtain one at
*http://mozilla.org/MPL/2.0/.
-->
<s:SkinnablePopUpContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
						   xmlns:s="library://ns.adobe.com/flex/spark" backgroundAlpha="0" >
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:HTTPService id="httpService"
					   useProxy="false"  
					   method="POST"
					   resultFormat="text" 
					   >
		</s:HTTPService>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import air.net.URLMonitor;
			
			import sg.edu.smu.ksketch2.KSketchStyles;
			import sg.edu.smu.ksketch2.KSketchWebLinks;
			import sg.edu.smu.ksketch2.canvas.KSketch_LoginView;
			import sg.edu.smu.ksketch2.canvas.components.view.KSketch_CanvasView;
			import sg.edu.smu.ksketch2.canvas.components.view.KSketch_HomeView;
			import sg.edu.smu.ksketch2.canvas.controls.KMobileControl;
			import sg.edu.smu.ksketch2.canvas.controls.KFileControl;
			import sg.edu.smu.ksketch2.utils.KWebData;
			
			public static var saveCounter:int = 0;
			
			private var _canvasView:KSketch_CanvasView;
			private var _overwriteSaveOptions:KSketch_OverwriteSaveOptions;
			private var _menu:KSketch_PopUp_Menu;
			
			private var _monitor:URLMonitor;
			private var _monitorTimer:Timer;
			private var _isConnected:Boolean;
			private var _success:Boolean;
			
			public var objDoc:Object;
			
			public var result:Object;
			public var userData:Object = new Object();
			public var mobileControl:KMobileControl;
			
			public var returnToHome:Boolean = false;
			public var overwriteSave:Boolean = false;
			public var canvasDirty:Boolean = false;
			
			override public function open(owner:DisplayObjectContainer, modal:Boolean=false):void
			{
				//check for network connection
				_monitor = new URLMonitor(new URLRequest(KSketchWebLinks.pingurl));
				_monitor.addEventListener(StatusEvent.STATUS, isConnected);
				_monitor.start();
				
				_monitorTimer = new Timer(5000);
				_monitorTimer.addEventListener(TimerEvent.TIMER, endMonitor);
				_monitorTimer.start();
				
				var confirmSave:Boolean = false;
				userData = _canvasView.saveSketch(confirmSave);
				mobileControl = _canvasView._mobileControl;
				
				if(saveCounter == 0)
				{
					saveCounter = KSketch_HomeView.autoSaveCounter;
					saveCounter ++;
				}
				
				super.open(owner, modal);
				saveAsWarning.visible = false;
				setSketchName();
			}
			
			override public function close(commit:Boolean=false, data:*=null):void
			{
				KSketch_CanvasView.createNewSketch = true;
				super.close(commit,data);
				
				if(overwriteSave)
				{
					_overwriteSaveOptions.open(_canvasView,true);
					PopUpManager.centerPopUp(_overwriteSaveOptions);
					overwriteSave = false;
				}
				
				if(_success)
				{
					mobileControl.writeToCache(mobileControl.informationArr);
					if(!returnToHome)
					{
						canvasDirty = true;
						_canvasView._interactionControl.reset();
						incrementSaveCounter();
					}
					else
					{
						_menu._exit();	
						canvasDirty = false;
					}
					
					_success = false;
				}
				
			}
			
			public function setSketchName():void
			{
				//if this is an attempt to save a new sketch, 
				//then show the textarea to enter sketch name
				var defaultName:String = "My Sketch " + saveCounter;
				sketchName.text = defaultName;
				
				if(!KSketch_CanvasView.createNewSketch)
				{
					if(!canvasDirty)
					{
						if(userData.kSketchDocument.originalName == "N/A")
						{
							sketchName.text = userData.kSketchDocument.name;
							userData.kSketchDocument.originalName = userData.kSketchDocument.name;
						}
						else
							sketchName.text = userData.kSketchDocument.name;
						
						saveAsWarning.visible = true;
					}
				}
				
				if(sketchName.text == "")
				{
					sketchName.text = defaultName;
					saveAsWarning.visible = false;
				}
			}
			
			public function init(canvasView:KSketch_CanvasView, menu:KSketch_PopUp_Menu, overwriteSave:KSketch_OverwriteSaveOptions):void
			{
				_canvasView = canvasView;
				_overwriteSaveOptions = overwriteSave;
				_menu = menu;
			}
			
			private function isConnected(event:StatusEvent):void
			{
				if(_monitor.available)
					_isConnected = true;
				else
					_isConnected = false;
				
				_monitor.stop();
				_monitorTimer.stop();
				
				_monitor.removeEventListener(StatusEvent.STATUS, isConnected);
				_monitorTimer.removeEventListener(TimerEvent.TIMER, endMonitor);
			}
			
			private function endMonitor(event:TimerEvent):void
			{
				_isConnected = false;
				
				_monitor.stop();
				_monitorTimer.stop();
				
				_monitor.removeEventListener(StatusEvent.STATUS, isConnected);
				_monitorTimer.removeEventListener(TimerEvent.TIMER, endMonitor);
			}
			
			public function save():void
			{
				var confirmSave:Boolean = true;
				userData = _canvasView.saveSketch(confirmSave);
				
				var finalFileName:String =  sketchName.text;
				
				objDoc = KWebData.prepareSketchDocument(userData, finalFileName);
				objDoc.save = -1;
				objDoc.deleteFlag = 0;
				
				if(objDoc.sketchId == -1)
				{
					objDoc.version = 1;
					objDoc.sketchId = "";
					objDoc.originalVersion = 0;	//changed
					objDoc.originalSketch = -1;
				}
				
				//save to cache
				mobileControl.addSketchToList(objDoc, KFileControl.ADD_SAVE_CACHE);

				if(_canvasView._isNewSketch)
				{
					if(KSketch_LoginView._isLoggedIn)			//logged in
					{
						if(_isConnected)						//connected
							saveToWeb();							//save to web						
						else									//disconnected
							navigateBack();							//navigate back
					}
					else										//anonymous
						navigateBack();								//navigate back
				}
				else											//existing sketch
				{
					if(KSketch_LoginView._isLoggedIn)			//logged in
					{
						if(_isConnected)						//connected
							saveToWeb();							//save to web
						else									//disconnected
							overwriteCache();						//overwrite in cache	
					}
					else										//anonymous
						overwriteCache();							//overwrite in cache
				}
			}
			
			private function saveToWeb():void
			{
				//save to web
				var objSaveToWeb:Object = new Object();
				objSaveToWeb["fileData"] = com.adobe.serialization.json.JSON.encode(objDoc);
				objSaveToWeb["userid"] = userData.kUser.id;
				
				if(!overwriteSave)
					httpService.url = KSketchWebLinks.jsonurlPostXML;
				else
					httpService.url = KSketchWebLinks.jsonurlOverwritePostXML;
				
				httpService.send(objSaveToWeb);
				httpService.addEventListener(ResultEvent.RESULT, resultHandler);
				httpService.addEventListener(FaultEvent.FAULT, faultHandler);
			}
			
			private function resultHandler(event:ResultEvent):void
			{
				var resultRaw:Object = event.result;
				result = com.adobe.serialization.json.JSON.decode(resultRaw.toString());
				
				if (result.status == "success")
				{
					//save to cache
					objDoc.save = 0;
					mobileControl.addSketchToList(objDoc, KFileControl.ADD_SAVE_CACHE);
					
					overwriteSave = false;
					_success = true;
				}
				else if (result.status == "errorDiscrepancy")
				{
					overwriteSave = true;
					_success = false;
				}
				
				close();
			}
			
			private function navigateBack():void
			{
				overwriteSave = false;
				_success = true;
				
				close();
			}
			
			private function overwriteCache():void
			{
				objDoc.save = -1						//flag save to web for existing sketch
					
				mobileControl.addSketchToList(objDoc, KFileControl.ADD_SAVE_CACHE);	//overwrite cached object	
				
				navigateBack();
			}
			
			private function faultHandler(event:FaultEvent):void
			{
				overwriteCache();
			}
			
			private function discardSketch():void
			{
				close();
				
				if(!returnToHome)
				{
					canvasDirty = true;
					_canvasView._interactionControl.reset();
				}
					
				else
				{
					canvasDirty = true;
					_menu._exit();	
				}
			}
			
			private function cancel():void
			{
				close();
				KSketch_CanvasView.createNewSketch = false;
			}
			
			public function incrementSaveCounter():void
			{
				//if the filename is set to default - "My Sketch n", increment saveCounter
				if(sketchName.text.indexOf("My Sketch") >= 0)
				{
					var tempFilename:String = sketchName.text;
					var trimFilename:String = tempFilename.replace("My Sketch", ""); 
					var isANumber:Boolean = !isNaN(Number(trimFilename));
					
					if(isANumber)
					{
						var tempNo:int = int(trimFilename);
						saveCounter = tempNo;
						saveCounter ++;
					}
					
					if(saveCounter <= KSketch_HomeView.autoSaveCounter)
					{
						saveCounter = KSketch_HomeView.autoSaveCounter;
						saveCounter ++;
					}
						
					
				}
			}
		]]>
	</fx:Script>
	<s:filters>
		<s:DropShadowFilter 
			color="{KSketchStyles.CANVAS_SHADOW_COLOR}" angle="{KSketchStyles.CANVAS_SHADOW_ANGLE}"
			alpha="{KSketchStyles.CANVAS_SHADOW_ALPHA * 0.5}"
			strength="{KSketchStyles.CANVAS_SHADOW_STRENGTH}"
			blurX="{KSketchStyles.CANVAS_SHADOW_X_DISTANCE * 0.75}"
			blurY="{KSketchStyles.CANVAS_SHADOW_Y_DISTANCE * 0.75}"/>
	</s:filters>
	<s:Group id="saveNewSketch" visible="true">
		<s:Rect width="100%" height="100%" radiusX="{KSketchStyles.MENU_CORNER_RADIUS}" radiusY="{KSketchStyles.MENU_CORNER_RADIUS}">
			<s:fill>
				<s:SolidColor color="{KSketchStyles.MENU_BACKGROUND_COLOR}"/>
			</s:fill>
		</s:Rect>
		<s:Group>
			<s:layout>
				<s:VerticalLayout gap="10" paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5"/>
			</s:layout>
			<s:Label text="Save this sketch?" fontSize="26"/>
			
			<s:Group>
				<s:layout>
					<s:VerticalLayout paddingLeft="10"/>
				</s:layout>
				<s:Label text="Sketch Name" fontSize="18"/>
				<s:TextArea id="sketchName"/>
				<s:Label id="saveAsWarning" text="A different filename will save this sketch as a new copy" fontSize="10" visible="false"/>
			</s:Group>
			<s:Group width="100%">
				<s:layout>
					<s:HorizontalLayout gap="10" horizontalAlign="right"/>
				</s:layout>
				<s:Button label="Save" click="save()" fontSize="14"/>
				<s:Button label="Discard" click="discardSketch()" fontSize="14"/>
				<s:Button label="Cancel" click="cancel()" fontSize="14"/>
			</s:Group>
		</s:Group>
	</s:Group>
</s:SkinnablePopUpContainer>