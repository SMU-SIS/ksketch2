<?xml version="1.0" encoding="utf-8"?>
<!--
*Copyright 2010-2012 Singapore Management University
*Developed under a grant from the Singapore-MIT GAMBIT Game Lab

*This Source Code Form is subject to the terms of the
*Mozilla Public License, v. 2.0. If a copy of the MPL was
*not distributed with this file, You can obtain one at
*http://mozilla.org/MPL/2.0/.
-->
<s:SkinnablePopUpContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
                           xmlns:s="library://ns.adobe.com/flex/spark" 
						   xmlns:buttons="sg.edu.smu.ksketch2.canvas.components.buttons.*"
						   backgroundAlpha="0" initialize="_initStyle()">
    <fx:Declarations>
        <!-- Place non-visual elements (e.g., services, value objects) here -->
        <s:HTTPService id="httpService"
                       useProxy="false"
                       method="POST"
                       resultFormat="text"
                >
        </s:HTTPService>
    </fx:Declarations>

    <fx:Script>
		<![CDATA[
		import com.adobe.serialization.json.JSON;
		
		import mx.events.FlexEvent;
		import mx.formatters.DateFormatter;
		import mx.managers.PopUpManager;
		import mx.rpc.events.FaultEvent;
		import mx.rpc.events.ResultEvent;
		
		import air.net.URLMonitor;
		
		import org.as3commons.collections.SortedList;
		
		import sg.edu.smu.ksketch2.KSketchGlobals;
		import sg.edu.smu.ksketch2.KSketchWebLinks;
		import sg.edu.smu.ksketch2.canvas.components.view.KSketch_CanvasView;
		import sg.edu.smu.ksketch2.canvas.controls.KSketch_CacheControl;
		import sg.edu.smu.ksketch2.utils.KWebData;

        public static var saveCounter:int = 0;
			
		private var GAP:Number = 10 * KSketchGlobals.SCALE;
		private var PADDING_HEADER:Number = 5 * KSketchGlobals.SCALE;
		private var SKECTHNAME_WIDTH:Number = 300 * KSketchGlobals.SCALE;
		private var SKECTHNAME_HEIGHT:Number = 50 * KSketchGlobals.SCALE;

        private var _canvasView:KSketch_CanvasView;
        private var _overwriteSaveOptions:KSketch_OverwriteSaveOptions;
        private var _menu:KSketch_PopUp_Menu;

        private var _monitor:URLMonitor;
        private var _monitorTimer:Timer;
        private var _isConnected:Boolean;
        private var _success:Boolean;

        public var objDoc:Object;

        public var result:Object;
        public var userData:Object = new Object();
        private var _cacheControl:KSketch_CacheControl;

        public var returnToHome:Boolean = false;
        public var overwriteSave:Boolean = false;
        public var canvasDirty:Boolean = false;

        private function _initStyle():void {
            this.removeEventListener(FlexEvent.INITIALIZE, _initStyle);
			
            header.setStyle("fontSize", KSketchGlobals.FONT_SIZE_26);
            title.setStyle("fontSize", KSketchGlobals.FONT_SIZE_18);
            saveAsWarning.setStyle("fontSize", KSketchGlobals.FONT_SIZE_14);
           	sketchName.height = SKECTHNAME_HEIGHT;
			sketchName.percentWidth = 95;
				
			saveButton.init("Save");
			discardButton.init("Delete");
			cancelButton.init("Cancel");
			saveButton.initSkin();
			discardButton.initSkin();
			cancelButton.initSkin();
        }
			
        override public function open(owner:DisplayObjectContainer, modal:Boolean = false):void {
            //check for network connection
            _monitor = new URLMonitor(new URLRequest(KSketchWebLinks.pingurl));
            _monitor.addEventListener(StatusEvent.STATUS, isConnected);
            _monitor.start();

            _monitorTimer = new Timer(5000);
            _monitorTimer.addEventListener(TimerEvent.TIMER, endMonitor);
            _monitorTimer.start();

            var confirmSave:Boolean = false;
            userData = _canvasView.saveSketch(confirmSave);
            _cacheControl = _canvasView.cacheControl;

            if (saveCounter == 0) {
                saveCounter++;
            }

            super.open(owner, modal);
            saveAsWarning.visible = false;
            setSketchName();
        }

        override public function close(commit:Boolean = false, data:* = null):void {
            KSketch_CanvasView.createNewSketch = true;
            super.close(commit, data);

            if (overwriteSave) {
                _overwriteSaveOptions.open(_canvasView, true);
                PopUpManager.centerPopUp(_overwriteSaveOptions);
                overwriteSave = false;
            }

            if (_success) {
                if (!returnToHome) {
                    canvasDirty = true;
                    _canvasView._interactionControl.reset();
                    incrementSaveCounter();
                }
                else {
                    _menu._exit();
                    canvasDirty = false;
                }

                _success = false;
            }

        }

        public function setSketchName():void {
            //if this is an attempt to save a new sketch,
            //then show the textarea to enter sketch name
            var defaultName:String = "My Sketch " + saveCounter;
            sketchName.text = defaultName;

            if (!KSketch_CanvasView.createNewSketch) {
                if (!canvasDirty) {
                    if (userData.sketchData.originalName == "") {
                        sketchName.text = userData.sketchData.fileName;
                        userData.sketchData.originalName = userData.sketchData.fileName;
                    }
                    else
                        sketchName.text = userData.sketchData.originalName;

                    saveAsWarning.visible = true;
                }
            }

            if (sketchName.text == "") {
                sketchName.text = defaultName;
                saveAsWarning.visible = false;
            }
        }

        public function init(canvasView:KSketch_CanvasView, menu:KSketch_PopUp_Menu, overwriteSave:KSketch_OverwriteSaveOptions):void {
            _canvasView = canvasView;
            _overwriteSaveOptions = overwriteSave;
            _menu = menu;
        }

        private function isConnected(event:StatusEvent):void {
            if (_monitor.available)
                _isConnected = true;
            else
                _isConnected = false;

            _monitor.stop();
            _monitorTimer.stop();

            _monitor.removeEventListener(StatusEvent.STATUS, isConnected);
            _monitorTimer.removeEventListener(TimerEvent.TIMER, endMonitor);
        }

        private function endMonitor(event:TimerEvent):void {
            _isConnected = false;

            _monitor.stop();
            _monitorTimer.stop();

            _monitor.removeEventListener(StatusEvent.STATUS, isConnected);
            _monitorTimer.removeEventListener(TimerEvent.TIMER, endMonitor);
        }

        public function save():void {
            var confirmSave:Boolean = true;
            userData = _canvasView.saveSketch(confirmSave);

            var finalFileName:String = sketchName.text;

            objDoc = KWebData.prepareSketchDocument(userData, finalFileName, _cacheControl.user);

            objDoc.save = -1;
            objDoc.deleteFlag = 0;

            if (objDoc.sketchId == -1) {
                objDoc.version = 1;
                //objDoc.sketchId = "";
                objDoc.originalVersion = 0;	//changed
                objDoc.originalSketch = -1;
            }

            //save to cache
            if (!overwriteSave) {
                _cacheControl.addToCache(objDoc);
            } else {
                _cacheControl.updateCache(objDoc);
            }
            if (_canvasView._isNewSketch) {
                if (_cacheControl.isLoggedIn())			//logged in
                {
                    if (_isConnected)						//connected
                        saveToWeb();							//save to web
                    else									//disconnected
                        navigateBack();							//navigate back
                }
                else										//anonymous
                    navigateBack();								//navigate back
            }
            else											//existing sketch
            {
                if (_cacheControl.isLoggedIn())			//logged in
                {
                    if (_isConnected)						//connected
                        saveToWeb();							//save to web
                    else									//disconnected
                        overwriteCache();						//overwrite in cache
                }
                else										//anonymous
                    overwriteCache();							//overwrite in cache
            }
        }

        private function saveToWeb():void {
            //save to web
            var objSaveToWeb:Object = new Object();
            objSaveToWeb["fileData"] = com.adobe.serialization.json.JSON.encode(objDoc);
            objSaveToWeb["userid"] = _cacheControl.user.id;

            if (!overwriteSave)
                httpService.url = KSketchWebLinks.jsonurlGetXML;
            else
                httpService.url = KSketchWebLinks.jsonurlOverwriteGetXML;

            httpService.send(objSaveToWeb);
            httpService.addEventListener(ResultEvent.RESULT, resultHandler);
            httpService.addEventListener(FaultEvent.FAULT, faultHandler);
        }

        public function saveUnsavedSketches(unsavedList:SortedList, cacheCtr:KSketch_CacheControl) {
            if(_cacheControl == null)
            {
                _cacheControl = cacheCtr;
            }
            var arr:Array = _cacheControl.cachedDocuments;
            for (var i:int = 0; i < unsavedList.size; i++) {
                var fileData:Object = null;
                if ((unsavedList.itemAt(i).sketchId == -1) || (unsavedList.itemAt(i) == null)) {
                    for (var j:int = 0; j < arr.length; j++) {
                        if (unsavedList.itemAt(i).uniqueId == arr[j].uniqueId) {
                            fileData = arr[j];
                            break;
                        }
                    }
                }
                else {
                    for (var j:int = 0; j < arr.length; j++) {
                        if (unsavedList.itemAt(i).sketchId == arr[j].sketchId) {
                            fileData = arr[j];
                            break;
                        }
                    }
                }
                if (fileData == null) {
                    continue;
                }
                //var obj:Object = KWebData.prepareSketchDocument(fileData, unsavedList.itemAt(i).fileName, _cacheControl.user);
                var objSaveToWeb:Object = new Object();
                fileData.owner_id = _cacheControl.user.id;
                objSaveToWeb["fileData"] = com.adobe.serialization.json.JSON.encode(fileData);

                objSaveToWeb["userid"] = _cacheControl.user.id;
                if ((unsavedList.itemAt(i).sketchId == -1) || (unsavedList.itemAt(i) == null)) {
                    httpService.url = KSketchWebLinks.jsonurlGetXML;
                } else {
                    httpService.url = KSketchWebLinks.jsonurlOverwriteGetXML;
                }
                httpService.addEventListener(ResultEvent.RESULT, unsavedResultHandler);
                httpService.addEventListener(FaultEvent.FAULT, unsavedFaultHandler);
                httpService.send(objSaveToWeb);
            }
        }

        private function formatObjectForSave():Object {
            var data:Object = new Object();
            data.group_permissions = [];
            data.thumbnailData = userData.thumbnailData;
            data.p_edit = true;
            data.changeDescription = "";
            data.date = generateTimestamp(null);

            data.fileName = sketchName;
            //data.lowerFileName = sketchName.toLowerCase();

            if (userData.sketchData.originalName != "" && (sketchName == userData.sketchData.originalName)) {
                data.sketchId = userData.sketchData.sketchId;
                data.originalVersion = userData.sketchData.originalVersion;
                data.originalSketch = userData.sketchData.originalSketch;
                data.originalName = userData.sketchData.originalName;
            }
            else {
                data.sketchId = "";
                data.originalVersion = 1;
                data.originalSketch = -1;
                data.originalName = sketchName;
            }

            data.appver = 1.0;
            data.version = userData.kSketchDocument.version;
            data.p_view = 1;
            data.fileData = userData.kSketchDocument.xml.toXMLString();
            data.p_comment = true;
            data.owner = _cacheControl.user.u_realname;
            data.owner_id = _cacheControl.user.id;
            return data;
        }

        private function generateTimestamp(timestamp:Date):String {
            if (timestamp == null) {
                timestamp = new Date();
                var offsetMilliseconds:Number = timestamp.getTimezoneOffset() * 60 * 1000;
                timestamp.setTime(timestamp.getTime() + offsetMilliseconds);
            }

            var dateFormatter:DateFormatter = new DateFormatter();
            dateFormatter.formatString = "DD MMM YYYY, HH:NN:SS";
            return dateFormatter.format(timestamp);
        }

        private function resultHandler(event:ResultEvent):void {
            var resultRaw:Object = event.result;
            result = com.adobe.serialization.json.JSON.decode(resultRaw.toString());

            if (result.status == "success") {
                //save to cache
                //objDoc.save = 0;
                if (!overwriteSave) {
                    _cacheControl.updateSketchDocument(result.uniqueId, result.sketchId);
                }
                overwriteSave = false;
                _success = true;
            }
            else if (result.status == "errorDiscrepancy") {
                overwriteSave = true;
                _success = false;
            }

            close();
        }

        private function unsavedResultHandler(event:ResultEvent):void {
            var resultRaw:Object = event.result;
            result = com.adobe.serialization.json.JSON.decode(resultRaw.toString());

            if (result.status == "success") {
                //save to cache
                //objDoc.save = 0;
                if (!overwriteSave) {
                    _cacheControl.updateSketchDocument(result.uniqueId, result.sketchId);
                }
                overwriteSave = false;
                _success = true;
            }
            else if (result.status == "errorDiscrepancy") {
                overwriteSave = true;
                _success = false;
            }
        }

        private function navigateBack():void {
            overwriteSave = false;
            _success = true;

            close();
        }

        private function overwriteCache():void {
            objDoc.save = -1						//flag save to web for existing sketch

            navigateBack();
        }

        private function faultHandler(event:FaultEvent):void {
            overwriteCache();
        }

        private function unsavedFaultHandler(event:FaultEvent):void {

        }

        private function discardSketch():void {
            close();

            if (!returnToHome) {
                canvasDirty = true;
                _canvasView._interactionControl.reset();
            }

            else {
                canvasDirty = true;
                _menu._exit();
            }
        }

        private function cancel():void {
            close();
            KSketch_CanvasView.createNewSketch = false;
        }

        public function incrementSaveCounter():void {
            //if the filename is set to default - "My Sketch n", increment saveCounter
            if (sketchName.text.indexOf("My Sketch") >= 0) {
                var tempFilename:String = sketchName.text;
                var trimFilename:String = tempFilename.replace("My Sketch", "");
                var isANumber:Boolean = !isNaN(Number(trimFilename));

                if (isANumber) {
                    var tempNo:int = int(trimFilename);
                    saveCounter = tempNo;
                    saveCounter++;
                }
            }
        }
        ]]>
	</fx:Script>
    <s:filters>
        <s:DropShadowFilter
                color="{KSketchGlobals.COLOR_BLACK}" angle="{KSketchGlobals.ANGLE_50}"
                alpha="{KSketchGlobals.ALPHA_06}"
                strength="{KSketchGlobals.RECT_STRENGTH}"
                blurX="{KSketchGlobals.RECT_BLURX}"
                blurY="{KSketchGlobals.RECT_BLURY}"/>
    </s:filters>
    <s:Group id="saveNewSketch" visible="true">
        <s:Rect width="100%" height="100%" radiusX="{KSketchGlobals.RECT_RADIUSX}" radiusY="{KSketchGlobals.RECT_RADIUSY}">
            <s:fill>
                <s:SolidColor color="{KSketchGlobals.COLOR_GREY_MEDIUM}"/>
            </s:fill>
        </s:Rect>
        <s:Group>
            <s:layout>
                <s:VerticalLayout gap="{GAP}" paddingLeft="{PADDING_HEADER}"
                                  paddingRight="{PADDING_HEADER}" paddingTop="{PADDING_HEADER}"
                                  paddingBottom="{PADDING_HEADER}"/>
            </s:layout>
            <s:Label id="header" text="Save this sketch?"/>

            <s:Group>
                <s:layout>
                    <s:VerticalLayout paddingLeft="{GAP}"/>
                </s:layout>
                <s:Label id="title" text="Sketch Name"/>
                <s:TextArea id="sketchName"/>
                <s:Label id="saveAsWarning" text="A different filename will save this sketch as a new copy"
                         visible="false"/>
            </s:Group>
            <s:Group width="100%">
                <s:layout>
                    <s:HorizontalLayout gap="{GAP}" horizontalAlign="right"/>
                </s:layout>
				<buttons:KSketch_DialogButton id="saveButton" label="Save" click="save()"/>
				<buttons:KSketch_DialogButton id="discardButton" label="Discard" click="discardSketch()"/>
				<buttons:KSketch_DialogButton id="cancelButton" label="Cancel" click="cancel()"/>
            </s:Group>
        </s:Group>
    </s:Group>
</s:SkinnablePopUpContainer>