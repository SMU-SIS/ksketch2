<?xml version="1.0" encoding="utf-8"?>
<!--
*Copyright 2010-2012 Singapore Management University
*Developed under a grant from the Singapore-MIT GAMBIT Game Lab

*This Source Code Form is subject to the terms of the
*Mozilla Public License, v. 2.0. If a copy of the MPL was
*not distributed with this file, You can obtain one at
*http://mozilla.org/MPL/2.0/.
-->
<s:SkinnablePopUpContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
						   xmlns:s="library://ns.adobe.com/flex/spark" backgroundAlpha="0">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:HTTPService id="httpService"
					   useProxy="false"  
					   method="POST"
					   resultFormat="text" 
					   >
		</s:HTTPService>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import air.net.URLMonitor;
			
			import sg.edu.smu.ksketch2.KSketchStyles;
			import sg.edu.smu.ksketch2.KSketchWebLinks;
			import sg.edu.smu.ksketch2.canvas.KSketch_LoginView;
			import sg.edu.smu.ksketch2.canvas.mainView.KSketch_CanvasView;
			import sg.edu.smu.ksketch2.canvas.mainView.KSketch_HomeView;
			import sg.edu.smu.ksketch2.utils.KWebData;
			
			public static var isSaved:Boolean = false;
			public static var returnToHome:Boolean = false;
			public static var overwriteSave:Boolean = false;
			
			private var _canvasView:KSketch_CanvasView;
			private var _menu:KSketch_PopUp_Menu;
			private var _overwriteSaveOptions:KSketch_OverwriteSaveOptions;
			private var monitor:URLMonitor;
			private var _isConnected:Boolean;
			private var discard:Boolean = false;
			
			public var result:Object;
			public var userData:Object = new Object();
			
			public function init(canvasView:KSketch_CanvasView, menu:KSketch_PopUp_Menu, overwriteSave:KSketch_OverwriteSaveOptions):void
			{
				_canvasView = canvasView;
				_menu = menu;
				_overwriteSaveOptions = overwriteSave;
				
				//check for network connection
				monitor = new URLMonitor(new URLRequest(KSketchWebLinks.url));
				monitor.addEventListener(StatusEvent.STATUS, isConnected);
				monitor.start();
			}
			
			private function isConnected(event:StatusEvent):void
			{
				if(monitor.available)
					_isConnected = true;
				else
					_isConnected = false;
				
				monitor.stop();
				monitor.removeEventListener(StatusEvent.STATUS, isConnected);
			}
			
			override public function open(owner:DisplayObjectContainer, modal:Boolean=false):void
			{
				
				userData = _canvasView.saveSketch();
				
				//if this is an attempt to save a new sketch, 
				//then show the textarea to enter sketch name
				if(KSketch_CanvasView.isNewSketch)
				{
					var saveCounter:int = KSketch_HomeView.autoSaveCounter;
					sketchName.text = "My Sketch " + (saveCounter + 1);
				}
				else
				{
					sketchName.text = userData.kSketchDocument.originalName;
					saveAsWarning.visible = true;
				}
				
				super.open(owner, modal);
			}
			
			private function cancel():void
			{
				discard = true;
				close();
			}
			
			override public function close(commit:Boolean=false, data:*=null):void
			{
				super.close(commit,data);
				
				if(!overwriteSave || discard)
				{
					if(!returnToHome)
						_canvasView._interactionControl.reset();
					else
						_menu._exit();
				}
				else
				{
					overwriteSave = false;
					_overwriteSaveOptions.open(_canvasView,true);
					PopUpManager.centerPopUp(_overwriteSaveOptions);
				}
			}
			
			public function save():void
			{
				var objUserSketch:Object = new Object();
				var objSketchDoc:Object = new Object();
				
				//if connected to network and has logged in, then save to web. Else save to cache
				if(_isConnected && KSketch_LoginView._isLoggedIn)
				{
					objSketchDoc["fileData"] = com.adobe.serialization.json.JSON.encode(KWebData.prepareSketchDoc_Save(userData, sketchName.text));
					httpService.url = KSketchWebLinks.jsonurlPostXML;
					httpService.send(objSketchDoc);
					httpService.addEventListener(ResultEvent.RESULT, resultHandler);
					httpService.addEventListener(FaultEvent.FAULT, faultHandler);
				}
				else
				{
					/*
					format: {"count": x, "entities":[array], "en_type": "Sketch", "method": "get_entities_by_criteria_new"} 
					in array of entities will only be ONE object with one or many data objects
					{"data": {object}, "id": x, "modified": "", "created": ""}
					*/
					
					var newObj:Object = new Object();
					var tempData:Object = new Object();
					if(KSketch_HomeView._dup_cachedUserSketch)
					{
						var tempObj:Object = com.adobe.serialization.json.JSON.decode(KSketch_HomeView._dup_cachedUserSketch);
						
						newObj.count = tempObj.count;
						newObj.en_type = tempObj.en_type;
						newObj.method = tempObj.method;
						
						newObj.entities = new Array(tempObj.entities.length + 1);
						
						for(var i:int = 0; i<newObj.entities.length; i++)
						{
							tempData = new Object();
							if(i < newObj.entities.length-1)
								tempData.data = tempObj.entities[i].data;
								
							else
								tempData.data = KWebData.prepareUserSketch(userData, sketchName.text);
								
							newObj.entities[i] = tempData;
						}	
					}
					else
					{	
						newObj.count = 0;
						newObj.en_type = "Sketch";
						newObj.method = "cached";
						
						newObj.entities = new Array(1);
						
						tempData.data = KWebData.prepareUserSketch(userData, sketchName.text);
						newObj.entities[0] = tempData;
					}
					
					KSketch_HomeView._dup_cachedUserSketch = com.adobe.serialization.json.JSON.encode(newObj);
					
					objSketchDoc.data = KWebData.prepareSketchDoc_Save(userData, sketchName.text);
					
					if(KSketch_HomeView._dup_cachedSketchDocs)
						KSketch_HomeView._dup_cachedSketchDocs += "%" + com.adobe.serialization.json.JSON.encode(objSketchDoc);
					else
						KSketch_HomeView._dup_cachedSketchDocs = com.adobe.serialization.json.JSON.encode(objSketchDoc);
					
					KSketch_HomeView.writeDataToCache();
					
					isSaved = true;
					
					close();	
				}
			}
			
			private function resultHandler(event:ResultEvent):void
			{
				var resultRaw:Object = event.result;
				result = com.adobe.serialization.json.JSON.decode(resultRaw.toString());
				
				if (result.status == "success")
				{
					isSaved = true;
					close();	
				}
				else if (result.status == "errorDiscrepancy")
				{
					overwriteSave = true;
					close();
				}
			}
			
			private function faultHandler(event:FaultEvent):void
			{
				trace("Fault: " + event.toString());
			}
		]]>
	</fx:Script>
	<s:filters>
		<s:DropShadowFilter 
			color="{KSketchStyles.CANVAS_SHADOW_COLOR}" angle="{KSketchStyles.CANVAS_SHADOW_ANGLE}"
			alpha="{KSketchStyles.CANVAS_SHADOW_ALPHA * 0.5}"
			strength="{KSketchStyles.CANVAS_SHADOW_STRENGTH}"
			blurX="{KSketchStyles.CANVAS_SHADOW_X_DISTANCE * 0.75}"
			blurY="{KSketchStyles.CANVAS_SHADOW_Y_DISTANCE * 0.75}"/>
	</s:filters>
	<s:Group id="saveNewSketch" visible="true">
		<s:Rect width="100%" height="100%" radiusX="{KSketchStyles.MENU_CORNER_RADIUS}" radiusY="{KSketchStyles.MENU_CORNER_RADIUS}">
			<s:fill>
				<s:SolidColor color="{KSketchStyles.MENU_BACKGROUND_COLOR}"/>
			</s:fill>
		</s:Rect>
		<s:Group>
			<s:layout>
				<s:VerticalLayout gap="10" paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5"/>
			</s:layout>
			<s:Label text="Save this sketch?" fontSize="26"/>
			
			<s:Group>
				<s:layout>
					<s:VerticalLayout paddingLeft="10"/>
				</s:layout>
				<s:Label text="Sketch Name" fontSize="18"/>
				<s:TextArea id="sketchName"/>
				<s:Label id="saveAsWarning" text="A different filename will save this sketch as a new copy" fontSize="10" visible="false"/>
			</s:Group>
			<s:Group width="100%">
				<s:layout>
					<s:HorizontalLayout paddingLeft="10" horizontalAlign="right"/>
				</s:layout>
				<s:Button label="Save" click="save()" fontSize="14"/>
				<s:Button label="Discard" click="close()" fontSize="14"/>
			</s:Group>
		</s:Group>
	</s:Group>
	
	<s:Group id="saveExistingSketch" visible="false">
		<s:Rect width="100%" height="100%" radiusX="{KSketchStyles.MENU_CORNER_RADIUS}" radiusY="{KSketchStyles.MENU_CORNER_RADIUS}">
			<s:fill>
				<s:SolidColor color="{KSketchStyles.MENU_BACKGROUND_COLOR}"/>
			</s:fill>
		</s:Rect>
		<s:Group>
			<s:layout>
				<s:VerticalLayout gap="10" paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5"/>
			</s:layout>
			<s:Label text="Save this sketch?" fontSize="26"/>
			
			<s:Group width="100%">
				<s:layout>
					<s:HorizontalLayout paddingLeft="10" horizontalAlign="right"/>
				</s:layout>
				<s:Button label="Save" click="save()" fontSize="14"/>
				<s:Button label="Discard" click="cancel()" fontSize="14"/>
			</s:Group>
		</s:Group>
	</s:Group>
</s:SkinnablePopUpContainer>