<?xml version="1.0" encoding="utf-8"?>
<!--
*Copyright 2010-2012 Singapore Management University
*Developed under a grant from the Singapore-MIT GAMBIT Game Lab

*This Source Code Form is subject to the terms of the
*Mozilla Public License, v. 2.0. If a copy of the MPL was
*not distributed with this file, You can obtain one at
*http://mozilla.org/MPL/2.0/.
-->
<s:SkinnablePopUpContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
						   xmlns:s="library://ns.adobe.com/flex/spark" backgroundAlpha="0"
						   initialize="init()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:HTTPService id="httpService"
					   useProxy="false"  
					   method="POST"
					   resultFormat="text" 
					   >
		</s:HTTPService>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.Application;
			
			import air.net.URLMonitor;
			
			import sg.edu.smu.ksketch2.KSketchStyles;
			import sg.edu.smu.ksketch2.KSketchWebLinks;
			import sg.edu.smu.ksketch2.canvas.KSketch_LoginView;
			import sg.edu.smu.ksketch2.canvas.mainView.KSketch_HomeView;
			import sg.edu.smu.ksketch2.utils.KCache;
			import sg.edu.smu.ksketch2.utils.KSketchDocument;
			import sg.edu.smu.ksketch2.utils.KWebData;
			
			private var _homeView:KSketch_HomeView;
			private var monitor:URLMonitor;
			private var discardTimer:Timer;
			
			public var syncSketchArr:ArrayCollection;
			public var syncSketchDocsArr:ArrayCollection;
			public var currentUser:Object;
			public var _isConnected:Boolean;
			
			override public function open(owner:DisplayObjectContainer, modal:Boolean=false):void
			{
				_homeView = owner as KSketch_HomeView;
				super.open(owner, modal);
				
				checkConnection();
			}
			
			public function init():void
			{
				//check for differences if there are are existing sketches retrieved from the web
				var sketchNo:String;
				if(syncSketchArr.length > 1)
					sketchNo = "are " + syncSketchArr.length + " sketches";
				else
					sketchNo = "is 1 sketch";
				
				var accName:String = currentUser.u_realname;
				syncLabel.text = "There " + sketchNo + " on this device. Add to '" + accName + "' account? " ;
			}
			
			public function save():void
			{
				for(var i:int=0; i<syncSketchArr.length; i++)
				{
					var sketch:Object = syncSketchArr.getItemAt(i);
					var sketchDoc:Object = com.adobe.serialization.json.JSON.decode(String(syncSketchDocsArr.getItemAt(i)),true);
					
					//create XML and date object from JSON to create a KSketchDocument object
					var xml:XML = new XML(sketchDoc.data.fileData);
					var date:Date = new Date(sketchDoc.modified);
					var docObj:KSketchDocument = new KSketchDocument(sketchDoc.data.fileName, xml, sketchDoc.id, date, sketchDoc.data.originalName, sketchDoc.data.originalVersion, sketchDoc.data.sketchId, sketchDoc.data.changeDescription);
					
					//get thumbnaildata, filename
					var thumbnailData:String = sketch.data.thumbnailData;
					var fileName:String = sketchDoc.data.fileName;
					var objSketchDoc:Object = new Object();
					
					objSketchDoc["fileData"] = com.adobe.serialization.json.JSON.encode(KWebData.prepareSketchDoc_Sync(currentUser, docObj, thumbnailData, fileName));
				
					if(_isConnected && KSketch_LoginView._isLoggedIn)
					{
						httpService.url = KSketchWebLinks.jsonurlPostXML;
						httpService.send(objSketchDoc);
						httpService.addEventListener(FaultEvent.FAULT, faultHandler);
						httpService.addEventListener(ResultEvent.RESULT, resultHandler);
					}
					else
					{
						KSketch_HomeView._viewArr[1] = KCache.appendCacheSketch(KSketch_HomeView._viewArr[1],sketch);
						KSketch_HomeView._viewArr[2] = KCache.appendCacheSketchDocuments(KSketch_HomeView._viewArr[2],sketchDoc);
						
						prepareForDiscard();
					}
				}
			}
			
			public function checkConnection():void
			{
				//check for network connection
				monitor = new URLMonitor(new URLRequest(KSketchWebLinks.url));
				monitor.addEventListener(StatusEvent.STATUS, connectionHandler);
				monitor.start();
			}
			
			private function connectionHandler(event:StatusEvent):void
			{
				if(monitor.available)
					_isConnected = true;
				else
					_isConnected = false;
				
				monitor.stop();
				monitor.removeEventListener(StatusEvent.STATUS, connectionHandler);
			}
			
			private function resultHandler(event:ResultEvent):void
			{
				prepareForDiscard();
			}
			
			private function faultHandler(event:FaultEvent):void
			{
				_isConnected = false;
				save();
			}
			
			private function prepareForDiscard():void
			{
				discardTimer = new Timer(1000,1);
				discardTimer.addEventListener(TimerEvent.TIMER_COMPLETE, discardHandler);
				discardTimer.start();
			}
			
			private function discardHandler(event:TimerEvent):void
			{
				discardTimer.stop();
				discardTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, discardHandler);
				
				discard();
			}
			
			private function discard():void
			{
				if(_isConnected && KSketch_LoginView._isLoggedIn)
				{
					KSketch_HomeView._viewArr[1] = null;
					KSketch_HomeView._viewArr[2] = null;
					//KSketch_HomeView._viewArr[3] = "WEB";
				}
				else
				{
					if(_homeView)
					{
						_homeView._isUsingCache = true;
						_homeView._isConnected = false;
					}
					KSketch_HomeView._viewArr[3] = "CACHE";
				}
				
				KCache.writeDataToCache(KSketch_HomeView._viewArr);
				
				if(_homeView)
					_homeView.startMonitorConnection();
					
				close();
			}
			
			public function resetSyncArrays():void
			{
				trace("reset sync arr: " );
				if(syncSketchArr)
					trace("syncSketchArr: " + syncSketchArr + " , " + syncSketchArr.length);
				
				if(syncSketchDocsArr)
					trace("syncSketchDocsArr: " + syncSketchDocsArr + " , " + syncSketchDocsArr.length);
				
				if(syncSketchArr)
					syncSketchArr.removeAll();
				
				if(syncSketchDocsArr)
					syncSketchDocsArr.removeAll();
			}
			
			override public function close(commit:Boolean=false, data:*=null):void
			{
				super.close(commit, data);
				(FlexGlobals.topLevelApplication as Application).setFocus();
				
				if(_homeView)
					_homeView.prepareDataList();
			}
			
		]]>
	</fx:Script>
	<s:filters>
		<s:DropShadowFilter 
			color="{KSketchStyles.CANVAS_SHADOW_COLOR}" angle="{KSketchStyles.CANVAS_SHADOW_ANGLE}"
			alpha="{KSketchStyles.CANVAS_SHADOW_ALPHA * 0.5}"
			strength="{KSketchStyles.CANVAS_SHADOW_STRENGTH}"
			blurX="{KSketchStyles.CANVAS_SHADOW_X_DISTANCE * 0.75}"
			blurY="{KSketchStyles.CANVAS_SHADOW_Y_DISTANCE * 0.75}"/>
	</s:filters>
	<s:Rect width="100%" height="100%" radiusX="{KSketchStyles.MENU_CORNER_RADIUS}" radiusY="{KSketchStyles.MENU_CORNER_RADIUS}">
		<s:fill>
			<s:SolidColor color="{KSketchStyles.MENU_BACKGROUND_COLOR}"/>
		</s:fill>
	</s:Rect>
	<s:Group width="50%">
		<s:layout>
			<s:VerticalLayout gap="10" paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5"/>
		</s:layout>
		<s:Label id="syncLabel" fontSize="15"/>
		
		<s:Group width="100%">
			<s:layout>
				<s:HorizontalLayout paddingLeft="10" horizontalAlign="right"/>
			</s:layout>
			<s:Button label="Sync to Web" click="save()" fontSize="14"/>
			<s:Button label="Discard all" click="discard()" fontSize="14"/>
		</s:Group>
	</s:Group>
</s:SkinnablePopUpContainer>