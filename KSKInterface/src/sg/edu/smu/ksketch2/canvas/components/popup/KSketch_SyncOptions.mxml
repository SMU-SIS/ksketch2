<?xml version="1.0" encoding="utf-8"?>
<!--
*Copyright 2010-2012 Singapore Management University
*Developed under a grant from the Singapore-MIT GAMBIT Game Lab

*This Source Code Form is subject to the terms of the
*Mozilla Public License, v. 2.0. If a copy of the MPL was
*not distributed with this file, You can obtain one at
*http://mozilla.org/MPL/2.0/.
-->
<s:SkinnablePopUpContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
						   xmlns:s="library://ns.adobe.com/flex/spark" backgroundAlpha="0"
						   initialize="init()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:HTTPService id="httpService"
					   useProxy="false"  
					   method="POST"
					   resultFormat="text" 
					   >
		</s:HTTPService>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.Application;
			
			import air.net.URLMonitor;
			
			import sg.edu.smu.ksketch2.KSketchStyles;
			import sg.edu.smu.ksketch2.KSketchWebLinks;
			import sg.edu.smu.ksketch2.canvas.KSketch_LoginView;
			import sg.edu.smu.ksketch2.canvas.components.view.KSketch_HomeView;
			
			private var _homeView:KSketch_HomeView;
			private var _canvasNotice:KSketch_CanvasNotice;
			private var _monitor:URLMonitor;
			private var _monitorTimer:Timer;
			private var _isConnected:Boolean;
			private var _success:Boolean;
			private var _counterSave:int;
			private var currentObj:Object;
			private var resultArr:Array;
			private var statusArr:Array;
			private var userData:Object;
			
			public var syncSketchArr:ArrayCollection;
			public var currentUser:Object;
			
			public static var successfullySynced:Boolean;
			
			override public function open(owner:DisplayObjectContainer, modal:Boolean=false):void
			{
				successfullySynced = false;
				_homeView = owner as KSketch_HomeView;
				KSketch_SaveOptions.saveCounter = 0;
				super.open(owner, modal);
				
				userData = _homeView.userData;
				
				_canvasNotice = new KSketch_CanvasNotice();
				_canvasNotice.createDeferredContent();
			}
			
			override public function close(commit:Boolean=false, data:*=null):void
			{
				_homeView._mobileControl.writeToCache(_homeView._mobileControl.informationArr);
				
				resetSyncArrays();
				
				super.close(commit, data);
				(FlexGlobals.topLevelApplication as Application).setFocus();
				
				if(_homeView && _success)
					_homeView.updateFromWeb();
				else if(_homeView)
					_homeView.displaySketchData();
					
			}
			
			private function init():void
			{
				resultArr = new Array(syncSketchArr.length);
				statusArr = new Array(syncSketchArr.length);
				
				var sketchNo:String;
				if(syncSketchArr.length > 1)
					sketchNo = "are " + syncSketchArr.length + " sketches";
				else
					sketchNo = "is 1 sketch";
				
				var accName:String = currentUser.u_realname;
				syncLabel.text = "There " + sketchNo + " on this device. Add to '" + accName + "' account? " ;
				
				_counterSave = 0;
			}
			
			public function save():void
			{
				checkConnection();
				
				for(var i:int=0; i<syncSketchArr.length; i++)
				{
					_success = false;
					syncSketchArr.getItemAt(i).owner = currentUser.u_realname;
					syncSketchArr.getItemAt(i).owner_id = currentUser.id;
					
					if(_isConnected && KSketch_LoginView._isLoggedIn)
					{
						currentObj = syncSketchArr.getItemAt(i);
						currentObj.save = 0;
						
						var objToSend:Object = new Object();
						objToSend["fileData"] = com.adobe.serialization.json.JSON.encode(currentObj);
						objToSend["userid"] = userData.kUser.id;
						
						httpService.url = KSketchWebLinks.jsonurlPostXML;
						httpService.send(objToSend);
						httpService.addEventListener(ResultEvent.RESULT, resultHandler(currentObj));
						httpService.addEventListener(FaultEvent.FAULT, faultHandler(currentObj));
					}
					else
					{
						failToSync();
						close();
					}
						
				}
			}
			
			private function overwrite_save(obj:Object):void
			{
				var objToSend:Object = new Object();
				objToSend["fileData"] = com.adobe.serialization.json.JSON.encode(obj);
				
				httpService.url = KSketchWebLinks.jsonurlOverwritePostXML;
				httpService.send(objToSend);
				httpService.addEventListener(ResultEvent.RESULT, resultHandler);
				httpService.addEventListener(FaultEvent.FAULT, faultHandler);
				
			}
			
			public function checkConnection():void
			{
				//check for network connection
				_monitor = new URLMonitor(new URLRequest(KSketchWebLinks.url));
				_monitorTimer = new Timer(2000);
				
				_monitor.addEventListener(StatusEvent.STATUS, connectionHandler);
				_monitorTimer.addEventListener(TimerEvent.TIMER, endMonitor);
				
				_monitor.start();
				_monitorTimer.start();
			}
			
			private function endMonitor(event:TimerEvent):void
			{
				_isConnected = false;
				
				_monitor.stop();
				_monitorTimer.stop();
				
				_monitor.removeEventListener(StatusEvent.STATUS, connectionHandler);
				_monitorTimer.removeEventListener(TimerEvent.TIMER, endMonitor);
			}
			
			private function connectionHandler(event:StatusEvent):void
			{
				if(_monitor.available)
					_isConnected = true;
				else
					_isConnected = false;
				
				_monitor.stop();
				_monitorTimer.stop();
				
				_monitor.removeEventListener(StatusEvent.STATUS, connectionHandler);
				_monitorTimer.removeEventListener(TimerEvent.TIMER, endMonitor);
			}
			
			function resultHandler(obj:Object):Function {
				return function(event:ResultEvent):void {
					var resultRaw:Object = event.result;
					var result:Object = com.adobe.serialization.json.JSON.decode(resultRaw.toString());
					
					resultArr[_counterSave] = obj;
					statusArr[_counterSave] = 0;
					
					_counterSave ++;
					
					if (result.status == "success")
						_success = true;
					else if (result.status == "errorDiscrepancy")
						overwrite_save(currentObj);
					
					
					if(_counterSave == syncSketchArr.length)
						writeAllToCache();
					
				};
			}
			
			function faultHandler(obj:Object):Function {
				return function(event:FaultEvent):void {
					obj.save = -1;
					
					resultArr[_counterSave] = obj;
					statusArr[_counterSave] = -1;
					
					_counterSave ++;
					
					if(_counterSave == syncSketchArr.length)
					{
						failToSync();
						writeAllToCache();
					}
					
				};
			}
			
			private function failToSync():void
			{
				_success = false;
				
				_canvasNotice._parent = KSketch_CanvasNotice.CANVASNOTICE_FAILED_SYNC;
				_canvasNotice.open(_homeView, true);
				PopUpManager.centerPopUp(_canvasNotice);	
				
				
			}
			
			private function writeAllToCache():void
			{
				var fail:Boolean = false;
				var i:int;
				for(i=0; i<statusArr.length; i++)
				{
					if(statusArr[i] == -1)
					{
						fail = true;
						break;
					}
				}
				
				if(!fail)
				{
					for(i=0; i<resultArr.length; i++)
					{
						resultArr[i].save = 0;
						_homeView._mobileControl.addSketchToList(resultArr[i], "sync");	
					}
				}
				
				
				close();
			}
			
			private function discard():void
			{
				_homeView._mobileControl.discardSavedSketches();
				_homeView._mobileControl.writeToCache(_homeView._mobileControl.informationArr);
				_success = true;
				KSketch_HomeView.autoSaveCounter = 0;
				close();
			}
			
			public function resetSyncArrays():void
			{
				if(syncSketchArr)
					syncSketchArr.removeAll();
			}
			
		]]>
	</fx:Script>
	<s:filters>
		<s:DropShadowFilter 
			color="{KSketchStyles.CANVAS_SHADOW_COLOR}" angle="{KSketchStyles.CANVAS_SHADOW_ANGLE}"
			alpha="{KSketchStyles.CANVAS_SHADOW_ALPHA * 0.5}"
			strength="{KSketchStyles.CANVAS_SHADOW_STRENGTH}"
			blurX="{KSketchStyles.CANVAS_SHADOW_X_DISTANCE * 0.75}"
			blurY="{KSketchStyles.CANVAS_SHADOW_Y_DISTANCE * 0.75}"/>
	</s:filters>
	<s:Rect width="100%" height="100%" radiusX="{KSketchStyles.MENU_CORNER_RADIUS}" radiusY="{KSketchStyles.MENU_CORNER_RADIUS}">
		<s:fill>
			<s:SolidColor color="{KSketchStyles.MENU_BACKGROUND_COLOR}"/>
		</s:fill>
	</s:Rect>
	<s:Group width="50%">
		<s:layout>
			<s:VerticalLayout gap="10" paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5"/>
		</s:layout>
		<s:Label id="syncLabel" fontSize="15"/>
		
		<s:Group width="100%">
			<s:layout>
				<s:HorizontalLayout paddingLeft="10" horizontalAlign="right"/>
			</s:layout>
			
			<s:Button id="syncWeb" label="Sync to Web" click="save()" fontSize="14"/>
			<s:Button id="discardAll" label="Discard all" click="discard()" fontSize="14"/>
			
		</s:Group>
	</s:Group>
</s:SkinnablePopUpContainer>