<?xml version="1.0" encoding="utf-8"?>
<!--
*Copyright 2010-2012 Singapore Management University
*Developed under a grant from the Singapore-MIT GAMBIT Game Lab

*This Source Code Form is subject to the terms of the
*Mozilla Public License, v. 2.0. If a copy of the MPL was
*not distributed with this file, You can obtain one at
*http://mozilla.org/MPL/2.0/.
-->
<s:SkinnablePopUpContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
						   xmlns:s="library://ns.adobe.com/flex/spark" backgroundAlpha="0"
						   initialize="init()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:HTTPService id="httpService"
					   useProxy="false"  
					   method="POST"
					   resultFormat="text" 
					   >
		</s:HTTPService>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			
			import mx.core.FlexGlobals;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.Application;
			
			import air.net.URLMonitor;
			
			import sg.edu.smu.ksketch2.KSketchWebLinks;
			import sg.edu.smu.ksketch2.KSketchStyles;
			import sg.edu.smu.ksketch2.KSketch_User;
			import sg.edu.smu.ksketch2.canvas.mainView.KSketch_HomeView;
			import sg.edu.smu.ksketch2.utils.KSketchDocument;
			
			private var _homeView:KSketch_HomeView;
			private var _menu:KSketch_PopUp_Menu;
			private var _options:KSketch_Options;
			private var monitor:URLMonitor;
			private var _isConnected:Boolean;
			private var refreshTimer:Timer;
			
			protected var userData:Object = new Object();
			protected var webView:StageWebView = new StageWebView();
			
			public static var _currentUser:KSketch_User;
			public static var _cachedUserSketch:String;
			public static var _cachedSketchDocs:String
			
			override public function open(owner:DisplayObjectContainer, modal:Boolean=false):void
			{
				_homeView = owner as KSketch_HomeView;
				super.open(owner, modal);
			}
			
			public function init():void
			{
				var sketchNo:String;
				if(_cachedUserSketch.indexOf("%") >= 0)
					sketchNo = "are " + (_cachedUserSketch.split("%").length) + " sketches";
				else
					sketchNo = "is 1 sketch";
				
				var accName:String = _currentUser.u_realname;
				syncLabel.text = "There " + sketchNo + " on this device. Add to '" + accName + "' account? " ;
			}
			
			override public function close(commit:Boolean=false, data:*=null):void
			{
				super.close(commit, data);
				(FlexGlobals.topLevelApplication as Application).setFocus();
			}
			
			private function save():void
			{
				userData= com.adobe.serialization.json.JSON.decode(KSketch_HomeView._dup_cachedUser,true);
				
				var arrSketch:Array;
				var arrSketchDocs: Array;
				
				if(_cachedUserSketch.indexOf("%") >= 0) //if there are more than 1 sketch
				{
					arrSketch = _cachedUserSketch.split("%");
					arrSketchDocs = _cachedSketchDocs.split("%");
				}
				else
				{
					arrSketch = new Array(1);
					arrSketchDocs = new Array(1);
					
					arrSketch[0] = _cachedUserSketch;
					arrSketchDocs[0] = _cachedSketchDocs;
				}
				
				for(var i:int=0; i<arrSketch.length; i++)
				{
					var sketch:Object = com.adobe.serialization.json.JSON.decode(arrSketch[i], true);
					var sketchDoc:Object = com.adobe.serialization.json.JSON.decode(arrSketchDocs[i],true);
					
					//create XML and date object from JSON to create a KSketchDocument object
					var xml:XML = new XML(sketchDoc.data.fileData);
					var date:Date = new Date(sketchDoc.modified);
					var docObj:KSketchDocument = new KSketchDocument(sketchDoc.data.fileName, xml, sketchDoc.id, date, sketchDoc.data.originalName, sketchDoc.data.originalVersion, sketchDoc.data.changeDescription);
					
					//get thumbnaildata, filename
					var thumbnailData:String = sketch.data.thumbnailData;
					var fileName:String = sketchDoc.data.fileName;
					
					var objSketchDoc:Object = new Object();
					objSketchDoc["fileData"] = com.adobe.serialization.json.JSON.encode(prepareSketchDoc(docObj, thumbnailData, fileName));
					httpService.url = KSketchWebLinks.jsonurlPostXML;
					httpService.send(objSketchDoc);
				}
				
				_cachedUserSketch = null;
				_cachedSketchDocs = null;
				KSketch_HomeView._cachedSketchDocs = null;
				KSketch_HomeView._cachedUserSketch = null;
				KSketch_HomeView._cachedUser = null;
				
				refreshTimer = new Timer(2000,1);
				refreshTimer.addEventListener(TimerEvent.TIMER_COMPLETE, refreshDataFromWeb);
				refreshTimer.start();
			}
			
			private function refreshDataFromWeb(event:TimerEvent):void
			{
				refreshTimer.stop();
				refreshTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, refreshDataFromWeb);
				
				_homeView.retrieveDataFromWeb();
				
				close();
			}
			
			//these are the things that you need to pass to Python Backend to add in a new sketch
			protected function prepareSketchDoc(docObj:KSketchDocument, thumbnailData:String, fileName:String):Object
			{
				var data:Object = new Object();
				data.group_permissions = [];
				data.thumbnailData = thumbnailData;
				data.sketchId = ""; 
				data.p_edit = true;
				data.changeDescription = "";
				data.fileName = fileName;
				
				data.originalVersion = docObj.originalVersion;
				data.originalSketch = docObj.originalSketch;
				data.originalName = fileName;
				
				data.appver = 1.0;
				data.version = docObj.version;
				data.p_view = 1;
				data.fileData = docObj.xml.toXMLString();
				data.p_comment = true;
				data.owner = _currentUser.u_realname;
				data.owner_id = _currentUser.id;
				trace("sync owner id: " + data.owner_id);
				return data;
			}
		]]>
	</fx:Script>
	<s:filters>
		<s:DropShadowFilter 
			color="{KSketchStyles.CANVAS_SHADOW_COLOR}" angle="{KSketchStyles.CANVAS_SHADOW_ANGLE}"
			alpha="{KSketchStyles.CANVAS_SHADOW_ALPHA * 0.5}"
			strength="{KSketchStyles.CANVAS_SHADOW_STRENGTH}"
			blurX="{KSketchStyles.CANVAS_SHADOW_X_DISTANCE * 0.75}"
			blurY="{KSketchStyles.CANVAS_SHADOW_Y_DISTANCE * 0.75}"/>
	</s:filters>
	<s:Rect width="100%" height="100%" radiusX="{KSketchStyles.MENU_CORNER_RADIUS}" radiusY="{KSketchStyles.MENU_CORNER_RADIUS}">
		<s:fill>
			<s:SolidColor color="{KSketchStyles.MENU_BACKGROUND_COLOR}"/>
		</s:fill>
	</s:Rect>
	<s:Group width="50%">
		<s:layout>
			<s:VerticalLayout gap="10" paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5"/>
		</s:layout>
		<s:Label id="syncLabel" fontSize="26"/>
		
		<s:Group width="100%">
			<s:layout>
				<s:HorizontalLayout paddingLeft="10" horizontalAlign="right"/>
			</s:layout>
			<s:Button label="Sync to Web" click="save()" fontSize="14"/>
			<s:Button label="Discard all" click="close()" fontSize="14"/>
		</s:Group>
	</s:Group>
</s:SkinnablePopUpContainer>