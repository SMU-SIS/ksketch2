<?xml version="1.0" encoding="utf-8"?>
<!--
*Copyright 2010-2012 Singapore Management University
*Developed under a grant from the Singapore-MIT GAMBIT Game Lab

*This Source Code Form is subject to the terms of the
*Mozilla Public License, v. 2.0. If a copy of the MPL was
*not distributed with this file, You can obtain one at
*http://mozilla.org/MPL/2.0/.
-->
<s:SkinnablePopUpContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
						   xmlns:s="library://ns.adobe.com/flex/spark" backgroundAlpha="0"
						   initialize="init()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:HTTPService id="httpService"
					   useProxy="false"  
					   method="POST"
					   resultFormat="text" 
					   >
		</s:HTTPService>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import spark.components.Application;
			import air.net.URLMonitor;
			import sg.edu.smu.ksketch2.KSketchStyles;
			import sg.edu.smu.ksketch2.KSketchWebLinks;
			import sg.edu.smu.ksketch2.canvas.components.view.KSketch_HomeView;

			private var _homeView:KSketch_HomeView;
			private var _canvasNotice:KSketch_CanvasNotice;
			private var _monitor:URLMonitor;
			private var _monitorTimer:Timer;
			private var _isConnected:Boolean;
			private var _success:Boolean;
			private var _counterSave:int;
			private var currentObj:Object;
			private var resultArr:Array;
			private var statusArr:Array;
			private var userData:Object;
			
			public var syncSketchArr:ArrayCollection;
			public var currentUser:Object;
			public var deleteFlag:Boolean = false;
			
			public var successfullySynced:Boolean;
			
			override public function open(owner:DisplayObjectContainer, modal:Boolean=false):void
			{
				successfullySynced = false;
				_homeView = owner as KSketch_HomeView;
				KSketch_SaveOptions.saveCounter = 0;
				super.open(owner, modal);
				
				userData = _homeView.userData;
				
				_canvasNotice = new KSketch_CanvasNotice();
				_canvasNotice.createDeferredContent();
			}
			
			override public function close(commit:Boolean=false, data:*=null):void
			{
				//CAM: _homeView._mobileControl.writeToCache(_homeView._mobileControl.informationArr);
				
				resetSyncArrays();
				
				super.close(commit, data);
				(FlexGlobals.topLevelApplication as Application).setFocus();
				
				if(_homeView && _success)
					_homeView.refresh();
				//CAM: else if(_homeView)
				//CAM:	_homeView.displaySketchData();
					
			}
			
			private function init():void
			{
				this.removeEventListener(FlexEvent.INITIALIZE, init);
				
				syncLabel.setStyle("fontSize", KSketchStyles.FONT_SIZE_18);
				syncWeb.setStyle("fontSize", KSketchStyles.FONT_SIZE_14);
				discardAll.setStyle("fontSize", KSketchStyles.FONT_SIZE_14);
				
				resultArr = new Array(syncSketchArr.length);
				statusArr = new Array(syncSketchArr.length);
				
				var sketchNo:String;
				if(syncSketchArr.length > 1)
					sketchNo = syncSketchArr.length + " sketches on this device that have";
				else
					sketchNo = "1 sketch on this device that has";
				
				var accName:String = currentUser.u_realname;
				syncLabel.text = "You have " + sketchNo + " not been saved\nto your '" + accName + "' account. Do you want to save them now?" ;
				
				_counterSave = 0;
			}
			
			public function save():void
			{
				_homeView.userData.resolveConflict = 1;
				
				for(var i:int=0; i<syncSketchArr.length; i++)
				{
					_success = false;
					syncSketchArr.getItemAt(i).owner = currentUser.u_realname;
					syncSketchArr.getItemAt(i).owner_id = currentUser.id;
					
					if(true) //CAM: _isConnected && KSketch_LoginView._isLoggedIn)
					{
						currentObj = syncSketchArr.getItemAt(i);
						currentObj.save = 0;
						
						var objToSend:Object = new Object();
						objToSend["fileData"] = com.adobe.serialization.json.JSON.encode(currentObj);
						objToSend["userid"] = _homeView.userData.kUser.id;
						
						httpService.url = KSketchWebLinks.jsonurlGetXML;
						httpService.send(objToSend);
						httpService.addEventListener(ResultEvent.RESULT, resultHandler(currentObj));
						httpService.addEventListener(FaultEvent.FAULT, faultHandler(currentObj));
					}
					else
					{
						failToSync();
						close();
					}
						
				}
			}
			
			private function overwrite_save(obj:Object):void
			{
				var objToSend:Object = new Object();
				objToSend["fileData"] = com.adobe.serialization.json.JSON.encode(obj);
				
				httpService.url = KSketchWebLinks.jsonurlOverwriteGetXML;
				httpService.send(objToSend);
				httpService.addEventListener(ResultEvent.RESULT, resultHandler);
				httpService.addEventListener(FaultEvent.FAULT, faultHandler);
			}
			
			public function deleteSketch(delArr:ArrayCollection, homeView:KSketch_HomeView):void
			{
				if(!_homeView)
					_homeView = homeView;
				
				for(var i:int=0; i<delArr.length; i++)
				{
					currentObj = delArr.getItemAt(i);
					currentObj.save = 0;
					
					var objToSend:Object = new Object();
					objToSend["sketchid"] = com.adobe.serialization.json.JSON.encode(currentObj.sketchId);
					objToSend["userid"] = currentObj.owner_id;//userData.kUser.id;
					objToSend["token"] = _homeView.userData.kUser.token;
					
					httpService.url = KSketchWebLinks.jsonurlDeleteSketch;
					httpService.send(objToSend);
					httpService.addEventListener(ResultEvent.RESULT, resultHandler(currentObj));
					httpService.addEventListener(FaultEvent.FAULT, faultHandler(currentObj));
				}
			}
			
			public function checkConnection():void
			{
				//check for network connection
				_monitor = new URLMonitor(new URLRequest(KSketchWebLinks.url));
				_monitorTimer = new Timer(2000);
				
				_monitor.addEventListener(StatusEvent.STATUS, connectionHandler);
				_monitorTimer.addEventListener(TimerEvent.TIMER, endMonitor);
				
				_monitor.start();
				_monitorTimer.start();
			}
			
			private function endMonitor(event:TimerEvent):void
			{
				_isConnected = false;
				
				_monitor.stop();
				_monitorTimer.stop();
				
				_monitor.removeEventListener(StatusEvent.STATUS, connectionHandler);
				_monitorTimer.removeEventListener(TimerEvent.TIMER, endMonitor);
				
				save();
			}
			
			private function connectionHandler(event:StatusEvent):void
			{
				if(_monitor.available)
					_isConnected = true;
				else
					_isConnected = false;
				
				_monitor.stop();
				_monitorTimer.stop();
				
				_monitor.removeEventListener(StatusEvent.STATUS, connectionHandler);
				_monitorTimer.removeEventListener(TimerEvent.TIMER, endMonitor);
				
				save();
			}
			
			function resultHandler(obj:Object):Function {
				return function(event:ResultEvent):void {
					if(!deleteFlag)
					{
						var resultRaw:Object = event.result;
						var result:Object = com.adobe.serialization.json.JSON.decode(resultRaw.toString());
						
						resultArr[_counterSave] = obj;
						statusArr[_counterSave] = 0;
						
						_counterSave ++;
						
						if (result.status == "success")
							_success = true;
						else if (result.status == "errorDiscrepancy")
							overwrite_save(currentObj);
						
						
						if(_counterSave == syncSketchArr.length)
							writeAllToCache();
					}
					//CAM: else
					//CAM:	_homeView.deleteSketchDocument(obj, KFileControl.DELETE_CACHE);
				};
			}
			
			function faultHandler(obj:Object):Function {
				return function(event:FaultEvent):void {
					if(!deleteFlag)
					{
						obj.save = -1;
						
						resultArr[_counterSave] = obj;
						statusArr[_counterSave] = -1;
						
						_counterSave ++;
						
						if(_counterSave == syncSketchArr.length)
						{
							failToSync();
							writeAllToCache();
						}
					}
				};
			}
			
			private function failToSync():void
			{
				_success = false;
				
				_canvasNotice._parent = KSketch_CanvasNotice.CANVASNOTICE_FAILED_SYNC;
				_canvasNotice.open(_homeView, true);
				PopUpManager.centerPopUp(_canvasNotice);	
			}
			
			private function writeAllToCache():void
			{
				var fail:Boolean = false;
				var i:int;
				for(i=0; i<statusArr.length; i++)
				{
					if(statusArr[i] == -1)
					{
						fail = true;
						break;
					}
				}
				
				if(!fail)
				{
					for(i=0; i<resultArr.length; i++)
					{
						resultArr[i].save = 0;
						//CAM: _homeView._mobileControl.addSketchToList(resultArr[i], KFileControl.ADD_SYNC);	
					}
				}
				close();
			}
			
			private function discard():void
			{
				//CAM: _homeView._mobileControl.discardSavedSketches();
				//CAM: _homeView._mobileControl.writeToCache(_homeView._mobileControl.informationArr);
				_success = true;
				//CAM: KSketch_HomeView.autoSaveCounter = 0;
				close();
			}
			
			public function resetSyncArrays():void
			{
				if(syncSketchArr)
					syncSketchArr.removeAll();
			}
			
		]]>
	</fx:Script>
	<s:filters>
		<s:DropShadowFilter 
			color="{KSketchStyles.COLOR_BLACK}" angle="{KSketchStyles.ANGLE_50}"
			alpha="{KSketchStyles.ALPHA_06}"
			strength="{KSketchStyles.NUMBER_02}"
			blurX="{KSketchStyles.NUMBER_10}"
			blurY="{KSketchStyles.NUMBER_10}"/>
	</s:filters>
	<s:Rect width="100%" height="100%" radiusX="{KSketchStyles.NUMBER_05}" radiusY="{KSketchStyles.NUMBER_05}">
		<s:fill>
			<s:SolidColor color="{KSketchStyles.COLOR_GREY_MEDIUM}"/>
		</s:fill>
	</s:Rect>
	<s:Group width="50%">
		<s:layout>
			<s:VerticalLayout gap="{KSketchStyles.NUMBER_10}" paddingLeft="{KSketchStyles.NUMBER_05}" paddingRight="{KSketchStyles.NUMBER_05}" paddingTop="{KSketchStyles.NUMBER_05}" paddingBottom="{KSketchStyles.NUMBER_05}"/>
		</s:layout>
		<s:Label id="syncLabel"/>
		
		<s:Group width="100%">
			<s:layout>
				<s:HorizontalLayout paddingLeft="{KSketchStyles.NUMBER_10}" horizontalAlign="right"/>
			</s:layout>
			
			<s:Button id="syncWeb" label="Sync to Web" click="checkConnection()" height="{KSketchStyles.NUMBER_25}"/>
			<s:Button id="discardAll" label="Discard all" click="discard()" height="{KSketchStyles.NUMBER_25}"/>
			
		</s:Group>
	</s:Group>
</s:SkinnablePopUpContainer>