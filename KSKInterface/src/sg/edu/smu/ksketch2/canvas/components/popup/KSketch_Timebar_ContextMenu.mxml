<?xml version="1.0" encoding="utf-8"?>
<!--
*Copyright 2010-2012 Singapore Management University
*Developed under a grant from the Singapore-MIT GAMBIT Game Lab

*This Source Code Form is subject to the terms of the
*Mozilla Public License, v. 2.0. If a copy of the MPL was
*not distributed with this file, You can obtain one at
*http://mozilla.org/MPL/2.0/.
-->
<s:SkinnablePopUpContainer
			xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" xmlns:buttons="sg.edu.smu.ksketch2.canvas.components.buttons.*"
		   backgroundAlpha="0"
		   creationComplete="_initButtons()"
		   >
	<fx:Script>
		<![CDATA[
			import mx.core.FlexGlobals;
			import mx.events.FlexMouseEvent;
			
			import spark.components.Application;
			
			import sg.edu.smu.ksketch2.KSketch2;
			import sg.edu.smu.ksketch2.KSketchAssets;
			import sg.edu.smu.ksketch2.KSketchStyles;
			import sg.edu.smu.ksketch2.canvas.components.timebar.KSketch_TimeControl;
			import sg.edu.smu.ksketch2.canvas.controls.KInteractionControl;
			import sg.edu.smu.ksketch2.events.KSketchEvent;			
			
			private var _KSketch:KSketch2;
			private var _interactionControl:KInteractionControl;
			
			[Bindable]
			private var _onTop:Boolean = true;
			
			public function init(KSketchInstance:KSketch2, interactionControl:KInteractionControl):void
			{
				_KSketch = KSketchInstance;
				_interactionControl = interactionControl;
			}
			
			private function _updateInsertKey():void
			{
				if(!_interactionControl.selection)
				{	
					insertButton.enabled = false;
					return;
				}
				
				if(_interactionControl.selection.objects.length() != 1)
				{
					insertButton.enabled = false;
					return;
				}
				
				if(_interactionControl.selection.objects.getObjectAt(0).transformInterface.canInsertKey(_KSketch.time))
				{
					insertButton.enabled = true;
					return;
				}
				
				insertButton.enabled = false;
			}
			
			private function _updateRemoveKey():void
			{
				if(!_interactionControl.selection)
				{	
					removeButton.enabled = false;
					return;
				}
				
				if(_interactionControl.selection.objects.length() != 1)
				{
					removeButton.enabled = false;
					return;
				}
				
				if(_interactionControl.selection.objects.getObjectAt(0).transformInterface.canRemoveKey(_KSketch.time))
				{
					removeButton.enabled = true;
					return;
				}
				
				removeButton.enabled = false;
			}
			
			private function _updateClearKeys():void
			{
				if(!_interactionControl.selection)
				{	
					clearButton.enabled = false;
					return;
				}
				
				if(_interactionControl.selection.objects.length() != 1)
				{
					clearButton.enabled = false;
					return;
				}
				
				if(_interactionControl.selection.objects.getObjectAt(0).transformInterface.canClearKeys(_KSketch.time))
				{
					clearButton.enabled = true;
					return;
				}
				
				clearButton.enabled = false;
			}
			
			private function _initButtons():void
			{
				insertButton.init(KSketchAssets.texture_insert, KSketchAssets.texture_insert_down);
				insertButton.initSkin();
				
				removeButton.init(KSketchAssets.texture_remove , KSketchAssets.texture_remove_down);
				removeButton.initSkin();
				
				clearButton.init(KSketchAssets.texture_clear , KSketchAssets.texture_clear_down);
				clearButton.initSkin();
			}
			
			public function set position(value:int):void
			{
				if(value == KSketch_TimeControl.BAR_TOP)
				{
					arrowHead.visible = true;
					arrowHeadBottom.visible = false;
					_onTop = true;
				}
				else
				{
					arrowHead.visible = false;
					arrowHeadBottom.visible = true;
					_onTop = false;
				}
			}
			
			override public function open(owner:DisplayObjectContainer, modal:Boolean=false):void
			{
				super.open(owner, modal);
				
				_updateInsertKey();
				_updateRemoveKey();
				_updateClearKeys();
				
				addEventListener(FlexMouseEvent.MOUSE_DOWN_OUTSIDE, _handleMouseDownOutside);					
			}
			
			override public function close(commit:Boolean=false, data:*=null):void
			{
				removeEventListener(FlexMouseEvent.MOUSE_DOWN_OUTSIDE, _handleMouseDownOutside);
				(FlexGlobals.topLevelApplication as Application).setFocus();
				super.close(commit, data);
			}
			
			private function _handleMouseDownOutside(event:FlexMouseEvent):void
			{
				close();
			}
			
			private function _insertKey(event:MouseEvent = null):void
			{
				_interactionControl.begin_interaction_operation();
				_interactionControl.selection.objects.getObjectAt(0).transformInterface.insertBlankKeyFrame(_KSketch.time, _interactionControl.currentInteraction);
				_interactionControl.end_interaction_operation(null,_interactionControl.selection);
				
				var log:XML = <op/>;
				var date:Date = new Date();
				
				log.@category = "Context";
				log.@type = "Insert Key";
				log.@triggeredTime = KSketch_TimeControl.toTimeCode(_KSketch.time);
				log.@elapsedTime = KSketch_TimeControl.toTimeCode(date.time - _KSketch.logStartTime);
				_KSketch.log.appendChild(log);
				
				_KSketch.dispatchEvent(new KSketchEvent(KSketchEvent.EVENT_MODEL_UPDATED));
				
				_updateInsertKey();
				close();
			}
			
			private function _removeKey(event:MouseEvent = null):void
			{
				_interactionControl.begin_interaction_operation();
				_interactionControl.selection.objects.getObjectAt(0).transformInterface.removeKeyFrame(_KSketch.time,
																						_interactionControl.currentInteraction);
				_interactionControl.end_interaction_operation(null,_interactionControl.selection);
				
				var log:XML = <op/>;
				var date:Date = new Date();
				
				log.@category = "Context";
				log.@type = "Insert Key";
				log.@triggeredTime = KSketch_TimeControl.toTimeCode(_KSketch.time);
				log.@elapsedTime = KSketch_TimeControl.toTimeCode(date.time - _KSketch.logStartTime);
				_KSketch.log.appendChild(log);
				
				_KSketch.dispatchEvent(new KSketchEvent(KSketchEvent.EVENT_MODEL_UPDATED));
				
				_updateInsertKey();
				close();
			}
			
			private function _clearKeys(event:MouseEvent = null):void
			{
				if(!_interactionControl.selection.objects)
					return;
				
				if(_interactionControl.selection.objects.length() == 0)
					return;
				
				_interactionControl.begin_interaction_operation();
				_interactionControl.selection.objects.getObjectAt(0).transformInterface.clearAllMotionsAfterTime(_KSketch.time, _interactionControl.currentInteraction);
				_interactionControl.end_interaction_operation(null, _interactionControl.selection);
				
				var log:XML = <op/>;
				var date:Date = new Date();
				
				log.@category = "Context";
				log.@type = "Clear Future Keys";
				log.@triggeredTime = KSketch_TimeControl.toTimeCode(_KSketch.time);
				log.@elapsedTime = KSketch_TimeControl.toTimeCode(date.time - _KSketch.logStartTime);
				_KSketch.log.appendChild(log);
				
				_KSketch.dispatchEvent(new KSketchEvent(KSketchEvent.EVENT_MODEL_UPDATED));
				close();
			}
		]]>
	</fx:Script>
	<s:Group width="100%" height="100%" id="actualContentContainer" y="{_onTop?0: -arrowHead.height - arrowHeadBottom.height - calloutContents.height}">
		<s:Group id="arrowHead">
			<s:Graphic>
				<s:Path data="M 0 0 L 20 20 L -20 20 z">
					<s:fill>
						<s:SolidColor color="{KSketchStyles.CONTEXTMENU_BACKGROUND_COLOR}"/>
					</s:fill>
				</s:Path>
			</s:Graphic>
		</s:Group>
		<s:Group id="calloutContents" x="{-calloutContents.width/2}" y="{arrowHead.height}">
			<s:Rect width="100%" height="100%"
					radiusX="{KSketchStyles.CONTEXTMENU_CORNERS}"
					radiusY="{KSketchStyles.CONTEXTMENU_CORNERS}">
				<s:fill>
					<s:SolidColor color="{KSketchStyles.CONTEXTMENU_BACKGROUND_COLOR}"/>
				</s:fill>
			</s:Rect>
			<s:Group>
				<s:layout>
					<s:VerticalLayout
						paddingLeft="{KSketchStyles.CONTEXTMENU_PADDING}"
						paddingRight="{KSketchStyles.CONTEXTMENU_PADDING}"
						paddingTop="{KSketchStyles.CONTEXTMENU_PADDING}"
						paddingBottom="{KSketchStyles.CONTEXTMENU_PADDING}"/>
				</s:layout>
				<s:Group>
					<s:Rect width="100%" height="100%">
						<s:fill>
							<s:SolidColor color="{KSketchStyles.CONTEXTMENU_BACKGROUND_COLOR}"/>
						</s:fill>
					</s:Rect>
					<s:Group>
						<s:layout>
							<s:HorizontalLayout gap="2"
												paddingLeft="{KSketchStyles.CONTEXTMENU_BUTTON_PADDING}"
												paddingRight="{KSketchStyles.CONTEXTMENU_BUTTON_PADDING}"
												paddingTop="{KSketchStyles.CONTEXTMENU_BUTTON_PADDING}"
												paddingBottom="{KSketchStyles.CONTEXTMENU_BUTTON_PADDING}"/>
						</s:layout>
						<buttons:KSketch_Button
							id="insertButton"
							click="_insertKey(event)"
							width="{KSketchStyles.TIMEBAR_BUTTON_WIDTH}"
							height="{KSketchStyles.TIMEBAR_BUTTON_HEIGHT}"
							/>
						<buttons:KSketch_Button
							id="removeButton"
							click="_removeKey(event)"
							width="{KSketchStyles.TIMEBAR_BUTTON_WIDTH}"
							height="{KSketchStyles.TIMEBAR_BUTTON_HEIGHT}"
							/>
						<buttons:KSketch_Button
							id="clearButton"
							click="_clearKeys(event)"
							width="{KSketchStyles.TIMEBAR_BUTTON_WIDTH}"
							height="{KSketchStyles.TIMEBAR_BUTTON_HEIGHT}"
							/>
					</s:Group>
				</s:Group>
			</s:Group>
		</s:Group>
		<s:Group id="arrowHeadBottom" y="{arrowHead.height+calloutContents.height}">
			<s:Graphic>
				<s:Path data="M 0 20 L 20 0 L -20 0 z">
					<s:fill>
						<s:SolidColor color="{KSketchStyles.CONTEXTMENU_BACKGROUND_COLOR}"/>
					</s:fill>
				</s:Path>
			</s:Graphic>
		</s:Group>
	</s:Group>
</s:SkinnablePopUpContainer>
