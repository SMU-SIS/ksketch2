<?xml version="1.0" encoding="utf-8"?>
<!--
*Copyright 2010-2015 Singapore Management University
*Developed under a grant from the Singapore-MIT GAMBIT Game Lab

*This Source Code Form is subject to the terms of the
*Mozilla Public License, v. 2.0. If a copy of the MPL was
*not distributed with this file, You can obtain one at
*http://mozilla.org/MPL/2.0/.
-->
<s:SkinnablePopUpContainer
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" xmlns:buttons="sg.edu.smu.ksketch2.canvas.components.buttons.*"
	backgroundAlpha="0"
	initialize="_initButtons()"
	>
	<fx:Script>
		<![CDATA[
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.events.FlexMouseEvent;
			
			import spark.components.Application;
			
			import sg.edu.smu.ksketch2.KSketch2;
			import sg.edu.smu.ksketch2.KSketchAssets;
			import sg.edu.smu.ksketch2.KSketchGlobals;
			import sg.edu.smu.ksketch2.canvas.components.timebar.KSketch_TickMark_Control;
			import sg.edu.smu.ksketch2.canvas.components.timebar.KSketch_TimeControl;
			import sg.edu.smu.ksketch2.canvas.components.view.KSketch_CanvasView;
			import sg.edu.smu.ksketch2.canvas.controls.KInteractionControl;
			import sg.edu.smu.ksketch2.events.KSketchEvent;
			import sg.edu.smu.ksketch2.model.data_structures.KModelObjectList;
			import sg.edu.smu.ksketch2.model.data_structures.KSpatialKeyFrame;
			import sg.edu.smu.ksketch2.model.objects.KGroup;
			import sg.edu.smu.ksketch2.model.objects.KObject;
			import sg.edu.smu.ksketch2.utils.KSelection;	
			
			public static const CONTROLPOINT:int = 0;
			public static const KEYFRAME:int = 1;	
			public static var mode: int = KEYFRAME;
			
			private var PADDING:Number = 7.5 * KSketchGlobals.SCALE;
			
			private var _KSketch:KSketch2;
			private var _interactionControl:KInteractionControl;
			private var _timeControl:KSketch_TimeControl;
			private var _tickMarkControl:KSketch_TickMark_Control;
			private var _grabbedTickIndex:int;
			
			private var _firstDelay:Number = 300; // Initial delay (in msecs) for auto-changing minutes.
			private var _timer:Timer = new Timer(_firstDelay,0); // Timer object for auto-changing minutes.
			private var _isPrevious:Boolean = false;
			
			[Bindable]
			private var _onTop:Boolean = true;
			
			public function init(KSketchInstance:KSketch2, interactionControl:KInteractionControl, 
								 tickmarkControl:KSketch_TickMark_Control, timeControl:KSketch_TimeControl):void
			{
				_KSketch = KSketchInstance;
				_interactionControl = interactionControl;
				_timeControl = timeControl;
				_tickMarkControl = tickmarkControl;
			}
			
			private function _updateInsertKey():void
			{
				insertButton.enabled = false;
				
				//if an object is selected
				if(_interactionControl.selection)
				{
					//check if object can insert a key at that time
					//if yes, then make sure it is not in P mode
					if(_interactionControl.selection.objects.getObjectAt(0).transformInterface.canInsertKeyFrame(_KSketch.time))
						insertButton.enabled = true;	
				}
				//if no object is selected
				else
				{
					//check if there are any objects on the canvas
					//do not enable the button if there are no objects found
					if(_KSketch.root.children.length() != 0)
						insertButton.enabled = true;
				}
			}
			
			private function _updateRemoveKey():void
			{
				removeButton.enabled = false;
				
				if(_interactionControl.selection)
				{
					if(_interactionControl.selection.objects.getObjectAt(0).transformInterface.canRemoveKey(_KSketch.time))
						removeButton.enabled = true;
				}
			}
			
			private function _updateClearKeys():void
			{
				if(_KSketch.root.children.length() == 0)
				{
					clearButton.enabled = false;
					return;
				}
				
				if(!_interactionControl.selection)
				{
					//check all objects to see if there is at least 1 object that can clear key
					var objectList:KModelObjectList = _KSketch.root.children;
					for(var i:int = 0; i<objectList.length(); i++)
					{
						var object:KObject = objectList.getObjectAt(i);
						if(object.transformInterface.canClearKeys(_KSketch.time))
						{
							clearButton.enabled = true;
							return;
						}
					}
					
					clearButton.enabled = false;
					return;
				}
				
				clearButton.enabled = true;
			}
			
			private function _updateMoveFrameKeys():void
			{
				leftFrame.enabled = false;
				rightFrame.enabled = false;
				
				var isTick:Boolean = _timeControl.isATick(_timeControl.timeToX(_timeControl.time), true);
				if(isTick)
				{
					leftFrame.enabled = true;
					rightFrame.enabled = true;
				}
			}
			
			private function _initButtons():void
			{
				this.removeEventListener(FlexEvent.INITIALIZE, _initButtons);
				
				insertButton.init(KSketchAssets.texture_insert, KSketchAssets.texture_insert_down, false);
				insertButton.initSkin();
				
				removeButton.init(KSketchAssets.texture_remove , KSketchAssets.texture_remove_down, false);
				removeButton.initSkin();
				
				clearButton.init(KSketchAssets.texture_clear , KSketchAssets.texture_clear_down, false);
				clearButton.initSkin();
				
				leftFrame.init(_KSketch, _timeControl, KSketch_TimebarButton.LEFT);
				leftFrame.addEventListener(MouseEvent.MOUSE_DOWN, _mouseDownHandler_prev);
				leftFrame.addEventListener(MouseEvent.ROLL_OUT, _mouseUpHandler);
				leftFrame.addEventListener(MouseEvent.MOUSE_UP, _mouseUpHandler);
				
				rightFrame.init(_KSketch, _timeControl, KSketch_TimebarButton.RIGHT);
				rightFrame.addEventListener(MouseEvent.MOUSE_DOWN, _mouseDownHandler_next);
				rightFrame.addEventListener(MouseEvent.ROLL_OUT, _mouseUpHandler);
				rightFrame.addEventListener(MouseEvent.MOUSE_UP, _mouseUpHandler);
				
				_timer.addEventListener(TimerEvent.TIMER, _timeChange);
			}
			
			public function set position(value:int):void
			{
				if(value == KSketch_TimeControl.BAR_TOP)
				{
					arrowHead.visible = false;
					arrowHeadBottom.visible = false;
					_onTop = true;
				}
				else
				{
					arrowHead.visible = false;
					arrowHeadBottom.visible = false;
					_onTop = false;
				}
			}
			
			override public function open(owner:DisplayObjectContainer, modal:Boolean=false):void
			{
				super.open(owner, modal);
				
				_updateInsertKey();
				_updateRemoveKey();
				_updateClearKeys();
				_updateMoveFrameKeys();
				
				addEventListener(FlexMouseEvent.MOUSE_DOWN_OUTSIDE, _handleMouseDownOutside);	
			}
			
			override public function close(commit:Boolean=false, data:*=null):void
			{
				removeEventListener(FlexMouseEvent.MOUSE_DOWN_OUTSIDE, _handleMouseDownOutside);
				(FlexGlobals.topLevelApplication as Application).setFocus();
				super.close(commit, data);
			}
			
			private function _handleMouseDownOutside(event:FlexMouseEvent):void
			{
				close();
			}
			
			private function _insertKey(event:MouseEvent = null):void
			{
				var objectNum:String;
				KSketch_CanvasView.tracker.trackPageview( "/timebar/insertKey" );
				
				_interactionControl.begin_interaction_operation();
				
				var activeKey:KSpatialKeyFrame;
				
				//if an object is selected
				if(_interactionControl.selection)
				{
					objectNum = " on an object";
					//check if the object has an existing key
					activeKey = _interactionControl.selection.objects.getObjectAt(0).transformInterface.getActiveKey(_KSketch.time) as KSpatialKeyFrame;
					
					//if selection is more than one object, group the objects first
					if(_interactionControl.selection.objects.length() > 1)
					{
						var newObjectList:KModelObjectList = _KSketch.hierarchy_Group(_interactionControl.selection.objects, _KSketch.time, true, _interactionControl.currentInteraction);
						_interactionControl.selection = new KSelection(newObjectList);
					}
					
					if(mode == KEYFRAME)
					{
						if(activeKey != null && activeKey.time == _KSketch.time) //the key is a controlpoint, so change the passthrough property to be a keyframe
							_interactionControl.selection.objects.getObjectAt(0).transformInterface.changeKeyPassthrough(_KSketch.time, _interactionControl.currentInteraction, false);
						
						else //there is no active key, so insert blank keyframe at that time for the object
							_interactionControl.selection.objects.getObjectAt(0).transformInterface.insertBlankKeyFrame(_KSketch.time, _interactionControl.currentInteraction, true);
					}
					else
						_interactionControl.selection.objects.getObjectAt(0).transformInterface.insertBlankKeyFrame(_KSketch.time, _interactionControl.currentInteraction, true);	
				}
				//else if no object is selected, grab all the objects on canvas
				else
				{
					objectNum = " on all objects";
					var objectList:KModelObjectList = _KSketch.root.children;
					for(var i:int=0; i<objectList.length(); i++)
					{
						var selectedList:KModelObjectList = new KModelObjectList();
						selectedList.add(objectList.getObjectAt(i));
						_interactionControl.selection = new KSelection(selectedList);
						activeKey = _interactionControl.selection.objects.getObjectAt(0).transformInterface.getActiveKey(_KSketch.time) as KSpatialKeyFrame;
						
						if(mode == KEYFRAME)
						{
							if(activeKey != null && activeKey.time == _KSketch.time) //the key is a controlpoint, so change the passthrough property to be a keyframe
								_interactionControl.selection.objects.getObjectAt(0).transformInterface.changeKeyPassthrough(_KSketch.time,_interactionControl.currentInteraction, false);
							
							else //there is no active key, so insert blank keyframe at that time for the object
								_interactionControl.selection.objects.getObjectAt(0).transformInterface.insertBlankKeyFrame(_KSketch.time, _interactionControl.currentInteraction, true);
						}
						else
							_interactionControl.selection.objects.getObjectAt(0).transformInterface.insertBlankKeyFrame(_KSketch.time, _interactionControl.currentInteraction, true);
						
						_interactionControl.selection = null;
					}
				}
				
				_interactionControl.end_interaction_operation(null,_interactionControl.selection);
				_KSketch.dispatchEvent(new KSketchEvent(KSketchEvent.EVENT_MODEL_UPDATED));
				_updateInsertKey();
				close();
				
				//LOG
				_KSketch.logCounter ++;
				var log:XML = <Action/>;
				var date:Date = new Date();
				log.@category = "Time Bar Context Menu";
				log.@type = "Insert Key" + objectNum;
				//trace("ACTION " + _KSketch.logCounter + ": Insert key for " + objectNum);
				KSketch2.log.appendChild(log);
			}
			
			private function _removeKey(event:MouseEvent = null):void
			{
				KSketch_CanvasView.tracker.trackPageview( "/timebar/removeKey" );
				_interactionControl.begin_interaction_operation();
				_interactionControl.selection.objects.getObjectAt(0).transformInterface.removeKey(_KSketch.time, _interactionControl.currentInteraction);
				_interactionControl.end_interaction_operation(null,_interactionControl.selection);
				
				_KSketch.dispatchEvent(new KSketchEvent(KSketchEvent.EVENT_MODEL_UPDATED));
				
				_updateInsertKey();
				close();
				
				//LOG
				_KSketch.logCounter ++;
				var log:XML = <Action/>;
				var date:Date = new Date();
				log.@category = "Time Bar Context Menu";
				log.@type = "Remove Key";
				//trace("ACTION " + _KSketch.logCounter + ": Remove key from an animation");
				KSketch2.log.appendChild(log);
			}
			
			private function _clearKeys(event:MouseEvent = null):void
			{
				KSketch_CanvasView.tracker.trackPageview( "/timebar/clearKey" );
				
				_interactionControl.begin_interaction_operation();
				
				var objectList:KModelObjectList;
				if(!_interactionControl.selection)
					objectList = _KSketch.root.children;
				else
					objectList = _interactionControl.selection.objects
				
				for(var i:int=0; i<objectList.length(); i++)
				{
					var object:KObject = objectList.getObjectAt(i);
					
					if(object.transformInterface.canClearKeys(_KSketch.time))
					{
						object.visibilityControl.setVisibility(true, _KSketch.time, _interactionControl.currentInteraction, true);
						
						if(object is KGroup)
							setChildVisibility(object as KGroup);
						
						object.transformInterface.clearAllMotionsAfterTime(_KSketch.time, _interactionControl.currentInteraction);
					}
				}
				
				_interactionControl.end_interaction_operation(null, _interactionControl.selection);
				
				_KSketch.dispatchEvent(new KSketchEvent(KSketchEvent.EVENT_MODEL_UPDATED));
				close();
				
				//LOG
				_KSketch.logCounter ++;
				var log:XML = <Action/>;
				var date:Date = new Date();
				log.@category = "Time Bar Context Menu";
				log.@type = "Clear Keys";
				//trace("ACTION " + _KSketch.logCounter + ": Clear keys of animation");
				KSketch2.log.appendChild(log);
			}
			
			private function setChildVisibility(object:KGroup):void
			{
				var children:KModelObjectList = object.children;
				for(var i:int=0; i<children.length(); i++)	
				{
					var childObj:KObject = children.getObjectAt(i);
					
					if(childObj is KGroup)
						setChildVisibility(childObj as KGroup);
					else
						childObj.visibilityControl.setVisibility(true, _KSketch.time, _interactionControl.currentInteraction, true);
				}
			}
			
			private function _mouseDownHandler_prev(event:MouseEvent):void 
			{
				KSketch_CanvasView.tracker.trackPageview("/timebar/previousFrame");
				
				_isPrevious = true;
				
				_timeControl.startMoveTickMark();
				_timeControl.isATick(_timeControl.timeToX(_timeControl.time), true);
				_timeControl.moveTickMark(_isPrevious);
				
				_timer.delay = _firstDelay;
				_timer.reset();
				_timer.start();
			}
			
			private function _mouseDownHandler_next(event:MouseEvent):void 
			{
				KSketch_CanvasView.tracker.trackPageview("/timebar/nextFrame");
				
				_isPrevious = false;
				
				_timeControl.startMoveTickMark();
				_timeControl.isATick(_timeControl.timeToX(_timeControl.time), true);
				_timeControl.moveTickMark(_isPrevious);
				
				_timer.delay = _firstDelay;
				_timer.reset();
				_timer.start();
			}
			
			private function _mouseUpHandler(mevt:MouseEvent):void 
			{
				_timer.stop();
				_timeControl.endMoveTickMark();
				_grabbedTickIndex = null;
				
				//LOG
				_KSketch.logCounter ++;
				var log:XML = <Action/>;
				var date:Date = new Date();
				log.@category = "Time Bar Context Menu";
				//trace("ACTION " + _KSketch.logCounter + ": Go to " + frame);
				KSketch2.log.appendChild(log);
			}
			
			private function _timeChange(tevt:TimerEvent):void {
				
				_timeControl.moveTickMark(_isPrevious);
				
				if (_timer.currentCount > 15) {
					_timer.delay = _firstDelay/5;
					return;
				}
				if (_timer.currentCount > 5) {
					_timer.delay = _firstDelay/2;
					return;
				}
			}
			
		]]>
	</fx:Script>
	<s:Group width="100%" height="100%" id="actualContentContainer" y="{_onTop?0: -arrowHead.height - arrowHeadBottom.height - calloutContents.height}">
		<s:Group id="arrowHead">
			<s:Graphic>
				<s:Path data="M 0 0 L 20 20 L -20 20 z">
					<s:fill>
						<s:SolidColor color="{KSketchGlobals.COLOR_BLACK}"/>
					</s:fill>
				</s:Path>
			</s:Graphic>
		</s:Group>
		<s:Group id="calloutContents" x="{-calloutContents.width/2}" y="{arrowHead.height}">
			<s:Rect width="100%" height="100%"
					radiusX="{KSketchGlobals.RECT_RADIUSX}"
					radiusY="{KSketchGlobals.RECT_RADIUSY}">
				<s:fill>
					<s:SolidColor color="{KSketchGlobals.COLOR_BLACK}"/>
				</s:fill>
			</s:Rect>
			<s:Group>
				<s:layout>
					<s:VerticalLayout/>
				</s:layout>
				<s:Group>
					<s:Rect width="100%" height="100%" radiusX="5" radiusY="5">
						<s:fill>
							<s:SolidColor color="{KSketchGlobals.COLOR_BLACK}"/>
						</s:fill>
					</s:Rect>
					<s:Group>
						<s:layout>
							<s:HorizontalLayout horizontalAlign="center" verticalAlign="middle"
												paddingTop="{PADDING}" paddingBottom="{PADDING}"
												paddingLeft="{PADDING}" paddingRight="{PADDING}"/>
						</s:layout>
						<buttons:KSketch_TimebarButton
							id="leftFrame"
							/>
						<buttons:KSketch_CanvasButton
							id="insertButton"
							click="_insertKey(event)"
							/>
						<buttons:KSketch_CanvasButton
							id="removeButton"
							click="_removeKey(event)"
							/>
						<buttons:KSketch_CanvasButton
							id="clearButton"
							click="_clearKeys(event)"
							/>
						<buttons:KSketch_TimebarButton
							id="rightFrame"
							/>
					</s:Group>
				</s:Group>
			</s:Group>
		</s:Group>
		<s:Group id="arrowHeadBottom" y="{arrowHead.height+calloutContents.height}">
			<s:Graphic>
				<s:Path data="M 0 20 L 20 0 L -20 0 z">
					<s:fill>
						<s:SolidColor color="{KSketchGlobals.COLOR_BLACK}"/>
					</s:fill>
				</s:Path>
			</s:Graphic>
		</s:Group>
	</s:Group>
</s:SkinnablePopUpContainer>
