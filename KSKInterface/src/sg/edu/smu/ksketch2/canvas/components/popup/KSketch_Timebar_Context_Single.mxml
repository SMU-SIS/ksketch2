<?xml version="1.0" encoding="utf-8"?>
<!--
*Copyright 2010-2012 Singapore Management University
*Developed under a grant from the Singapore-MIT GAMBIT Game Lab

*This Source Code Form is subject to the terms of the
*Mozilla Public License, v. 2.0. If a copy of the MPL was
*not distributed with this file, You can obtain one at
*http://mozilla.org/MPL/2.0/.
-->
<s:SkinnablePopUpContainer
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" xmlns:buttons="sg.edu.smu.ksketch2.canvas.components.buttons.*"
	backgroundAlpha="0"
	initialize="_initButtons()"
	>
	<fx:Script>
		<![CDATA[
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.events.FlexMouseEvent;
			
			import spark.components.Application;
			
			import sg.edu.smu.ksketch2.KSketch2;
			import sg.edu.smu.ksketch2.KSketchStyleSheet;
			import sg.edu.smu.ksketch2.canvas.components.timebar.KSketch_TimeControl;
			import sg.edu.smu.ksketch2.canvas.components.view.KSketch_CanvasView;
			import sg.edu.smu.ksketch2.canvas.controls.KInteractionControl;
			
			private var _KSketch:KSketch2;
			private var _interactionControl:KInteractionControl;
			private var _timeControl:KSketch_TimeControl;
			
			private var _firstDelay:Number = 300; // Initial delay (in msecs) for auto-changing minutes.
			private var _timer:Timer = new Timer(_firstDelay,0); // Timer object for auto-changing minutes.
			private var _isPrevious:Boolean = false;
			
			public function init(KSketchInstance:KSketch2, interactionControl:KInteractionControl, timeControl:KSketch_TimeControl):void
			{
				_KSketch = KSketchInstance;
				_interactionControl = interactionControl;
				_timeControl = timeControl;
			}
			
			private function _initButtons():void
			{
				this.removeEventListener(FlexEvent.INITIALIZE, _initButtons);
				leftFrame.init(_KSketch, _timeControl, KSketch_Timebar_Button_Single.LEFT);
				rightFrame.init(_KSketch, _timeControl, KSketch_Timebar_Button_Single.RIGHT);
				
				leftFrame.addEventListener(MouseEvent.MOUSE_DOWN, _mouseDownHandler_prev);
				leftFrame.addEventListener(MouseEvent.ROLL_OUT, _mouseUpHandler);
				leftFrame.addEventListener(MouseEvent.MOUSE_UP, _mouseUpHandler);
				
				rightFrame.addEventListener(MouseEvent.MOUSE_DOWN, _mouseDownHandler_next);
				rightFrame.addEventListener(MouseEvent.ROLL_OUT, _mouseUpHandler);
				rightFrame.addEventListener(MouseEvent.MOUSE_UP, _mouseUpHandler);
				
				_timer.addEventListener(TimerEvent.TIMER, _timeChange);
			}
			
			override public function open(owner:DisplayObjectContainer, modal:Boolean=false):void
			{
				super.open(owner, modal);
				addEventListener(FlexMouseEvent.MOUSE_DOWN_OUTSIDE, _handleMouseDownOutside);	
			}
			
			override public function close(commit:Boolean=false, data:*=null):void
			{
				removeEventListener(FlexMouseEvent.MOUSE_DOWN_OUTSIDE, _handleMouseDownOutside);
				(FlexGlobals.topLevelApplication as Application).setFocus();
				super.close(commit, data);
			}
			
			private function _handleMouseDownOutside(event:FlexMouseEvent):void
			{
				close();
			}
			
			private function _mouseDownHandler_prev(event:MouseEvent):void 
			{
				KSketch_CanvasView.tracker.trackPageview( "/timebar/previousTime" );
				
				_isPrevious = true;
				_timeControl.time -= KSketch2.ANIMATION_INTERVAL;
				
				_timer.delay = _firstDelay;
				_timer.reset();
				_timer.start();
			}
			
			private function _mouseDownHandler_next(event:MouseEvent):void 
			{
				KSketch_CanvasView.tracker.trackPageview( "/timebar/nextTime" );
				
				_isPrevious = false;
				_timeControl.time += KSketch2.ANIMATION_INTERVAL;
				
				_timer.delay = _firstDelay;
				_timer.reset();
				_timer.start();
			}
			
			private function _mouseUpHandler(mevt:MouseEvent):void 
			{
				_timer.stop();
				
				//LOG
				_KSketch.logCounter ++;
				var log:XML = <Action/>;
				var date:Date = new Date();
				log.@category = "Time Bar Context (Single)";
				//trace("ACTION " + _KSketch.logCounter + ": Go to " + frame);
				KSketch2.log.appendChild(log);
			}
			
			private function _timeChange(tevt:TimerEvent):void {
				if(_isPrevious)
					_timeControl.time -= KSketch2.ANIMATION_INTERVAL;
				else
					_timeControl.time += KSketch2.ANIMATION_INTERVAL;
				
				if (_timer.currentCount > 15) {
					_timer.delay = _firstDelay/5;
					return;
				}
				if (_timer.currentCount > 5) {
					_timer.delay = _firstDelay/2;
					return;
				}
			}
			
		]]>
	</fx:Script>
	<s:Group x="{-magContent.width*0.5}" width="100%">
		<s:Group>
			<s:Rect id="blacklabel" width="100%" height="100%" radiusX="5" radiusY="5">
				<s:fill>
					<s:SolidColor color="{KSketchStyleSheet.MAGNIFIER_BACKGROUND_COLOR}"/>
				</s:fill>
			</s:Rect>
			<s:Group>
				<s:Group id="magContent">
					<s:layout>
						<s:HorizontalLayout horizontalAlign="center" verticalAlign="middle"
										  paddingTop="{KSketchStyleSheet.MAGNIFIER_PADDING}" paddingBottom="{KSketchStyleSheet.MAGNIFIER_PADDING}"
										  paddingLeft="{KSketchStyleSheet.MAGNIFIER_PADDING}" paddingRight="{KSketchStyleSheet.MAGNIFIER_PADDING}"/>
					</s:layout>
					<buttons:KSketch_Timebar_Button_Single
						id="leftFrame"
						width="{KSketchStyleSheet.TIMEBAR_BUTTON_WIDTH}"
						height="{KSketchStyleSheet.TIMEBAR_BUTTON_HEIGHT}"
						/>
					<buttons:KSketch_Timebar_Button_Single
						id="rightFrame"
						width="{KSketchStyleSheet.TIMEBAR_BUTTON_WIDTH}"
						height="{KSketchStyleSheet.TIMEBAR_BUTTON_HEIGHT}"
						/>
				</s:Group>
			</s:Group>
		</s:Group>
	</s:Group>
</s:SkinnablePopUpContainer>
