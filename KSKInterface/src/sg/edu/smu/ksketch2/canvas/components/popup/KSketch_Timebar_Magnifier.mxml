<?xml version="1.0" encoding="utf-8"?>
<!--
*Copyright 2010-2015 Singapore Management University
*Developed under a grant from the Singapore-MIT GAMBIT Game Lab

*This Source Code Form is subject to the terms of the
*Mozilla Public License, v. 2.0. If a copy of the MPL was
*not distributed with this file, You can obtain one at
*http://mozilla.org/MPL/2.0/.
-->
<s:SkinnablePopUpContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
						   xmlns:s="library://ns.adobe.com/flex/spark" 
						   backgroundAlpha="0">
	<fx:Script>
		<![CDATA[
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			
			import spark.components.Application;
			import spark.components.Image;
			
			import sg.edu.smu.ksketch2.KSketchGlobals;
			import sg.edu.smu.ksketch2.canvas.components.timebar.KSketch_TimeControl;
			import sg.edu.smu.ksketch2.canvas.components.view.KSketch_CanvasView;
			
			private var SCALEX:Number = 2 * KSketchGlobals.SCALE;
			private var SCALEY:Number = 2 * KSketchGlobals.SCALE;
			private var PADDINGTOP:Number = 10 * KSketchGlobals.SCALE;
			private var PADDINGBOTTOM:Number = 10 * KSketchGlobals.SCALE;
			private var CONTENT_PADDING:Number = 7.5 * KSketchGlobals.SCALE;
			private var WIDTH:Number = 50 * KSketchGlobals.SCALE;
			private var CIRCLE_OUTER:Number = 23 * KSketchGlobals.SCALE;
			private var CIRCLE_SMALL:Number = 14 * KSketchGlobals.SCALE;
			private var CIRCLE_LARGE:Number = 18 * KSketchGlobals.SCALE;
			private var LINE_THICKNESS:Number = 2 * KSketchGlobals.SCALE;
			
			private const ORIGIN:Point = new Point();
			
			private var _timeControlOrigin:Point;
			private var _referenceComponent:UIComponent;
			private var _timeControl:KSketch_TimeControl;
			private var _magnifiedData:BitmapData;
			private var _magnifiedImage:Image;
			
			private var _sourceRect:Rectangle;
			
			/**
			 * Initiates the magnifier
			 */
			public function init(referenceComponent:UIComponent, timeControl:KSketch_TimeControl):void
			{
				//Set up required variables to work with
				_referenceComponent = referenceComponent;
				_timeControl = timeControl;
				
				//Display for the magnified timeline
				_magnifiedImage = new Image();
				_magnifiedImage.scaleX = SCALEX;
				_magnifiedImage.scaleY = SCALEY;
				
				_sourceRect = new Rectangle();
				
				//This listener will help the magnifier auto manage its own vertical position
				//timeControl.addEventListener(FlexEvent.UPDATE_COMPLETE, _updateYPosition);
				addEventListener(FlexEvent.UPDATE_COMPLETE, _updateYPosition);
			}
			
			//Sets the Y position according to the timebar's canvas placement
			private function _updateYPosition(event:Event):void
			{
				if(!indicator)
					createDeferredContent();
				
				//Find the top and bottom vertical limit for placing this pop up
				//Limits are in Stage Y coordinate system.
				var topLimit:Number = _referenceComponent.localToGlobal(ORIGIN).y;
				var bottomLimit:Number = topLimit+_referenceComponent.height;
				
				//Find the top left hand corner of the time control component
				_timeControlOrigin = _timeControl.localToGlobal(ORIGIN);
				
				var appBounds:Rectangle;
				if(_timeControl.position == KSketch_TimeControl.BAR_TOP)
				{
					//Place this popup at top, below the time bar
					y = topLimit + PADDINGTOP;	
					
					appBounds = magContents.getBounds(FlexGlobals.topLevelApplication as Application);
					
					indicator.graphics.clear();
					indicatorTouch.graphics.clear();
					indicator.graphics.lineStyle(LINE_THICKNESS,KSketchGlobals.COLOR_BLACK);
					indicatorTouch.graphics.beginFill(KSketchGlobals.COLOR_BLACK);
					indicatorTouch.graphics.drawCircle(0, -25, 14);
					indicatorTouch.graphics.endFill();
					indicatorTouch.graphics.beginFill(0xffffff);
					indicatorTouch.graphics.drawCircle(0, -25, 11);
					indicatorTouch.graphics.endFill();
					
					var labelBounds:Rectangle = timeLabel.getBounds(this);
					
					indicator.graphics.moveTo(0,-appBounds.y);
					indicator.graphics.lineTo(0, labelBounds.y);
					
				}
				else
				{
					//Place this popup above the timebar at the bottom of the canvas
					y = bottomLimit - height - PADDINGBOTTOM;
					
					//Compute and draw the indicator
					var maxY:Number = (FlexGlobals.topLevelApplication as Application).height - y;
					appBounds = _timeControl.timeControlContents.getBounds(FlexGlobals.topLevelApplication as Application);
					
					indicator.graphics.clear();
					indicatorTouch.graphics.clear();
					indicator.graphics.lineStyle(LINE_THICKNESS,KSketchGlobals.COLOR_BLACK);
					indicatorTouch.graphics.beginFill(KSketchGlobals.COLOR_BLACK);
					indicatorTouch.graphics.drawCircle(0, maxY-CIRCLE_OUTER, CIRCLE_LARGE);
					indicatorTouch.graphics.endFill();
					indicatorTouch.graphics.beginFill(0xffffff);
					indicatorTouch.graphics.drawCircle(0, maxY-CIRCLE_OUTER, CIRCLE_SMALL);
					indicatorTouch.graphics.endFill();
					
					var finalHeight_1:Number = height;
					var finalHeight_2:Number = maxY;
					
					if(KSketch_CanvasView.isWebViewer)
					{
						finalHeight_1 += 20;
						finalHeight_2 -= 20;
						
						blacklabel.alpha = 0;
						timeLabel.alpha = 0;
						frameLabel.alpha = 0;
					}
					
					indicator.graphics.moveTo(0, finalHeight_1);
					indicator.graphics.lineTo(0, finalHeight_2);
				}
				
				_sourceRect.width = WIDTH;
				_sourceRect.height = _timeControl.contentGroup.height/2.5;
				_sourceRect.y = 0;
				_magnifiedData = new BitmapData(_sourceRect.width, _sourceRect.height);
				
				//Refresh the time and make sure the xPosition is correct in the case of resizes
				showTime(KSketch_TimeControl.toTimeCode(_timeControl.time),
				_timeControl.timeToFrame(_timeControl.time),
				_timeControl.timeToX(_timeControl.time));
			}
			
			/**
			 * Displays the time on the magnifier
			 */
			public function showTime(toShowTime:String, frameNumber:int, xPos:Number):void
			{
				if(!_timeControlOrigin)
					return;
				
				x = xPos + _timeControlOrigin.x;
				timeLabel.text = toShowTime;
				frameLabel.text = "frame "+frameNumber.toString();
			}
			
			/**
			 * Magnifies the area around given xPos
			 */
			public function magnify(xPos:Number):void
			{	
				/* Disable magnifier
				//create a black line for current time in magnifying glass
				var bitmapdata:BitmapData = new BitmapData(MAGNIFIER_CURRENTTIMELABEL_THICKNESS, _timeControl.height);
				var currentTimeLabel:Label = new Label();
				bitmapdata.draw(currentTimeLabel);
				bitmapdata.colorTransform(bitmapdata.rect, new ColorTransform(1,0,0,0,0,0,0,0));
				
				var bd:BitmapData = new BitmapData(_timeControl.width, _timeControl.height);
				bd.draw(_timeControl.contentGroup);
				
				//Copy out the pixels from the source
				_sourceRect.x = xPos-(_sourceRect.width*0.5);
				_magnifiedData = new BitmapData(_magnifiedData.width, _magnifiedData.height ,true, KSketchGlobals.COLOR_BLACK);
				_magnifiedData.copyPixels(bd, _sourceRect, ORIGIN);
				_magnifiedData.merge(bitmapdata, bd.rect, new Point(WIDTH/2,0),
					MAGNIFIER_CURRENTTIMELABEL_COLOR_MULTIPLIER,
					MAGNIFIER_CURRENTTIMELABEL_COLOR_MULTIPLIER,
					MAGNIFIER_CURRENTTIMELABEL_COLOR_MULTIPLIER,
					MAGNIFIER_CURRENTTIMELABEL_COLOR_MULTIPLIER);
				
				//Display the source
				if(!_magnifiedImage.parent)
					magContents.addElementAt(_magnifiedImage,0);	
				*/
				
				_magnifiedImage.source = _magnifiedData;
			}
			
			//Close the magnification
			public function removeMagnification():void
			{
				if(_magnifiedImage.parent)
					magContents.removeElement(_magnifiedImage);
			}
			
			override public function open(owner:DisplayObjectContainer, modal:Boolean=false):void
			{
				super.open(owner, modal);
				_updateYPosition(null);
			}
			
			//KSKETCH-SYNPHNE
			public function setToTime(time:Number):void
			{
				showTime(KSketch_TimeControl.toTimeCode(time), _timeControl.timeToFrame(time), _timeControl.timeToX(time));
			}
		]]>
	</fx:Script>
	<!--
	-magContents.width*0.5 causes the objects to be centered at 0
	-->
	<s:Group x="{-magContents.width*0.5}" width="100%">
		<s:Rect id="blacklabel" width="100%" height="100%" radiusX="{KSketchGlobals.RECT_RADIUSX}" radiusY="{KSketchGlobals.RECT_RADIUSY}">
			<s:fill>
				<s:SolidColor color="{KSketchGlobals.COLOR_BLACK}" />
			</s:fill>
		</s:Rect>
		<s:Group id="timeframelabel">
			<s:Graphic/>
			<s:Group id="magContents">
				<s:layout>
					<s:VerticalLayout horizontalAlign="center" verticalAlign="bottom"
									  paddingTop="{CONTENT_PADDING}" paddingBottom="{CONTENT_PADDING}"
									  paddingLeft="{CONTENT_PADDING}" paddingRight="{CONTENT_PADDING}"/>
				</s:layout>
				<s:Group width="105%">
					<s:layout>
						<s:HorizontalLayout/>
					</s:layout>
					<s:Label id="timeLabel" color="{KSketchGlobals.COLOR_WHITE}" fontSize="{KSketchGlobals.FONT_SIZE_10}"/>
					<s:Group width="100%"/>
					<s:Label id="frameLabel" color="{KSketchGlobals.COLOR_WHITE}" fontSize="{KSketchGlobals.FONT_SIZE_10}"/>
				</s:Group>
			</s:Group>
		</s:Group>
		<s:Group id="indicator" x="{magContents.width*0.5}">
			<s:Graphic id="indicatorTouch" />
		</s:Group>
	</s:Group>
</s:SkinnablePopUpContainer>