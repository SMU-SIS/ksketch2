<?xml version="1.0" encoding="utf-8"?>
<!--
*Copyright 2010-2012 Singapore Management University
*Developed under a grant from the Singapore-MIT GAMBIT Game Lab

*This Source Code Form is subject to the terms of the
*Mozilla Public License, v. 2.0. If a copy of the MPL was
*not distributed with this file, You can obtain one at
*http://mozilla.org/MPL/2.0/.
-->
<s:SkinnablePopUpContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" backgroundAlpha="0"
		 xmlns:buttons="sg.edu.smu.ksketch2.canvas.components.buttons.*"
		 creationComplete="_initButtons()">
	<fx:Script>
		<![CDATA[
			import mx.core.FlexGlobals;
			import mx.events.FlexMouseEvent;
			
			import spark.components.Application;
			
			import sg.edu.smu.ksketch2.KSketch2;
			import sg.edu.smu.ksketch2.KSketchAssets;
			import sg.edu.smu.ksketch2.KSketchStyles;
			import sg.edu.smu.ksketch2.canvas.controls.KInteractionControl;
			import sg.edu.smu.ksketch2.canvas.controls.interactors.widgetstates.KWidgetInteractorManager;
			import sg.edu.smu.ksketch2.model.data_structures.KModelObjectList;
			import sg.edu.smu.ksketch2.model.objects.KGroup;
			import sg.edu.smu.ksketch2.operators.operations.KCompositeOperation;
			import sg.edu.smu.ksketch2.utils.KSelection;
			
			private var _KSketch:KSketch2;
			private var _interactionControl:KInteractionControl;
			
			[Bindable]
			private var xPosFactor:Number = 2;
			
			public function init(KSketchInstance:KSketch2, interactionControl:KInteractionControl,
								 widgetManager:KWidgetInteractorManager):void
			{
				_KSketch = KSketchInstance;
				_interactionControl = interactionControl;
			}
			
			private function _initButtons():void
			{
				groupButton.init(KSketchAssets.texture_group, KSketchAssets.texture_group_down);
				groupButton.initSkin();
				
				ungroupButton.init(KSketchAssets.texture_ungroup , KSketchAssets.texture_ungroup_down);
				ungroupButton.initSkin();
				
				moveCenterButton.init(KSketchAssets.texture_center , KSketchAssets.texture_center_down);
				moveCenterButton.initSkin();
			}
			
			override public function open(owner:DisplayObjectContainer, modal:Boolean=false):void
			{
				super.open(owner, modal);
				
				//STEP 1: COMPUTE PLACING BOUNDS FIRST
				var canvasBounds:Rectangle = owner.parent.getBounds(FlexGlobals.topLevelApplication as DisplayObject);
				var widgetPosition:Point = owner.localToGlobal(new Point());
				var xPos:Number = widgetPosition.x;
				var xVariant:Number;
				//Do the left test
				if(xPos < (canvasBounds.width/4))
				{
					xVariant = xPos - width;
					if(xVariant < 0)
						xPos = (width/2) + 50;
				}
				else if(xPos > (canvasBounds.width*0.75))//do the right test
				{
					//USE THE APPLICATION WIDTH. THE PARENT CONTAINER WILL EXPAND ITSELF IF THE WIDGET IS NEAR THE EDGES
					//AND THEN THE TESTING WILL FAIL BECAUSE THE BOUNDARY KEEPS INCREASING ITS SIZE
					xVariant = xPos + (FlexGlobals.topLevelApplication as DisplayObject).width;

					if(xVariant > (FlexGlobals.topLevelApplication as DisplayObject).width)
						xPos = (FlexGlobals.topLevelApplication as DisplayObject).width - (width/2) - 50;
				}

				x = xPos;
					
				var topLimit:Number = canvasBounds.y;
				var bottomLimit:Number = canvasBounds.y + canvasBounds.height - height;
				var heightVariant:Number = height + 25
				var yPos:Number =  owner.y - heightVariant;
				
				if(yPos < topLimit)
					yPos = owner.y + height + heightVariant;
				
				y = yPos;
				
				_updateGroup();
				_updateUngroup();
				addEventListener(FlexMouseEvent.MOUSE_DOWN_OUTSIDE, _closeContextMenu);
			}
			
			private function _closeContextMenu(event:FlexMouseEvent):void
			{
				close();
			}
			
			override public function close(commit:Boolean=false, data:*=null):void
			{
				super.close(commit, data);
				removeEventListener(FlexMouseEvent.MOUSE_DOWN_OUTSIDE, _closeContextMenu);
				(FlexGlobals.topLevelApplication as Application).setFocus();
			}
			
			private function _updateGroup():void
			{
				if(_interactionControl.selection.objects.length() > 1)
					groupButton.enabled = true;
				else
					groupButton.enabled = false;
			}
			
			private function _group(event:MouseEvent = null):void
			{
				_interactionControl.begin_interaction_operation();
				var op:KCompositeOperation = new KCompositeOperation();
				var newObjectList:KModelObjectList = _KSketch.hierarchy_Group(_interactionControl.selection.objects, _KSketch.time, false, op);	
				_interactionControl.selection = new KSelection(newObjectList);
				_interactionControl.end_interaction_operation(op, _interactionControl.selection);
				close();
			}
			
			private function _updateUngroup():void
			{
				ungroupButton.enabled = false;
				
				if(_interactionControl.selection.objects.length() > 0)
				{
					var objects:KModelObjectList = _interactionControl.selection.objects;
					
					for(var i:int = 0; i<objects.length(); i++)
					{
						if(objects.getObjectAt(i).parent != _KSketch.root || objects.getObjectAt(i) is KGroup)
							ungroupButton.enabled = true;
					}
				}
			}
			
			private function _ungroup(event:MouseEvent = null):void
			{
				_interactionControl.begin_interaction_operation();
				var op:KCompositeOperation = new KCompositeOperation();
				var newObjectList:KModelObjectList = _KSketch.hierarchy_Ungroup(_interactionControl.selection.objects, _KSketch.time, op);	
				_interactionControl.selection = new KSelection(newObjectList);
				_interactionControl.end_interaction_operation(op, _interactionControl.selection);
				close();
			}
			
			private function _updateMoveCenter():void
			{
				if(_interactionControl.selection.objects.length() != 1)
					moveCenterButton.enabled = false;
				else
					moveCenterButton.enabled = true;
			}
			
			private function _moveCenter(event:MouseEvent = null):void
			{
//				_widget.
			}
		]]>
	</fx:Script>
	
	<s:Group id="calloutContents" x="{-calloutContents.width/2}">
		<s:Rect width="100%" height="100%" radiusX="{KSketchStyles.CONTEXTMENU_CORNERS}" radiusY="{KSketchStyles.CONTEXTMENU_CORNERS}">
			<s:fill>
				<s:SolidColor color="{KSketchStyles.CONTEXTMENU_BACKGROUND_COLOR}"/>
			</s:fill>
		</s:Rect>
		<s:Group>
			<s:layout>
				<s:VerticalLayout paddingLeft="{KSketchStyles.CONTEXTMENU_PADDING}"
								  paddingRight="{KSketchStyles.CONTEXTMENU_PADDING}"
								  paddingTop="{KSketchStyles.CONTEXTMENU_PADDING}"
								  paddingBottom="{KSketchStyles.CONTEXTMENU_PADDING}"/>
			</s:layout>
			<s:Group>
				<s:Rect width="100%" height="100%">
					<s:fill>
						<s:SolidColor color="{KSketchStyles.APP_BACKGROUND_COLOR}"/>
					</s:fill>
				</s:Rect>
				<s:Group>
					<s:layout>
						<s:HorizontalLayout gap="2"
											paddingLeft="{KSketchStyles.CONTEXTMENU_BUTTON_PADDING}"
											paddingRight="{KSketchStyles.CONTEXTMENU_BUTTON_PADDING}"
											paddingTop="{KSketchStyles.CONTEXTMENU_BUTTON_PADDING}"
											paddingBottom="{KSketchStyles.CONTEXTMENU_BUTTON_PADDING}"/>
					</s:layout>
					<buttons:KSketch_Button
						id="groupButton"
						click="_group(event)"
						width="{KSketchStyles.TIMEBAR_BUTTON_WIDTH}"
						height="{KSketchStyles.TIMEBAR_BUTTON_HEIGHT}"
						/>
					<buttons:KSketch_Button
						id="ungroupButton"
						click="_ungroup(event)"
						width="{KSketchStyles.TIMEBAR_BUTTON_WIDTH}"
						height="{KSketchStyles.TIMEBAR_BUTTON_HEIGHT}"
						/>
					<buttons:KSketch_Button
						id="moveCenterButton"
						width="{KSketchStyles.TIMEBAR_BUTTON_WIDTH}"
						height="{KSketchStyles.TIMEBAR_BUTTON_HEIGHT}"
						/>
<!--					<buttons:KSketch_Button
						id="copyButton"
						width="{KSketchStyles.TIMEBAR_BUTTON_WIDTH}"
						height="{KSketchStyles.TIMEBAR_BUTTON_HEIGHT}"
						/>
					<buttons:KSketch_Button
						id="pasteButton"
						width="{KSketchStyles.TIMEBAR_BUTTON_WIDTH}"
						height="{KSketchStyles.TIMEBAR_BUTTON_HEIGHT}"
						/>
					<buttons:KSketch_Button
						id="cutButton"
						width="{KSketchStyles.TIMEBAR_BUTTON_WIDTH}"
						height="{KSketchStyles.TIMEBAR_BUTTON_HEIGHT}"
						/>-->
				</s:Group>
			</s:Group>
		</s:Group>
	</s:Group>
</s:SkinnablePopUpContainer>
