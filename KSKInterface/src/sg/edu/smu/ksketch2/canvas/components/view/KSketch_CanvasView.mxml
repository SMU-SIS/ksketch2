<?xml version="1.0" encoding="utf-8"?>
<!--
*Copyright 2010-2012 Singapore Management University
*Developed under a grant from the Singapore-MIT GAMBIT Game Lab

*This Source Code Form is subject to the terms of the
*Mozilla Public License, v. 2.0. If a copy of the MPL was
*not distributed with this file, You can obtain one at
*http://mozilla.org/MPL/2.0/.
-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" actionBarVisible="false" 
		xmlns:view="sg.edu.smu.ksketch2.canvas.components.view.*"
		xmlns:controls="sg.edu.smu.ksketch2.canvas.controls.*"
		xmlns:buttons="sg.edu.smu.ksketch2.canvas.components.buttons.*" 
		xmlns:transformWidget2="sg.edu.smu.ksketch2.canvas.components.transformWidget.*"
		xmlns:timebar="sg.edu.smu.ksketch2.canvas.components.timebar.*"
		initialize="_initCanvas()"
		add="_checkForImageData()"
		addedToStage="_addedToStageHandler()"
		creationPolicy="all"
		destructionPolicy="never" 
		viewActivate="_enterView_ProcessData()"
		>
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.graphics.codec.JPEGEncoder;
			import mx.utils.Base64Encoder;
			
			import spark.events.ViewNavigatorEvent;
			import spark.managers.PersistenceManager;
			
			import sg.edu.smu.ksketch2.KSketch2;
			import sg.edu.smu.ksketch2.KSketchStyles;
			import sg.edu.smu.ksketch2.canvas.components.popup.KSketch_Feedback_Message;
			import sg.edu.smu.ksketch2.canvas.components.popup.KSketch_Options;
			import sg.edu.smu.ksketch2.canvas.components.popup.KSketch_OverwriteSaveOptions;
			import sg.edu.smu.ksketch2.canvas.components.popup.KSketch_PopUp_Menu;
			import sg.edu.smu.ksketch2.canvas.components.popup.KSketch_SaveOptions;
			import sg.edu.smu.ksketch2.canvas.components.popup.KSketch_Timebar_ContextMenu;
			import sg.edu.smu.ksketch2.canvas.components.popup.KSketch_Timebar_Magnifier;
			import sg.edu.smu.ksketch2.canvas.components.timebar.KSketch_TickMark_Control;
			import sg.edu.smu.ksketch2.canvas.components.timebar.KSketch_TimeSkip_Button;
			import sg.edu.smu.ksketch2.canvas.components.transformWidget.KSketch_Widget_Component;
			import sg.edu.smu.ksketch2.canvas.controls.KInteractionControl;
			import sg.edu.smu.ksketch2.canvas.controls.KMobileControl;
			import sg.edu.smu.ksketch2.canvas.controls.interactors.KCanvasInteractorManager;
			import sg.edu.smu.ksketch2.canvas.controls.interactors.widgetstates.KWidgetInteractorManager;
			import sg.edu.smu.ksketch2.operators.operations.KCompositeOperation;
			//web:import sg.edu.smu.ksketch2.utils.GoogleAnalytics;
			import sg.edu.smu.ksketch2.utils.KIOEvent;
			import sg.edu.smu.ksketch2.utils.KSketchDocument;
			
			public static const PLUG_IN:String = "PlugIn";
			
			[Bindable]
			public static var isPlayer:Boolean = false;
			
			[Bindable]
			public static var isMobile:Boolean = false;
			
			[Bindable]
			public static var isWeb:Boolean = true;
			
			public static var createNewSketch:Boolean = false;
			
			private var userData:Object = new Object();
			private var _imageData:BitmapData;
			private var _needToProcessData:Boolean;
			public var _currentDocument:KSketchDocument;
			
			private var _KSketch:KSketch2;
			public var _mobileControl:KMobileControl;
			public var _interactionControl:KInteractionControl;
			public var _isNewSketch:Boolean = true;
			
			//Pop Ups
			private var _feedbackPopUp:KSketch_Feedback_Message;
			private var _menuPopUp:KSketch_PopUp_Menu;
			private var _options:KSketch_Options;
			private var _saveOptions:KSketch_SaveOptions;
			private var _overwriteSaveOptions:KSketch_OverwriteSaveOptions;
			private var _magnifier:KSketch_Timebar_Magnifier;
			private var _keyMenu:KSketch_Timebar_ContextMenu;
			private var _transitionHelper:KWidgetInteractorManager;
			private var _selectionHelper:KCanvasInteractorManager;
			
			//web:private var _googleAnalytics:GoogleAnalytics;
			
			protected var persistanceManager:PersistenceManager = new PersistenceManager();
			
			//Starting up is hopefully done in the following stages
			//Should not depend on the events beingfired in the correct sequence all the time
			//addedToStage: _initCanvas (if needed)
			//add: _checkForImageData() //This can be done during addedToStage too
			//viewActivated: _viewActivateHandler - loads data/ insert images 
			//				A lot of times, this happens first, so we go back to addedToStage
			
			private function _addedToStageHandler():void
			{
				//initialize GoogleAnalytics
				//web:_googleAnalytics = new GoogleAnalytics();
				//web:_googleAnalytics.init(this);
			}
			
			private function _saveHandler(event:KIOEvent):void
			{
				if(event.saveData)
				{
					if(ExternalInterface.available)
						ExternalInterface.call("saveKSketchFile", event.saveData.toXMLString());
				}
			}
			
			private function _loadHandler(event:KIOEvent):void
			{
				if(ExternalInterface.available)
					ExternalInterface.call("initLoad");
			}
			
			//Starts up the canvas in the following order
			public function _initCanvas():void
			{	
				userData = data;
				
				//We shouldn't make a new ksketch if one already exists
				if(_KSketch)
					return;
				
				//Determine platform type, mobile / not mobile
				//If os is a mac or windows, it is desktop.
				if ((Capabilities.os.toLowerCase().indexOf("mac") == -1) &&
					(Capabilities.os.toLowerCase().indexOf("windows") == -1))
					isMobile = true;
				else
					isMobile = false;
				
				isWeb = (Capabilities.playerType == PLUG_IN);
				if(isWeb)
				{
					Security.allowDomain("*");
					
					this.addEventListener(KIOEvent.EVENT_SAVE, _saveHandler);
					this.addEventListener(KIOEvent.EVENT_LOAD, _loadHandler);
					
					if(ExternalInterface.available)
					{
						ExternalInterface.addCallback("save", saveTrigger);
						ExternalInterface.addCallback("load", loadTrigger);
					}
					else
						throw new Error("Load call back not added");
				}
				
				if(!isWeb)
					_mobileControl = userData.mobileControl;
				
				//Actual setting up starts here
				_KSketch = new KSketch2();
				_interactionControl = new KInteractionControl(_KSketch, timeControl);			
				//Initiate pop ups
				_feedbackPopUp = new KSketch_Feedback_Message();
				_feedbackPopUp.init(this);
				_options = new KSketch_Options();
				_keyMenu = new KSketch_Timebar_ContextMenu();
				_saveOptions = new KSketch_SaveOptions();
				_overwriteSaveOptions = new KSketch_OverwriteSaveOptions();
				_menuPopUp = new KSketch_PopUp_Menu();
				_magnifier = new KSketch_Timebar_Magnifier();
				_magnifier.init(canvas_component, timeControl);
				_options.init(this, _menuPopUp);
				
				//Initiate the controls
				if(!isPlayer)
				{
					//web:_transitionHelper = new KWidgetInteractorManager(_KSketch, _interactionControl, widget, modelDisplay, _googleAnalytics);
					//web:_selectionHelper = new KCanvasInteractorManager(_KSketch, _interactionControl, canvas_region, modelDisplay, _feedbackPopUp, _googleAnalytics);
					
					_transitionHelper = new KWidgetInteractorManager(_KSketch, _interactionControl, widget, modelDisplay);
					_selectionHelper = new KCanvasInteractorManager(_KSketch, _interactionControl, canvas_region, modelDisplay, motionDisplay, _feedbackPopUp);
				}
				
				if(!isWeb)
				{
					_saveOptions.init(this, _menuPopUp, _overwriteSaveOptions);
					_overwriteSaveOptions.init(this, _saveOptions);
					//web:_menuPopUp.init(canvas_component, this, _options, _saveOptions, _KSketch, _interactionControl, _selectionHelper, _feedbackPopUp, _googleAnalytics);
					_menuPopUp.init(canvas_component, this, _options, _saveOptions, _KSketch, _interactionControl, _selectionHelper, _feedbackPopUp);
					_saveOptions.createDeferredContent();
				}
				else
					_menuPopUp.init(canvas_component, this, _options, null, _KSketch, _interactionControl, _selectionHelper, _feedbackPopUp);
					//web:_menuPopUp.init(canvas_component, this, _options, null, _KSketch, _interactionControl, _selectionHelper, _feedbackPopUp, _googleAnalytics);
				
				_options.createDeferredContent();
				_menuPopUp.createDeferredContent();
				//_menuPopUp.alpha = 0;
				
				var timeTickControl:KSketch_TickMark_Control = new KSketch_TickMark_Control(_KSketch, timeControl,_interactionControl);
				//web:timeControl.init(_KSketch, timeTickControl, _transitionHelper, _magnifier, _keyMenu, _googleAnalytics);
				timeControl.init(_KSketch, timeTickControl, _transitionHelper, _magnifier, _keyMenu);
				
				//web:leftTimeJumper.init(_KSketch, timeControl, KSketch_TimeSkip_Button.LEFT, _googleAnalytics);
				//web:rightTimeJumper.init(_KSketch, timeControl, KSketch_TimeSkip_Button.RIGHT, _googleAnalytics);
				leftTimeJumper.init(_KSketch, timeControl, KSketch_TimeSkip_Button.LEFT);
				rightTimeJumper.init(_KSketch, timeControl, KSketch_TimeSkip_Button.RIGHT);
				
				//initialize keymenu after TimeControl is set up
				//web:_keyMenu.init(_KSketch, _interactionControl, timeControl, _googleAnalytics);
				_keyMenu.init(_KSketch, _interactionControl, timeControl);
				_keyMenu.createDeferredContent();
				
				modelDisplay.init(_KSketch, _interactionControl);
				motionDisplay.init(_KSketch, _interactionControl);
				
				//This is the layer that blocks interaction whenever the app is playing
				//web:playButton.init(timeControl, _interactionControl,_KSketch, _menuPopUp, _googleAnalytics);
				playButton.init(timeControl, _interactionControl,_KSketch, _menuPopUp);
				_interactionControl.reset();
				
				_options.applyPreferences();
				_magnifier.open(this);
				
				//Fail safe measure
				if(_needToProcessData)
					_enterView_ProcessData();
			}
			
			private function _checkForImageData():void
			{
				if(navigator.poppedViewReturnedObject)
					_imageData = navigator.poppedViewReturnedObject.object as BitmapData;
			}
			
			//The view activate handler should only be used solely for loading/generating ksketch objects
			//Interface initiation should be done when the view has been added to stage
			//This should be the last process of canvas start up.
			private function _enterView_ProcessData():void
			{	
				//Fail safe measure, we cannot depend on start up events firing properly
				//Cancel activate handler if the events screwed up their order
				if(!_KSketch)
				{
					_needToProcessData = true;
					return;
				}
				else
					_needToProcessData = false;
				
				if(_imageData)
				{
					//Add image here
					if(_imageData)
					{
						var op:KCompositeOperation = new KCompositeOperation();
						_KSketch.object_Add_Image(_imageData, _KSketch.time, op);
						_interactionControl.addToUndoStack(op);
					}
					_imageData = null;
				}
				else
				{
					if(userData != null)
					{
						if(userData.kSketchDocument && userData.kSketchDocument is KSketchDocument)
						{
							_isNewSketch = false;
							_currentDocument = userData.kSketchDocument as KSketchDocument;
							
							if(_currentDocument.xml.scene.children().length() > 0)
								_KSketch.generateSceneFromXML(new XML(_currentDocument.xml.scene));
						}	
					}
					
					data = null;
					_KSketch.time = 0;
					_KSketch.beginSession();
				}
				
				_options.applyPreferences();
				_magnifier.open(this);
			}
			
			public function saveSketch(confirmSave:Boolean):Object
			{
				//if save is confirmed, set all interaction selection to null
				//to generate an "unselected" thumbnail
				if(confirmSave)
				{
					if(_interactionControl.selection)
						_interactionControl.selection = null;
				}
				
				//get existing KSketchDocument object
				var kSketchDocumentObj:KSketchDocument = (createReturnObject() as KSketchDocument); 
				
				if(kSketchDocumentObj != null)
				{
					userData.name = kSketchDocumentObj.name.toString();
					
					var fileData:String = kSketchDocumentObj.xml.toXMLString();
					
					userData.kSketchDocument = kSketchDocumentObj;
					
					var thumbnailLength:int = userData.kSketchDocument.xml.child("thumbnail").length();
					
					if(thumbnailLength > 0)
					{
						var recentThumbnail:int = thumbnailLength - 1;
						userData.thumbnailData = userData.kSketchDocument.xml.child("thumbnail")[recentThumbnail].@data.toString();
					}else
					{
						userData.thumbnailData = userData.kSketchDocument.xml.child("thumbnail").@data.toString();
					}
					
					return userData;
				}
				
				return null;
			}
			
			public function exit():void
			{
				viewDeactivated();
				KSketch_SaveOptions.canvasDirty = false;
				KSketch_SaveOptions.saveCounter = 0;
				
				KSketch_HomeView.canvasTimerDisabled = true;
				if(KSketch_HomeView.hasBeenNotified)
					KSketch_HomeView.hasBeenNotified = true;
				
				navigator.pushView(KSketch_HomeView, userData);
			}
			
			public function viewDeactivated():void
			{
				//comment out these two lines to get toolbar stay when it is reactivated.
				_options.close();
				_menuPopUp.close();
				_feedbackPopUp.close();
				_magnifier.close();
			}
			
			override public function createReturnObject():Object
			{
				var saveXML:XML;
				var sceneXML:XML;
				var logXML:XML;
				
				if(_currentDocument != null)
				{
					saveXML = _currentDocument.xml;
					delete(saveXML.scene);
					sceneXML = _KSketch.sceneXML;
					logXML = _KSketch.sessionLog;
				}
				else
				{
					sceneXML = _KSketch.sceneXML;
					logXML = _KSketch.sessionLog;
					saveXML = logXML;
				}
				
				if(0 < sceneXML.children().length())
				{
					var thumbnailData:BitmapData = modelDisplay.getThumbnail(0);
					var encoder:JPEGEncoder = new JPEGEncoder();
					var base64Encoder:Base64Encoder = new Base64Encoder();
					base64Encoder.encodeBytes(encoder.encode(thumbnailData));
					
					var thumbnailNode:XML = <thumbnail data=""/>;
					thumbnailNode.@data = base64Encoder.toString();	
					saveXML.appendChild(thumbnailNode);
					
					saveXML.appendChild(sceneXML);
				}
				
				if(0 < logXML.children().length())
				{
					if(!saveXML.log)
						saveXML.appendChild(<log/>);
				}
				
				if(_currentDocument == null)
				{
					//(name:String, xml:XML, id:String,  date:Date, originalName:String, version:int, sketchId:int, description:String = "")
					_currentDocument = new KSketchDocument("",saveXML,"",new Date(),"", 0,-1,"");
				}
				else
				{
					_currentDocument.xml = saveXML;
				}
				
				return _currentDocument;
			}
			
			public function loadFile(readData:XML):void
			{
				_KSketch.reset();
				_interactionControl.reset();
				_interactionControl.dispatchEvent(new Event(KInteractionControl.EVENT_UNDO_REDO));
				
				if(readData.scene.children().length() > 0)
					_KSketch.generateSceneFromXML(new XML(readData.scene));
			}
			
			public function saveTrigger():void
			{
				var xml:XML = saveFile(modelDisplay.getThumbnail(0));
				if(xml)
					dispatchEvent(new KIOEvent(KIOEvent.EVENT_SAVE, xml, true));
			}
			
			public function loadTrigger(fileData:String):void
			{
				loadFile(new XML(fileData));
			}
			
			public function saveFile(bitmapData:BitmapData):XML
			{
				var saveXML:XML = <KSketch date=""/>;
				var sceneXML:XML = _KSketch.sceneXML;
				
				if(0 < sceneXML.children().length())
				{
					var encoder:JPEGEncoder = new JPEGEncoder();
					var base64Encoder:Base64Encoder = new Base64Encoder();
					base64Encoder.encodeBytes(encoder.encode(bitmapData));
					
					var thumbnailNode:XML = <thumbnail data=""/>;
					thumbnailNode.@data = base64Encoder.toString();							
					
					saveXML.appendChild(thumbnailNode);
					saveXML.appendChild(sceneXML);
					saveXML.appendChild(<log/>);
					
					saveXML.@date = new Date().toString();
					return saveXML;
				}
				else
					return null;
			}
			
		]]>
	</fx:Script>
	
	<s:Group width="100%" height="100%" id="mainCanvas">
		<s:layout>
			<s:VerticalLayout gap="0" id="mainCanvasLayout"/>
		</s:layout>
		<!-- Timebar-->
		<s:Group id="timebar_group" width="100%"  depth="1">
			<s:filters>
				<s:DropShadowFilter color="{KSketchStyles.TIMEBAR_SHADOW_COLOR}" angle="{KSketchStyles.TIMEBAR_SHADOW_ANGLE}"
									alpha="{KSketchStyles.TIMEBAR_SHADOW_ALPHA}"
									strength="{KSketchStyles.TIMEBAR_SHADOW_STRENGTH}"
									blurX="{KSketchStyles.TIMEBAR_SHADOW_DISTANCE}"
									blurY="{KSketchStyles.TIMEBAR_SHADOW_DISTANCE}"/>
			</s:filters>
			<s:Rect width="100%" height="100%">
				<s:fill>
					<s:SolidColor color="{KSketchStyles.TIMEBAR_BACKGROUND_COLOR}"/>
				</s:fill>
			</s:Rect>
			<s:Group width="100%">
				<s:layout>
					<s:HorizontalLayout
						horizontalAlign="center"
						gap="{KSketchStyles.TIMEBAR_LAYOUT_GAP}"
						paddingLeft="{KSketchStyles.TIMEBAR_LAYOUT_PADDING_HORIZONTAL}"
						paddingRight="{KSketchStyles.TIMEBAR_LAYOUT_PADDING_HORIZONTAL}"
						paddingTop="{KSketchStyles.TIMEBAR_LAYOUT_PADDING_VERTICAL}"
						paddingBottom="{KSketchStyles.TIMEBAR_LAYOUT_PADDING_VERTICAL}"/>
				</s:layout>
				
				<s:Group>
					<s:Group>
						<s:layout><s:VerticalLayout/></s:layout>
						<s:Group>
							<s:layout><s:HorizontalLayout verticalAlign="middle"/></s:layout>
							
							<s:Group>
								<s:layout><s:VerticalLayout/></s:layout>
								<timebar:KSketch_TimeSkip_Button
									id="leftTimeJumper"
									width="{KSketchStyles.TIMEBAR_BUTTON_WIDTH}" height="{KSketchStyles.TIMEBAR_BUTTON_HEIGHT}"/>
							</s:Group>
							
							
							<buttons:KSketch_Play_Button
								click="playButton.playToggle()"
								id="playButton"
								width="{KSketchStyles.TIMEBAR_PLAY_BUTTON_WIDTH}" height="{KSketchStyles.TIMEBAR_PLAY_BUTTON_HEIGHT}"/>
							
							<s:Group>
								<s:layout><s:VerticalLayout/></s:layout>
								<timebar:KSketch_TimeSkip_Button
									id="rightTimeJumper"
									width="{KSketchStyles.TIMEBAR_BUTTON_WIDTH}" height="{KSketchStyles.TIMEBAR_BUTTON_HEIGHT}"/>
							</s:Group>
						</s:Group>
					</s:Group>
				</s:Group>	
				<s:Group width="9"/>
				<timebar:KSketch_TimeControl id="timeControl"/>
				<s:Group width="2"/>
			</s:Group>
		</s:Group>
		<!-- End of Timebar -->
		
		<s:Group id="canvas_component" width="100%" height="100%" depth="0">
			<s:Rect left="-1" right="-1" top="-1" bottom="-1">
				<s:fill>
					<s:SolidColor color="{KSketchStyles.APP_BACKGROUND_COLOR}"/>
				</s:fill>
			</s:Rect>
			<!-- For show, all the visual elements that the user wont be able to "touch"-->
			<s:Group width="100%" height="100%">
				<s:layout>
					<s:VerticalLayout horizontalAlign="center" verticalAlign="middle"/>
				</s:layout>
				<s:Group id="drawing_stage" height="92%" maxHeight="{Capabilities.screenResolutionX*0.7}"
						 width="{drawing_stage.height/9*16}">
					<s:Rect width="100%" height="100%">
						<s:fill>
							<s:SolidColor color="{KSketchStyles.CANVAS_PAPER_COLOR}"/>
						</s:fill>
						<s:stroke>
							<s:SolidColorStroke color="{KSketchStyles.CANVAS_BORDER_COLOR}"
												weight="{KSketchStyles.CANVAS_BORDER_WEIGHT}"/>
						</s:stroke>
						<s:filters>
							<s:DropShadowFilter 
								color="{KSketchStyles.CANVAS_SHADOW_COLOR}" angle="{KSketchStyles.CANVAS_SHADOW_ANGLE}"
								alpha="{KSketchStyles.CANVAS_SHADOW_ALPHA}"
								strength="{KSketchStyles.CANVAS_SHADOW_STRENGTH}"
								blurX="{KSketchStyles.CANVAS_SHADOW_X_DISTANCE}"
								blurY="{KSketchStyles.CANVAS_SHADOW_Y_DISTANCE}"/>
						</s:filters>
					</s:Rect>
					<!-- The model display displays the objects in the model -->
					<view:KMotionDisplay id="motionDisplay" scaleX="{drawing_stage.width/KSketch2.CANONICAL_WIDTH}"
										 scaleY="{drawing_stage.height/KSketch2.CANONICAL_HEIGHT}"/>
					<view:KModelDisplay id="modelDisplay" scaleX="{drawing_stage.width/KSketch2.CANONICAL_WIDTH}"
										scaleY="{drawing_stage.height/KSketch2.CANONICAL_HEIGHT}"/>					
				</s:Group> 
			</s:Group>
			
			<!-- Things inside this group really dispatches gesture events-->
			<s:Group width="100%" height="100%">
				<s:Group id="canvas_region" width="100%" height="100%">
					<s:Rect width="100%" height="100%" alpha="0">
						<s:fill>
							<s:SolidColor color="0x000000"/>
						</s:fill>
					</s:Rect>
				</s:Group>
				<transformWidget2:KSketch_Widget_Component id="widget" visible="false"/>
			</s:Group>
		</s:Group>
	</s:Group>
</s:View>