<?xml version="1.0" encoding="utf-8"?>
<!--
*Copyright 2010-2012 Singapore Management University
*Developed under a grant from the Singapore-MIT GAMBIT Game Lab

*This Source Code Form is subject to the terms of the
*Mozilla Public License, v. 2.0. If a copy of the MPL was
*not distributed with this file, You can obtain one at
*http://mozilla.org/MPL/2.0/.
-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" actionBarVisible="false" 
		xmlns:view="sg.edu.smu.ksketch2.canvas.components.view.*"
		xmlns:controls="sg.edu.smu.ksketch2.canvas.controls.*"
		xmlns:buttons="sg.edu.smu.ksketch2.canvas.components.buttons.*" 
		xmlns:transformWidget2="sg.edu.smu.ksketch2.canvas.components.transformWidget.*"
		xmlns:timebar="sg.edu.smu.ksketch2.canvas.components.timebar.*"
		addedToStage="initializeTrackerForWeb()"
		initialize="_initCanvas(false)"
		add="_checkForImageData()"
		creationPolicy="all"
		destructionPolicy="auto" 
		viewActivate="_enterView_ProcessData()" xmlns:ns="http://www.google.com/analytics/2009"
		>
	<fx:Script>
		<![CDATA[
			import com.google.analytics.AnalyticsTracker;
			import com.google.analytics.GATracker;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.events.FlexEvent;
			import mx.graphics.codec.JPEGEncoder;
			import mx.utils.Base64Encoder;
			
			import spark.events.ViewNavigatorEvent;
			import spark.managers.PersistenceManager;
			
			import data.KSketch_DataListItem;
			
			import sg.edu.smu.ksketch2.KSketch2;
			import sg.edu.smu.ksketch2.KSketchStyles;
			import sg.edu.smu.ksketch2.canvas.components.popup.KSketch_Feedback_Message;
			import sg.edu.smu.ksketch2.canvas.components.popup.KSketch_Help;
			import sg.edu.smu.ksketch2.canvas.components.popup.KSketch_Options;
			import sg.edu.smu.ksketch2.canvas.components.popup.KSketch_OverwriteSaveOptions;
			import sg.edu.smu.ksketch2.canvas.components.popup.KSketch_PopUp_Menu;
			import sg.edu.smu.ksketch2.canvas.components.popup.KSketch_SaveOptions;
			import sg.edu.smu.ksketch2.canvas.components.popup.KSketch_SharingOptions;
			import sg.edu.smu.ksketch2.canvas.components.popup.KSketch_Timebar_Context_Double;
			import sg.edu.smu.ksketch2.canvas.components.popup.KSketch_Timebar_Context_Single;
			import sg.edu.smu.ksketch2.canvas.components.popup.KSketch_Timebar_Magnifier;
			import sg.edu.smu.ksketch2.canvas.components.timebar.KSketch_TickMark_Control;
			import sg.edu.smu.ksketch2.canvas.components.timebar.KSketch_TimeSkip_Button;
			import sg.edu.smu.ksketch2.canvas.components.transformWidget.KSketch_Widget_Component;
			import sg.edu.smu.ksketch2.canvas.controls.KInteractionControl;
			import sg.edu.smu.ksketch2.canvas.controls.KSketch_CacheControl;
			import sg.edu.smu.ksketch2.canvas.controls.interactors.KCanvasInteractorManager;
			import sg.edu.smu.ksketch2.canvas.controls.interactors.widgetstates.KWidgetInteractorManager;
			import sg.edu.smu.ksketch2.events.KSketchEvent;
			import sg.edu.smu.ksketch2.model.data_structures.KModelObjectList;
			import sg.edu.smu.ksketch2.model.objects.KGroup;
			import sg.edu.smu.ksketch2.model.objects.KObject;
			import sg.edu.smu.ksketch2.operators.operations.KCompositeOperation;
			import sg.edu.smu.ksketch2.utils.KIOEvent;
			
			public static const PLUG_IN:String = "PlugIn";
			
			[Bindable]
			public static var isPlayer:Boolean = false;
			
			[Bindable]
			public static var isMobile:Boolean = false;
			
			[Bindable]
			public static var isWeb:Boolean = true;
			
			[Bindable]
			public static var isWebViewer:Boolean = false;
			
			public static var createNewSketch:Boolean = false;
			
			public static var tracker:AnalyticsTracker = null;
			
			private var userData:Object = new Object();
			private var _imageData:BitmapData;
			private var _needToProcessData:Boolean;
			private var _groupObjectsList:ArrayCollection;
			public var _currentDocument:KSketch_DataListItem;
			public var enableLog:Boolean = false;
			
			private var _KSketch:KSketch2;
			private var _cacheControl:KSketch_CacheControl;
			public var _interactionControl:KInteractionControl;
			public var _isNewSketch:Boolean = true;
			
			//Pop Ups
			private var _feedbackPopUp:KSketch_Feedback_Message;
			private var _menuPopUp:KSketch_PopUp_Menu;
			private var _options:KSketch_Options;
			private var _shareOptions:KSketch_SharingOptions;
			private var _help:KSketch_Help;
			private var _saveOptions:KSketch_SaveOptions;
			private var _overwriteSaveOptions:KSketch_OverwriteSaveOptions;
			private var _magnifier:KSketch_Timebar_Magnifier;
			private var _contextDouble:KSketch_Timebar_Context_Double;
			private var _contextSingle:KSketch_Timebar_Context_Single;
			private var _transitionHelper:KWidgetInteractorManager;
			private var _selectionHelper:KCanvasInteractorManager;
			
			protected var persistanceManager:PersistenceManager = new PersistenceManager();
			
			//Starting up is hopefully done in the following stages
			//Should not depend on the events beingfired in the correct sequence all the time
			//addedToStage: _initCanvas (if needed)
			//add: _checkForImageData() //This can be done during addedToStage too
			//viewActivated: _viewActivateHandler - loads data/ insert images 
			//				A lot of times, this happens first, so we go back to addedToStage
			private function _saveHandler(event:KIOEvent):void
			{
				if(event.saveData)
				{
					if(ExternalInterface.available)
						ExternalInterface.call("saveKSketchFile", event.saveData.toXMLString());
				}
			}
			
			private function _loadHandler(event:KIOEvent):void
			{
				if(ExternalInterface.available)
					ExternalInterface.call("initLoad");
			}
			
			public function initializeTrackerForWeb():void
			{
				if(isWeb && !tracker)
					tracker = new GATracker(this, "UA-47832938-1", "AS3", false);
			}
			
			//Starts up the canvas in the following order
			public function _initCanvas(isView:Boolean):void
			{	
				trace("init canvas");
				scaleView();
				
				this.removeEventListener(FlexEvent.INITIALIZE, _initCanvas);
				
				userData = data;
				
				isWebViewer = isView;
				
				if(!tracker && !isWeb)
					tracker = new GATracker(this, "UA-47832938-1", "AS3", true);
				
				//We shouldn't make a new ksketch if one already exists
				if(_KSketch)
					return;
				
				//Determine platform type, mobile / not mobile
				//If os is a mac or windows, it is desktop.
				if ((Capabilities.os.toLowerCase().indexOf("mac") == -1) &&
					(Capabilities.os.toLowerCase().indexOf("windows") == -1))
					isMobile = true;
				else
					isMobile = false;
				
				isWeb = (Capabilities.playerType == PLUG_IN);
				if(isWeb)
				{
					Security.allowDomain("*");
					
					this.addEventListener(KIOEvent.EVENT_SAVE, _saveHandler);
					this.addEventListener(KIOEvent.EVENT_LOAD, _loadHandler);
					
					if(ExternalInterface.available)
					{
						ExternalInterface.addCallback("save", saveTrigger);
						ExternalInterface.addCallback("load", loadTrigger);
					}
					else
						throw new Error("Load call back not added");
				}
				
				if(!isWeb)
					_cacheControl = userData.cacheControl;
				
				//Actual setting up starts here
				_KSketch = new KSketch2();
				_interactionControl = new KInteractionControl(_KSketch, timeControl);			
				//Initiate pop ups
				_feedbackPopUp = new KSketch_Feedback_Message();
				_feedbackPopUp.init(this);
				_options = new KSketch_Options();
				_shareOptions = new KSketch_SharingOptions;
				_help = new KSketch_Help();
				_contextDouble = new KSketch_Timebar_Context_Double();
				_contextSingle = new KSketch_Timebar_Context_Single();
				_saveOptions = new KSketch_SaveOptions();
				_overwriteSaveOptions = new KSketch_OverwriteSaveOptions();
				_menuPopUp = new KSketch_PopUp_Menu();
				_magnifier = new KSketch_Timebar_Magnifier();
				_magnifier.init(canvas_component, timeControl);
				_help.init(this, _menuPopUp);
				_options.init(this, _menuPopUp);
				_shareOptions.init(this, _menuPopUp);
				
				//Initiate the controls
				if(!isPlayer)
				{
					_transitionHelper = new KWidgetInteractorManager(_KSketch, _interactionControl, widget, modelDisplay);
					_selectionHelper = new KCanvasInteractorManager(_KSketch, _interactionControl, canvas_region, modelDisplay, motionDisplay, _feedbackPopUp);
				}
				
				if(!isWeb)
				{
					_saveOptions.init(this, _menuPopUp, _overwriteSaveOptions);
					_overwriteSaveOptions.init(this, _saveOptions);
					
					_menuPopUp.init(canvas_component, this, _options, _shareOptions, _help, _saveOptions, _KSketch, _interactionControl, _selectionHelper, _feedbackPopUp);
					_saveOptions.createDeferredContent();
				}
				else
					_menuPopUp.init(canvas_component, this, _options, _shareOptions, _help, null, _KSketch, _interactionControl, _selectionHelper, _feedbackPopUp);
				
				_options.createDeferredContent();
				_shareOptions.createDeferredContent();
				_help.createDeferredContent();
				_menuPopUp.createDeferredContent();
				
				if(isWebViewer)
					_menuPopUp.alpha = 0;
				
				var timeTickControl:KSketch_TickMark_Control = new KSketch_TickMark_Control(_KSketch, timeControl,_interactionControl);
				timeControl.init(_KSketch, timeTickControl, _transitionHelper, _magnifier, _contextDouble, _contextSingle);
				
				leftTimeJumper.init(_KSketch, timeControl, KSketch_TimeSkip_Button.LEFT);
				rightTimeJumper.init(_KSketch, timeControl, KSketch_TimeSkip_Button.RIGHT);
				
				_contextDouble.init(_KSketch, _interactionControl, timeTickControl, timeControl);
				_contextDouble.createDeferredContent();
				
				_contextSingle.init(_KSketch, _interactionControl, timeControl);
				_contextSingle.createDeferredContent();
				
				modelDisplay.init(_KSketch, _interactionControl);
				motionDisplay.init(_KSketch, _interactionControl);
				
				//This is the layer that blocks interaction whenever the app is playing
				playButton.init(timeControl, _interactionControl,_KSketch, _menuPopUp);
				
				_interactionControl.reset();
				
				_options.applyPreferences();
				_magnifier.open(this);
				
				//Fail safe measure
				if(_needToProcessData)
					_enterView_ProcessData();
			}
			
			private function _checkForImageData():void
			{
				if(navigator.poppedViewReturnedObject)
					_imageData = navigator.poppedViewReturnedObject.object as BitmapData;
			}
			
			//The view activate handler should only be used solely for loading/generating ksketch objects
			//Interface initiation should be done when the view has been added to stage
			//This should be the last process of canvas start up.
			private function _enterView_ProcessData():void
			{	
				if(!tracker && !isWeb)
					tracker = new GATracker(this, "UA-47832938-1", "AS3", false);
				
				_KSketch.time = 0;
				_KSketch.beginSession();
				
				//Fail safe measure, we cannot depend on start up events firing properly
				//Cancel activate handler if the events screwed up their order
				if(!_KSketch)
				{
					_needToProcessData = true;
					return;
				}
				else
					_needToProcessData = false;
				
				if(_imageData)
				{
					//Add image here
					if(_imageData)
					{
						var op:KCompositeOperation = new KCompositeOperation();
						_KSketch.object_Add_Image(_imageData, _KSketch.time, op);
						_interactionControl.addToUndoStack(op);
					}
					_imageData = null;
				}
				else
				{
					if(userData != null)
					{
						if(userData.sketchData && userData.sketchData is KSketch_DataListItem)
						{
							_isNewSketch = false;
							_currentDocument = userData.sketchData as KSketch_DataListItem;
							
							if(_currentDocument.fileData.scene.children().length() > 0)
								_KSketch.generateSceneFromXML(new XML(_currentDocument.fileData.scene));
						}	
					}
					
					data = null;
				}
				
				_groupObjectsList = new ArrayCollection();
				_getGroupObjectsOnLoad(_KSketch.root.children);
				
				if(_groupObjectsList.length > 0)
				{
					//sort array by smallest id to largest
					var dataSortField:SortField = new SortField();
					dataSortField.name = "id";
					var numericDataSort:Sort = new Sort();
					numericDataSort.fields = [dataSortField];
					_groupObjectsList.sort = numericDataSort;
					_groupObjectsList.refresh();
					
					for(var x:int=0; x<_groupObjectsList.length; x++)
						modelDisplay.view_addObject(_groupObjectsList.getItemAt(x) as KObject);
					
					// broadcast that the model has been updated 
					_KSketch.dispatchEvent(new KSketchEvent(KSketchEvent.EVENT_MODEL_UPDATED, _KSketch.root));
				}
				
				_groupObjectsList.removeAll();
				
				_options.applyPreferences();
				_magnifier.open(this);
			}
			
			private function _getGroupObjectsOnLoad(list:KModelObjectList):void
			{
				if(list.length() > 0)
				{
					for(var i:int=0; i<list.length(); i++)
					{
						if(list.getObjectAt(i) is KGroup)
						{
							for(var x:int=0; x<list.length(); x++)
							{
								if(list.getObjectAt(x) is KGroup)
									_getGroupObjectsOnLoad((list.getObjectAt(x) as KGroup).children);
							}
							_groupObjectsList.addItem(list.getObjectAt(i));
						}
					}
				}
			}
			
			public function saveSketch(confirmSave:Boolean):Object
			{
				//if save is confirmed, set all interaction selection to null
				//to generate an "unselected" thumbnail
				if(confirmSave)
				{
					if(_interactionControl.selection)
						_interactionControl.selection = null;
				}
				
				//get existing KSketchDocument object
				var sketchData:KSketch_DataListItem = (createReturnObject() as KSketch_DataListItem); 
				
				if(sketchData != null)
				{
					userData.name = sketchData.fileName;
					userData.lowerFileName = sketchData.fileName.toString().toLowerCase();
					
					var fileData:String = sketchData.fileData.toXMLString();
					
					userData.sketchData = sketchData;
					userData.fileData = fileData;
					var thumbnailLength:int = sketchData.fileData.child("thumbnail").length();
					
					if(thumbnailLength > 0)
					{
						var recentThumbnail:XML = sketchData.fileData.child("thumbnail")[thumbnailLength - 1];
						userData.thumbnailData = recentThumbnail.@data.toString();
					}
					else
					{
						userData.thumbnailData = sketchData.fileData.child("thumbnail").@data.toString();
					}
					
					return userData;
				}
				
				return null;
			}
			
			public function exit():void
			{
				viewDeactivated();
				_saveOptions.canvasDirty = false;
				KSketch_SaveOptions.saveCounter = 0;
				
				navigator.pushView(KSketch_HomeView, userData);
				
				System.pauseForGCIfCollectionImminent();
			}
			
			public function viewDeactivated():void
			{
				//comment out these two lines to get toolbar stay when it is reactivated.
				_options.close();
				_help.close();
				_menuPopUp.close();
				_feedbackPopUp.close();
				_magnifier.close();
			}
			
			override public function createReturnObject():Object
			{
				var saveXML:XML;
				var sceneXML:XML;
				var logXML:XML;
				
				if(_currentDocument != null)
				{
					delete(_currentDocument.fileData.scene);
				}
				
				sceneXML = _KSketch.sceneXML;
				
				if(!enableLog)
					_KSketch.beginSession();
				
				logXML = _KSketch.sessionLog;
				saveXML = logXML;
				
				if(0 < sceneXML.children().length())
				{
					var thumbnailData:BitmapData = modelDisplay.getThumbnail(0);
					var encoder:JPEGEncoder = new JPEGEncoder();
					var base64Encoder:Base64Encoder = new Base64Encoder();
					base64Encoder.encodeBytes(encoder.encode(thumbnailData));
					
					var thumbnailNode:XML = <thumbnail data=""/>;
					thumbnailNode.@data = base64Encoder.toString();	
					saveXML.appendChild(thumbnailNode);
					
					saveXML.appendChild(sceneXML);
				}
				
				if(0 < logXML.children().length())
				{
					if(!saveXML.log)
						saveXML.appendChild(<log/>);
				}
				
				if(_currentDocument == null)
				{
					//(name:String, xml:XML, id:String,  date:Date, originalName:String, version:int, sketchId:int, description:String = "")
					_currentDocument = new KSketch_DataListItem(saveXML.toXMLString(), "", "", "", "", "", -1, 0);
				}
				else
				{
					_currentDocument.fileData = saveXML;
				}
				
				return _currentDocument;
			}
			
			public function loadFile(readData:XML):void
			{
				_KSketch.reset();
				_interactionControl.reset();
				_interactionControl.dispatchEvent(new Event(KInteractionControl.EVENT_UNDO_REDO));
				
				if(readData.scene.children().length() > 0)
					_KSketch.generateSceneFromXML(new XML(readData.scene));
			}
			
			public function saveTrigger():void
			{
				var xml:XML = saveFile(modelDisplay.getThumbnail(0));
				if(xml)
					dispatchEvent(new KIOEvent(KIOEvent.EVENT_SAVE, xml, true));
			}
			
			public function loadTrigger(fileData:String):void
			{
				loadFile(new XML(fileData));
			}
			
			public function saveFile(bitmapData:BitmapData):XML
			{
				var saveXML:XML = <KSketch date=""/>;
				var sceneXML:XML = _KSketch.sceneXML;
				
				if(0 < sceneXML.children().length())
				{
					var encoder:JPEGEncoder = new JPEGEncoder();
					var base64Encoder:Base64Encoder = new Base64Encoder();
					base64Encoder.encodeBytes(encoder.encode(bitmapData));
					
					var thumbnailNode:XML = <thumbnail data=""/>;
					thumbnailNode.@data = base64Encoder.toString();							
					
					saveXML.appendChild(thumbnailNode);
					saveXML.appendChild(sceneXML);
					saveXML.appendChild(<log/>);
					
					saveXML.@date = new Date().toString();
					return saveXML;
				}
				else
					return null;
			}
			
			public function get cacheControl():KSketch_CacheControl
			{
				return _cacheControl;
			}
			
			private function scaleView():void
			{
				KSketchStyles.setView();
				
				if(KSketchStyles.aspectRatio != 1.33)
				{
					drawing_stage.percentHeight = 82;
					drawing_stage.width = drawing_stage.height/9*16;
				}
				else if(KSketchStyles.width > 1280 && KSketchStyles.aspectRatio == 1.33)
				{
					drawing_stage.percentHeight = 80;
					drawing_stage.width = drawing_stage.height/9*16;
				}
			}
			
		]]>
	</fx:Script>
	
	<s:Group width="100%" height="100%" id="mainCanvas">
		<s:layout>
			<s:VerticalLayout gap="0" id="mainCanvasLayout"/>
		</s:layout>
		<!-- Timebar-->
		<s:Group id="timebar_group" width="100%"  depth="1">
			<s:filters>
				<s:DropShadowFilter color="{KSketchStyles.COLOR_BLACK}" angle="{KSketchStyles.ANGLE_50}"
									alpha="{KSketchStyles.ALPHA_06}"
									strength="{KSketchStyles.NUMBER_01}"
									blurX="{KSketchStyles.NUMBER_12}"
									blurY="{KSketchStyles.NUMBER_12}"/>
			</s:filters>
			<s:Rect width="100%" height="100%">
				<s:fill>
					<s:SolidColor color="{KSketchStyles.COLOR_GREY_MEDIUM}"/>
				</s:fill>
			</s:Rect>
			<s:Group width="100%">
				<s:layout>
					<s:HorizontalLayout
						horizontalAlign="center"
						gap="{KSketchStyles.NUMBER_04}"
						paddingLeft="{KSketchStyles.NUMBER_05}"
						paddingRight="{KSketchStyles.NUMBER_05}"
						paddingTop="{KSketchStyles.NUMBER_05}"
						paddingBottom="{KSketchStyles.NUMBER_05}"/>
				</s:layout>
				
				<s:Group>
					<s:Group>
						<s:layout><s:VerticalLayout/></s:layout>
						<s:Group>
							<s:layout><s:HorizontalLayout verticalAlign="middle"/></s:layout>
							
							<s:Group>
								<s:layout><s:VerticalLayout/></s:layout>
								<timebar:KSketch_TimeSkip_Button
									id="leftTimeJumper"
									width="{KSketchStyles.NUMBER_50}" height="{KSketchStyles.NUMBER_50}"/>
							</s:Group>
							
							
							<buttons:KSketch_Play_Button
								doubleClickEnabled="true"
								click="playButton.playToggle()"
								doubleClick="playButton.doubleClick()"
								id="playButton"
								width="{KSketchStyles.NUMBER_60}" height="{KSketchStyles.NUMBER_60}"/>
							
							<!--
							<buttons:KSketch_Play_Button
								click="playButton.playToggle()"
								id="playButton"
								width="{KSketchStyles.NUMBER_60}" height="{KSketchStyles.NUMBER_60}"/>
							-->
							
							<s:Group>
								<s:layout><s:VerticalLayout/></s:layout>
								<timebar:KSketch_TimeSkip_Button
									id="rightTimeJumper"
									width="{KSketchStyles.NUMBER_50}" height="{KSketchStyles.NUMBER_50}"/>
							</s:Group>
						</s:Group>
					</s:Group>
				</s:Group>	
				<s:Group width="9"/>
				<timebar:KSketch_TimeControl id="timeControl"/>
				<s:Group width="2"/>
			</s:Group>
		</s:Group>
		<!-- End of Timebar -->
		
		<s:Group id="canvas_component" width="100%" height="100%" depth="0">
			<s:Rect left="-1" right="-1" top="-1" bottom="-1">
				<s:fill>
					<s:SolidColor color="{KSketchStyles.COLOR_GREY_VERYLIGHT}"/>
				</s:fill>
			</s:Rect>
			<!-- For show, all the visual elements that the user wont be able to "touch"-->
			<s:Group width="100%" height="100%">
				<s:layout>
					<s:VerticalLayout horizontalAlign="center" verticalAlign="middle"/>
				</s:layout>
				<s:Group id="drawing_stage" height="92%" maxHeight="{Capabilities.screenResolutionX*0.7}"
						 width="{drawing_stage.height/9*16}">
					<s:Rect width="100%" height="100%">
						<s:fill>
							<s:SolidColor color="{KSketchStyles.COLOR_WHITE}"/>
						</s:fill>
						<s:stroke>
							<s:SolidColorStroke color="{KSketchStyles.COLOR_BLACK}"
												weight="{KSketchStyles.NUMBER_01}"/>
						</s:stroke>
						<s:filters>
							<s:DropShadowFilter 
								color="{KSketchStyles.COLOR_BLACK}" angle="{KSketchStyles.ANGLE_50}"
								alpha="{KSketchStyles.ALPHA_06}"
								strength="{KSketchStyles.NUMBER_01}"
								blurX="{KSketchStyles.NUMBER_12}"
								blurY="{KSketchStyles.NUMBER_12}"/>
						</s:filters>
					</s:Rect>
					<!-- The model display displays the objects in the model -->
					<view:KMotionDisplay id="motionDisplay" scaleX="{drawing_stage.width/KSketch2.CANONICAL_WIDTH}"
										 scaleY="{drawing_stage.height/KSketch2.CANONICAL_HEIGHT}"/>
					<view:KModelDisplay id="modelDisplay" scaleX="{drawing_stage.width/KSketch2.CANONICAL_WIDTH}"
										scaleY="{drawing_stage.height/KSketch2.CANONICAL_HEIGHT}"/>					
				</s:Group> 
			</s:Group>
			
			<!-- Things inside this group really dispatches gesture events-->
			<s:Group width="100%" height="100%">
				<s:Group id="canvas_region" width="100%" height="100%">
					<s:Rect width="100%" height="100%" alpha="{KSketchStyles.ALPHA_00}">
						<s:fill>
							<s:SolidColor color="{KSketchStyles.COLOR_BLACK}"/>
						</s:fill>
					</s:Rect>
				</s:Group>
				<transformWidget2:KSketch_Widget_Component id="widget" visible="false"/>
			</s:Group>
		</s:Group>
	</s:Group>
</s:View>