<?xml version="1.0" encoding="utf-8"?>
<!--
*Copyright 2010-2012 Singapore Management University
*Developed under a grant from the Singapore-MIT GAMBIT Game Lab

*This Source Code Form is subject to the terms of the
*Mozilla Public License, v. 2.0. If a copy of the MPL was
*not distributed with this file, You can obtain one at
*http://mozilla.org/MPL/2.0/.
-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx" 
		actionBarVisible="false" 
		xmlns:view="sg.edu.smu.ksketch2.canvas.components.view.*"
		xmlns:buttons="sg.edu.smu.ksketch2.canvas.components.buttons.*" 
		xmlns:popup="sg.edu.smu.ksketch2.canvas.components.popup.*"
		initialize="_init(KSketch_Config.isMobile)"
		addedToStage="_scale()"
		destructionPolicy="auto"
		>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import data.KSketch_DataListItem;
			import data.KSketch_ListItem;
			
			import org.as3commons.collections.SortedList;
			import org.as3commons.collections.framework.IComparator;
			
			import sg.edu.smu.ksketch2.KSketchAssets;
			import sg.edu.smu.ksketch2.KSketchGlobals;
			import sg.edu.smu.ksketch2.KSketch_Config;
			import sg.edu.smu.ksketch2.canvas.KSketch_CanvasView_Preferences;
			import sg.edu.smu.ksketch2.canvas.KSketch_LoginView;
			import sg.edu.smu.ksketch2.canvas.components.popup.KSketch_Alert;
			import sg.edu.smu.ksketch2.canvas.components.popup.KSketch_DialogBox_Notifications;
			import sg.edu.smu.ksketch2.canvas.components.popup.KSketch_DialogBox_Skin;
			import sg.edu.smu.ksketch2.canvas.controls.KSketch_CacheControl;
			import sg.edu.smu.ksketch2.utils.KSketchDocument;
			import sg.edu.smu.ksketch2.utils.KSwipeEvent;
			import sg.edu.smu.ksketch2.utils.KWebData;

		private static const DISPLAY_FAILED_DEFAULT:int = -1;
		private static const DISPLAY_FAILED_LOGIN:int = 0;

		private var HOME_DIVIDER_GAP:Number = 2 * KSketchGlobals.SCALE;
		private var HOME_PADDING:Number = 15 * KSketchGlobals.SCALE;
		private var HOME_LOGO_PADDINGTOP:Number = 40 * KSketchGlobals.SCALE;
		private var HOME_LOGO_WIDTH:Number = 150 * KSketchGlobals.SCALE;
		private var HOME_LOGO_HEIGHT:Number = 150 * KSketchGlobals.SCALE;

		[Bindable]
		private var sortedArr:SortedList = new SortedList(new KSketch_ListItem() as IComparator);
		[Bindable]
		private var arrDG:ArrayCollection = new ArrayCollection();

		//variables for canvas timer
		private var _canvasTimer:Object;
		private var _canvasTimerDisabled:Boolean;
		private var _loginView:KSketch_LoginView;
		private var _cacheControl:KSketch_CacheControl;
		private var _notice:String;

		//variables for login
		public var userData:Object = new Object();
		private var _displayFailedMessage:int;
		private var _hasBeenNotified:Boolean = false;
		private var _failedLogin:Boolean = false;
		private var _isConnected:Boolean = false;

		//variables for progress bar
		private var _progressTimer:Timer;

		//variables for selecting sketch
		private var _createNewSketch:Boolean = false;
		private var _isXML:Boolean = false;
		private var _oldEvent:Event;
		private var _isSwipe:Boolean;
		private var _logSketchFlag:Boolean = false;
		private var _saveSketchFlag:Boolean = false;
		private var _deleteSketchFlag:Boolean = false;

		//variable for item renderer
		private var itemRender:IFactory = new ClassFactory(KSketch_HomeView_IconItemRenderer);

		private function _init(isMobile:Boolean):void {

			//Check for mobile version. Set false to export for Desktop version
			if (isMobile) {
				mainButtons.removeElementAt(2);
				KSketch_CanvasView_Preferences.mobileEnabled = KSketch_CanvasView_Preferences.MOBILE_ON;
			}
			else {
				KSketch_CanvasView_Preferences.mobileEnabled = KSketch_CanvasView_Preferences.MOBILE_OFF;
			}

			//Quick fix for orientation on IOS devices
			if (stage.deviceOrientation == StageOrientation.UNKNOWN && (Capabilities.version.indexOf('IOS') > -1)) {
				if (KSketch_SplashView.initialOrientation == StageOrientation.DEFAULT ||
						KSketch_SplashView.initialOrientation == StageOrientation.UPSIDE_DOWN) {
					stage.setOrientation(StageOrientation.ROTATED_RIGHT);
				}
				else {
					stage.setOrientation(KSketch_SplashView.initialOrientation);
				}
			}

			//Hide canvas based on timer
			if (!_canvasTimerDisabled) {
				_canvasTimer = new Timer(2000);
				_canvasTimer.addEventListener(TimerEvent.TIMER, timerComplete);
				_canvasTimer.start();
			}
			else {
				_canvasCover.visible = false;
			}

			//retrieve cache control object
			_cacheControl = new KSketch_CacheControl(this);

			//add/remove event listeners
			this.removeEventListener(FlexEvent.INITIALIZE, _init);
			stage.addEventListener(KSwipeEvent.DELETE_ACTION, listSketches_deleteSketchHandler);
			stage.addEventListener(KSwipeEvent.LOG_ACTION, listSketches_logSketchHandler);
			stage.addEventListener(KSwipeEvent.SAVE_ACTION, listSketches_saveSketchHandler);

			_setupUser();
		}

		private function _scale():void {
			KSketchGlobals.setView();

			HOME_DIVIDER_GAP = 2
			HOME_PADDING = 15 * KSketchGlobals.SCALE;
			HOME_LOGO_PADDINGTOP = 40 * KSketchGlobals.SCALE;
			HOME_LOGO_WIDTH = 150 * KSketchGlobals.SCALE;
			HOME_LOGO_HEIGHT = 150 * KSketchGlobals.SCALE;
		}

		private function timerComplete(event:TimerEvent):void {
			_canvasTimer.removeEventListener(TimerEvent.TIMER, timerComplete);
			_canvasTimer.stop();

			_canvasCover.visible = false;
			_canvasTimerDisabled = true;
		}

		private function _setupUser():void {
			//initialize login button based on the KUser object
			var _anonymousUser:Boolean = false;

			if (data && data != KSketch_LoginView.LOGIN_CANCEL) {
				var errorMessage:String = String(data);

				//prompt once for failed login
				if ((errorMessage == KSketch_LoginView.LOGIN_LOSTCONN || errorMessage == KSketch_LoginView.LOGIN_JANRAINFAIL) && !_failedLogin) {
					_displayFailedMessage = DISPLAY_FAILED_LOGIN;
					_startDisplayFailedNotification(1000);

					_hasBeenNotified = true;
					_failedLogin = true;
					_anonymousUser = true;
				}
			}
			else {
				_failedLogin = true;

				if (_cacheControl.user == null || _cacheControl.user.id == "n.a") {
					_anonymousUser = true;
				}
			}

			//create userdata object based on anonymous and login states
			if (_anonymousUser) {
				_cacheControl.newUser();
				var object:Object = _cacheControl.user;
				userData.userObject = object;
				userData.listSketches = "";
				userData.resolveConflict = 0;
				userData.loginView = null;

				loginButton.init("Login");
				refreshButton.visible = false;
			}
			else if (!_anonymousUser && _failedLogin) {
				userData.userObject = _cacheControl.user;
				userData.listSketches = "";
				userData.resolveConflict = 0;
				userData.loginView = null;

				loginButton.init("Logout, " + userData.userObject.u_realname);
				refreshButton.init("Refresh");
			}
			else if (!_anonymousUser) {
				//cast data from previous view to ObjectProxy. This is to avoid getting IEventDispatcher error
				var dataProxy:Object = data as Object;
				userData.userObject = dataProxy.userObject;
				userData.listSketches = dataProxy.listSketches;
				userData.resolveConflict = dataProxy.resolveConflict;
				userData.loginView = dataProxy.loginView;

				_loginView = dataProxy.loginView;

				if (userData.userObject.id != "n.a") {
					if (dataProxy.token) {
						dataProxy.userObject.token = dataProxy.token;
					}
					_cacheControl.user = dataProxy.userObject;
					loginButton.init("Logout, " + userData.userObject.u_realname);
					refreshButton.init("Refresh");
				}
				else {
					loginButton.init("Login");
					refreshButton.visible = false;
				}
				_failedLogin = false;
				//refresh();
			}
			userData.homeView = this;
			userData.cacheControl = _cacheControl;
			userData.sketchData = null;

			createButton.init("Create a Sketch");
			loadButton.init("Load Sketch from File");
			createButton.initSkin();
			loadButton.initSkin();
			loginButton.initSkin();
			refreshButton.initSkin();

			_setupSketchListView();
		}

		private function _startDisplayFailedNotification(time:Number):void {
			_canvasTimer = new Timer(time, 1);
			_canvasTimer.addEventListener(TimerEvent.TIMER_COMPLETE, _displayFailedNotification);
			_canvasTimer.start();
		}

		private function _displayFailedNotification(event:TimerEvent):void {

			if (_displayFailedMessage == DISPLAY_FAILED_LOGIN) {
				_notice = KSketch_DialogBox_Notifications.CANVASNOTICE_FAILED_LOGIN;
			}

			var dialogPopUp:KSketch_DialogBox_Skin = new KSketch_DialogBox_Skin();
			dialogPopUp.init(this, null, null, null, "Notification");

			if (_displayFailedMessage != DISPLAY_FAILED_DEFAULT) {
				dialogPopUp.open(this, true);
				PopUpManager.centerPopUp(dialogPopUp);

				_displayFailedMessage = DISPLAY_FAILED_DEFAULT;
			}

			_canvasTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, _displayFailedNotification);
		}

		private function _setupSketchLoad(sketchName:String, sketchId:String, sketchVersion:String):void {
			_startProgressBar();
			_cacheControl.retrieveSketchData(sketchName, sketchId, sketchVersion);
		}

		private function _setupSketchLog():void {

		}

		private function _setupSketchSave():void {
			var sketchName:String = KSketch_HomeView_IconItemRenderer.selectedSketchName;
			var sketchId:String = KSketch_HomeView_IconItemRenderer.selectedSketchId;
			var sketchVersion:String = KSketch_HomeView_IconItemRenderer.selectedVersion;
			var docsDir:File = File.documentsDirectory;
			try {
				docsDir.browseForSave("Save As");
				docsDir.addEventListener(Event.SELECT, saveData(sketchName,sketchId,sketchVersion));
			}
			catch (error:Error) {
				trace("Failed:", error.message);
			}
			//stage.dispatchEvent(new MouseEvent(MouseEvent.RIGHT_CLICK));
		}

		function saveData(sketchName:String,sketchId:String,sketchVersion:String):Function {
			return function(event:Event):void {
				var newFile:File = event.target as File;
				var finalFileName:String = newFile.name;
				var fullPath:String=newFile.nativePath;				
				
				var arr:Array = verifyFileType(finalFileName,newFile.extension,fullPath);	
				if(arr == null || arr.length == 0)
					return;
				finalFileName = arr[0];
				fullPath = arr[1];
				
				var sketchData:Object = _cacheControl.retrieveSketchForSave(sketchName, sketchId);	
				if(sketchData == null)
					return;
				//create XML and date object from JSON to create a KSketchDocument object
				var xml:XML = new XML(sketchData.fileData);
				var date:Date = new Date(sketchData.modified);
				var obj:Object = new Object();
				obj.sketchData = new KSketchDocument(sketchName, xml,"-1", date, sketchData.fileName, sketchData.version, -1, sketchData.changeDescription);
				obj.thumbnailData = sketchData.thumbnailData;
				obj.fileData = xml.toString();
				var saveObj:Object = KWebData.prepareSketchDocument(obj, finalFileName, _cacheControl.user);

				//save to file
				var str:String = com.adobe.serialization.json.JSON.encode(saveObj);
				var stream:FileStream = new FileStream();				
				if(newFile.name != finalFileName)
					stream.open(new File(fullPath), FileMode.WRITE);
				else
					stream.open(newFile, FileMode.WRITE);
				stream.writeUTFBytes(str);
				stream.close();
				if(stage!=null)
					stage.dispatchEvent(new KSwipeEvent(KSwipeEvent.SAVE_CLOSE_ACTION));
			}
		}

		private function _setupSketchListView(fromWeb:Boolean = true):void {
			_startProgressBar();

			listSketches_unavailable.visible = true;

			arrDG.removeAll();

			_cacheControl.retrieveWebSketchList(fromWeb);
		}

		public function displaySketchList(sortedArr:SortedList):void {
			if (sortedArr) {
				var arr:ArrayCollection = new ArrayCollection();
				if (sortedArr.size > 0) {
					for (var i:int = 0; i < sortedArr.size; i++) {
						arr.addItem(sortedArr.itemAt(i));
					}
					var sort:Sort = new Sort();
					sort.fields = [new SortField("fileName", true)];
					arr.sort = sort;
					arr.refresh();
					arrDG = arr;
					listSketches_unavailable.visible = false;
				}
			}

			_stopProgressBar();
		}

		public function displaySketchData(sketchData:KSketch_DataListItem, selectedSketch:Array) {
			if (sketchData) {
				userData.sketchData = sketchData;
				navigateToScreen("CANVAS");
			}
			_stopProgressBar();
		}

		private function _startProgressBar():void {
			progressBar.visible = true;

			_progressTimer = new Timer(1);
			_progressTimer.addEventListener(TimerEvent.TIMER, _progressBarHandler);
			_progressTimer.start();
		}

		private function _stopProgressBar():void {
			_progressTimer.stop();
			_progressTimer.removeEventListener(TimerEvent.TIMER, _progressBarHandler);
			progressBar.visible = false;
		}

		private function _progressBarHandler(event:TimerEvent):void {
			progressBar.value += .008;

			if (progressBar.value >= 1)
				progressBar.value = 0;
		}

		private function createSketch():void {
			userData.kSketchDocument = null;
			_createNewSketch = true;
			navigateToScreen('CANVAS');
		}

		private function loadSketch():void {
			try {
				var file:File = File.documentsDirectory;
				file.browseForOpen("Open");
				file.addEventListener(Event.SELECT, fileSelected);
			}
			catch (error:Error) {
				trace("Failed:", error.message);
			}
		}

		private function fileSelected(event:Event):void {
			var stream:FileStream = new FileStream();
			stream.open(event.target as File, FileMode.READ);
			var fileData:String = stream.readUTFBytes(stream.bytesAvailable);

			//create XML and date object from JSON to create a KSketchDocument object
			try {
				var fileObj:Object = com.adobe.serialization.json.JSON.decode(fileData);

				if (fileObj.hasOwnProperty("fileName") && fileObj.hasOwnProperty("fileData") &&
						fileObj.hasOwnProperty("originalName") && fileObj.hasOwnProperty("version") &&
						fileObj.hasOwnProperty("sketchId") && fileObj.hasOwnProperty("changeDescription")) {
					fileObj.lowerFileName = fileObj.fileName.toString().toLowerCase();
					var xml:XML = new XML(fileObj.fileData);
					var sketchData:KSketch_DataListItem = new KSketch_DataListItem(xml, fileObj.fileName, fileObj.originalName,
							_cacheControl.user.id, fileObj.modified, fileObj.changeDescription,
							fileObj.id, int(fileObj.version));
					KSketch_CanvasView.loadedFromFile = true;
					displaySketchData(sketchData, null);
					navigateToScreen("CANVAS");
				}
			}
			catch (error:Error) {
				trace("Unknown file");
				handleUnknownSketchFile();
			}
		}

		public function refresh(fromWeb:Boolean = true):void {
			_setupSketchListView(fromWeb);
		}

		public function logout():void {
			if (_loginView) {
				_loginView.isLoggedOut = true;
			}

			//KSketch_SaveOptions.saveCounter = 0;
			data = null;
			arrDG.removeAll();
			loginButton.label = "Login";

			_cacheControl.reset();
			_setupUser();
		}

		public function navigateToScreen(screenName:String):void {
			if (screenName.indexOf("RELOGIN") != -1) {
				navigator.pushView(KSketch_LoginView);
			}
			else if (screenName.indexOf("CANVAS") == -1) //if screen name is Login
			{
				KSketch_LoginView.userData = new Object();

				//if this is a logout button, then reset view & delete cache
				if (loginButton.label.indexOf("Login") == -1) {
					logout();
					if (!_cacheControl.unsavedSketchExist()) {
						logout();
					}
					else {
						showDialogBox("Logout");
					}
				}
				else {
					navigator.pushView(KSketch_LoginView);
				}
			}
			else {
				Multitouch.inputMode = MultitouchInputMode.TOUCH_POINT;
				navigator.pushView(KSketch_CanvasView, userData);
			}
		}

		protected function listSketches_deleteSketchHandler(event:KSwipeEvent):void {
			_deleteSketchFlag = true;
			var sketchName:String = KSketch_HomeView_IconItemRenderer.selectedSketchName;
			var sketchId:String = KSketch_HomeView_IconItemRenderer.selectedSketchId;
			var sketchVersion:String = KSketch_HomeView_IconItemRenderer.selectedVersion;
			_cacheControl.deleteSketch(sketchId, int(sketchVersion), sketchName);
		}

		protected function listSketches_logSketchHandler(event:KSwipeEvent):void {
			_logSketchFlag = true;
		}

		protected function listSketches_saveSketchHandler(event:KSwipeEvent):void {
			_saveSketchFlag = true;
			listSketches_changeSelectedHandler(event);
		}

		protected function listSketches_mouseDownHandler(event:MouseEvent):void {
			if (!_oldEvent)
				_oldEvent = event;
			else {
				var currentSelectedSketchName:String;
				if (event.target) {
					if (event.target as KSketch_HomeView_IconItemRenderer) {
						if ((_oldEvent.target is KSketch_HomeView_IconItemRenderer)
								&& (event.target is KSketch_HomeView_IconItemRenderer)
								&& ((_oldEvent.target as KSketch_HomeView_IconItemRenderer) != (event.target as KSketch_HomeView_IconItemRenderer)
								)) {
							currentSelectedSketchName = (event.target as KSketch_HomeView_IconItemRenderer).sketchName.text;

							if ((_oldEvent.target as KSketch_HomeView_IconItemRenderer).actBar)
								if ((_oldEvent.target as KSketch_HomeView_IconItemRenderer).actBar.stage) {
									KSketch_HomeView_IconItemRenderer.openActionBar = false;
									(_oldEvent.target as KSketch_HomeView_IconItemRenderer).removeElement((_oldEvent.target as KSketch_HomeView_IconItemRenderer).actBar);
								}

							_oldEvent = event;
						}
					}
				}
			}
		}

		protected function listSketches_changeSelectedHandler(event:Event):void {
			var sketchName:String = KSketch_HomeView_IconItemRenderer.selectedSketchName;
			var sketchId:String = KSketch_HomeView_IconItemRenderer.selectedSketchId;
			var sketchVersion:String = KSketch_HomeView_IconItemRenderer.selectedVersion;

			if (_isSwipe) {
				listSketches.selectedIndex = -1;			
				stage.dispatchEvent(new KSwipeEvent(KSwipeEvent.TAP_ACTION));
			}

			//if action bar is not displayed and there is a save sketch flag
			if (!KSketch_HomeView_IconItemRenderer.openActionBar && _saveSketchFlag)
				_saveSketchFlag = false;
			
			if (!KSketch_HomeView_IconItemRenderer.openActionBar && _deleteSketchFlag)
				_deleteSketchFlag = false;
			
			//if action bar is displayed, reset selection to -1
			if (KSketch_HomeView_IconItemRenderer.openActionBar)
				listSketches.selectedIndex = -1;

			//if action bar is not displayed and there is no additional flag
			if (!KSketch_HomeView_IconItemRenderer.openActionBar && !_deleteSketchFlag && !_isSwipe && !_logSketchFlag && !_saveSketchFlag)
				_setupSketchLoad(sketchName, sketchId, sketchVersion); //_isXML = true;

			//if action bar is displayed and there is a log sketch flag
			if (KSketch_HomeView_IconItemRenderer.openActionBar && _logSketchFlag)
				_setupSketchLog(); //_isXML = true;

			//if action bar is displayed and there is a save sketch flag
			if (KSketch_HomeView_IconItemRenderer.openActionBar && _saveSketchFlag)
				_setupSketchSave(); //_isXML = true;

			//if action bar is displayed and there is a delete sketch flag
			//if (KSketch_HomeView_IconItemRenderer.openActionBar && _deleteSketchFlag)
			//	_cacheControl.deleteSketch(sketchId, int(sketchVersion), sketchName);

			_isSwipe = false;
		}

		public function set createNewSketch(value:Boolean) {
			_createNewSketch = value;
		}

		public function get createNewSketch():Boolean {
			return _createNewSketch;
		}

		public function kSketchItemRendererFuntion(item:*):IFactory {
			return itemRender;
		}

		public function handleExpiredSession() {
			_notice = KSketch_DialogBox_Notifications.CANVASNOTICE_EXPIRED_SESSION;
			showDialogBox("Notification");
		}

		private function handleUnknownSketchFile():void
		{
			_notice = KSketch_DialogBox_Notifications.CANVASNOTICE_UNKNOWN_FILE;	
			showDialogBox("Notification");			
		}
			
		private function verifyFileType(fileName:String,fileExt:String,filePath:String):Array
		{
			var arrResult:Array = new Array();
			arrResult[0] = fileName;
			arrResult[1] = filePath;			
			
			if(fileExt == null || fileExt == "") 
			{
				arrResult[0] = fileName + ".kmv";
				arrResult[1] = filePath + ".kmv"
			}
			else if(fileExt != "kmv") 
			{
				_notice = KSketch_DialogBox_Notifications.CANVASNOTICE_CONFIRM_FILETYPE;
				showDialogBox("Notification");
				
				var arr:Array = filePath.split(".");
				arrResult[0] = fileName.replace(fileExt,"kmv");
				arrResult[1] = arr[0]+".kmv";
			}		
			return arrResult;
		}
			
		private function showDialogBox(mode:String):void
		{
			var dialogPopUp:KSketch_DialogBox_Skin = new KSketch_DialogBox_Skin();
			dialogPopUp.init(this, null, null, null, mode);
			dialogPopUp.open(this, true);
			PopUpManager.centerPopUp(dialogPopUp);
		}
			
		protected function view_addedToStageHandler(event:Event):void {
			// TODO Auto-generated method stub

		}

		public function get notice():String {
			return _notice;
		}
		]]>
	</fx:Script>
	<s:Group width="100%" height="100%">
		
		<!-- start of first layer -->
		<s:Group width="100%" height="100%">
			<!-- defines the page to arrange 'group' elements from left to right -->
			<s:layout> <s:HorizontalLayout gap="{HOME_DIVIDER_GAP}"/> </s:layout>
			
			<!-- First half of the page -->
			<s:Group width="33%" height="100%">
				<!-- sets the background to grey -->
				<s:Rect width="100%" height="100%">
					<s:fill> <s:SolidColor color="{KSketchGlobals.COLOR_GREY_VERYLIGHT}"/> </s:fill>
				</s:Rect>
				
				<s:Group id="mainButtons" width="100%" height="100%">
					<!-- defines the page to arrange 'group' elements from top to bottom -->
					<s:layout> <s:VerticalLayout paddingLeft="{HOME_PADDING}" 
												 paddingRight="{HOME_PADDING}" 
												 paddingTop="{HOME_PADDING}"/> </s:layout>
					
					<!-- Alignment for logo button -->
					<s:Group width="100%" height="40%">
						<s:layout> <s:HorizontalLayout paddingTop="{HOME_LOGO_PADDINGTOP}" 
													   horizontalAlign="center"/> </s:layout>
						<s:Image id="logoHolder" source="{KSketchAssets.texture_logo}"
								 width="{HOME_LOGO_WIDTH}"
								 height="{HOME_LOGO_HEIGHT}"/>
					</s:Group>
					
					<s:Group width="100%">
						<s:layout> <s:VerticalLayout paddingBottom="{HOME_PADDING}" verticalAlign="middle" horizontalAlign="center"/> </s:layout>
						<buttons:KSketch_DialogButton id="createButton" click="createSketch()" width="100%"/>
					</s:Group>
					
					<!-- DESKTOP ENABLE -->
					<s:Group width="100%">
						<s:layout> <s:VerticalLayout paddingBottom="{HOME_PADDING}" verticalAlign="middle" horizontalAlign="center"/> </s:layout>
						<buttons:KSketch_DialogButton id="loadButton" click="loadSketch()" width="100%"/>
					</s:Group>
					<!-- END OF DESKTOP ENABLE -->
					
					<s:Group width="100%">
						<s:layout> <s:VerticalLayout paddingBottom="{HOME_PADDING}" verticalAlign="middle" horizontalAlign="center"/> </s:layout>
						<buttons:KSketch_DialogButton id="loginButton" click="navigateToScreen('Login')" width="100%"/>
					</s:Group>
					
					<s:Group width="100%">
						<s:layout> <s:VerticalLayout paddingBottom="{HOME_PADDING}" verticalAlign="middle" horizontalAlign="center"/> </s:layout>
						<buttons:KSketch_DialogButton id="refreshButton" click="refresh()" width="100%"/>
					</s:Group>
					
					<!-- end alignment for buttons -->
				</s:Group>
			</s:Group>
			<!-- end of first half -->
			
			<!-- Second half of the page -->
			<s:Group width="67%" height="100%">
				
				<!-- Background for previewer -->
				<s:Rect width="100%" height="100%">
					<s:fill>
						<s:SolidColor color="{KSketchGlobals.COLOR_GREY_VERYLIGHT}"/>
					</s:fill>
				</s:Rect>
				
				<!--Previewer portion-->
				<s:Group width="100%" height="100%">
					<s:Rect top="{HOME_PADDING}" left="{HOME_PADDING}" 
							right="{HOME_PADDING}" bottom="{HOME_PADDING}">
						<s:fill>
							<s:SolidColor color="{KSketchGlobals.COLOR_WHITE}"/>
						</s:fill>
						<s:filters>
							<s:DropShadowFilter angle="90" distance="1" color="{KSketchGlobals.COLOR_BLACK}" alpha="{KSketchGlobals.ALPHA_05}"/>
						</s:filters>
					</s:Rect>
					
					<s:Group top="{HOME_PADDING}" left="{HOME_PADDING}" 
							 right="{HOME_PADDING}" bottom="{HOME_PADDING}">
						<s:Group width="100%" height="100%">
							<s:layout>
								<s:VerticalLayout></s:VerticalLayout>
							</s:layout>
							
							<s:List id="listSketches" contentBackgroundAlpha="0" width="100%" height="100%"
									itemRendererFunction="kSketchItemRendererFuntion"
									dataProvider="{arrDG}" horizontalScrollPolicy="off" mouseDown="listSketches_mouseDownHandler(event)" change="listSketches_changeSelectedHandler(event)">
							</s:List>
						</s:Group>
						<s:Image id="listSketches_unavailable" source="{KSketchAssets.image_new}" width="100%" height="100%" visible="false"/>
						<popup:DataProgressBar id="progressBar" skinClass="sg.edu.smu.ksketch2.canvas.components.popup.KSketch_DataProgressBar"
											   horizontalCenter="0" verticalCenter="0" visible="false"/>
					</s:Group>
					
				</s:Group> 
				<!-- end of previewer portion-->
			</s:Group>	
			<!-- end of second half -->
		</s:Group>
		<!-- end of first layer -->
		
		<!-- start of second layer -->
		<s:Group id="_canvasCover" width="100%" height="100%" visible="true">
			<s:Rect  width="100%" height="100%">
				<s:fill>
					<s:SolidColor color="{KSketchGlobals.COLOR_WHITE}"/>
				</s:fill>
			</s:Rect>
		</s:Group>
		<!-- end of second layer -->
	</s:Group>
</s:View>