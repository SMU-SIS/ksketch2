<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx"
				xmlns:views="sg.edu.smu.ksketch2.canvas.components.view.*"
				currentState="default" autoDrawBackground="false"
				creationComplete="iconitemrenderer1_creationCompleteHandler(event)" 
				>
	<s:states>
		<s:State name="default"/>
		<s:State name="show"/>
	</s:states>
	
	<s:HGroup id="bc" horizontalAlign="center" height="120" verticalAlign="middle" paddingLeft="15">
		<s:Image id="imgData"/>
		
		<s:VGroup>
			<s:Label id="sketchName"/>
			<s:Label id="sketchDate"/>
		</s:VGroup>
	</s:HGroup>
	<s:Graphic width="100%" id="border"/>
	<s:Group visible="false">
		<s:Label id="sketchId"/>
		<s:Label id="sketchVersion"/>
	</s:Group>
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.utils.Base64Decoder;
			
			import sg.edu.smu.ksketch2.utils.KSwipeEvent;
			
			private var _myIcon:Bitmap;
			private var _oldSelection:String;
			
			public static var selectedSketchName:String;
			public static var selectedSketchId:String;
			public static var selectedVersion:String;
			public static var openActionBar:Boolean = false;
			
			protected function state1_enterStateHandler(event:FlexEvent):void
			{
				bc.setStyle("backgroundColor",0xff0018);
			}
			
			override public function set data(value:Object):void
			{
				if(value.image)
				{
					super.data = value;
					
					//set name and date properties
					sketchName.text = value.name;
					sketchName.setStyle("fontSize",20);
					sketchDate.text = value.date;
					sketchId.text = value.sketchId;
					sketchVersion.text = value.version;
					
					//drawing border for each row
					border.graphics.lineStyle(2, 0x990000, .75);
					border.graphics.beginFill(0x00FF00);
					border.graphics.moveTo(0, 0);
					border.graphics.lineTo(1000, 0);
					
					//decode for Image
					var decoder:Base64Decoder = new Base64Decoder();
					decoder.decode(value.image);
					var bytes:ByteArray = decoder.toByteArray();
					
					var loader:Loader = new Loader();
					loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onComplete);
					loader.loadBytes(bytes);
				}
			}
			
			private function onComplete(event:Event):void
			{
				_myIcon = new Bitmap();
				_myIcon.bitmapData = Bitmap(LoaderInfo(event.target).content).bitmapData;
				imgData.source = _myIcon;
			}
			
			override public function set selected(value:Boolean):void
			{
				if (value == selected)
					return;
				
				super.selected = value;
				
				if (selected)
				{
					selectedSketchName = sketchName.text;
					selectedSketchId = sketchId.text; 
					selectedVersion = sketchVersion.text;
					
					if(!openActionBar)
						autoDrawBackground = true;
				}
				
				setCurrentState("default", true);
			}
			
			override public function setCurrentState(stateName:String, playTransition:Boolean = true):void {
				super.setCurrentState(stateName, playTransition);
			}
			
			protected function iconitemrenderer1_creationCompleteHandler(event:FlexEvent):void
			{
				Multitouch.inputMode = MultitouchInputMode.GESTURE;
				this.addEventListener(TransformGestureEvent.GESTURE_SWIPE, onSwipe);
				stage.addEventListener(KSwipeEvent.TAP_ACTION, swipeTap);
			}
			
			public function onSwipe(event:TransformGestureEvent):void
			{
				if(actBar.stage)
				{
					openActionBar = false;
					wipeEffectOut.play();
					this.removeElement(actBar);
				}
				
				if(event.offsetX == -1){
					this.addElement(actBar);
					
					actBar.visible = true;
					openActionBar = true;
					wipeEffect.play();
				}
			}
			
			public function swipeTap(event:KSwipeEvent):void
			{
				autoDrawBackground = false;
				
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:Parallel id="wipeEffect" target="{actBar}">
			<s:Fade duration="800" alphaFrom="0.7" alphaTo="1" />
			<s:Move duration="150" xFrom="{this.width}" xTo="500"/>
		</s:Parallel>
		<s:Parallel id="wipeEffectOut" target="{actBar}">
			<s:Fade duration="800" alphaFrom="0.7" alphaTo="1" />
			<s:Move duration="150" xTo="{this.width}" xFrom="500"/>
		</s:Parallel>
		<views:KSketch_HomeView_ListActions id="actBar" width="100%" height="100%"/>
	</fx:Declarations>
</s:ItemRenderer>