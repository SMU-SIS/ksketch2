<?xml version="1.0" encoding="utf-8"?>
<!--
*Copyright 2010-2012 Singapore Management University
*Developed under a grant from the Singapore-MIT GAMBIT Game Lab

*This Source Code Form is subject to the terms of the
*Mozilla Public License, v. 2.0. If a copy of the MPL was
*not distributed with this file, You can obtain one at
*http://mozilla.org/MPL/2.0/.
-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx" 
		actionBarVisible="false" 
		xmlns:view="sg.edu.smu.ksketch2.canvas.components.view.*"
		xmlns:buttons="sg.edu.smu.ksketch2.canvas.components.buttons.*" 
		xmlns:popup="sg.edu.smu.ksketch2.canvas.components.popup.*"
		initialize="init()"
		addedToStage="addedToStageHandler()"
		viewActivate="init()"
		destructionPolicy="never"
		>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:HTTPService id="GetUserSketch"               
					   resultFormat="text" 
					   showBusyCursor="false">                        
		</s:HTTPService>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			
			import mx.collections.ArrayCollection;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectProxy;
			
			import air.net.URLMonitor;
			
			import sg.edu.smu.ksketch2.KSketchAssets;
			import sg.edu.smu.ksketch2.KSketchStyles;
			import sg.edu.smu.ksketch2.KSketchWebLinks;
			import sg.edu.smu.ksketch2.KSketch_User;
			import sg.edu.smu.ksketch2.KSketch_UserSketches;
			import sg.edu.smu.ksketch2.canvas.KSketch_LoginView;
			import sg.edu.smu.ksketch2.canvas.components.popup.KSketch_CanvasNotice;
			import sg.edu.smu.ksketch2.canvas.components.popup.KSketch_LogoutNotice;
			import sg.edu.smu.ksketch2.canvas.components.popup.KSketch_SyncOptions;
			import sg.edu.smu.ksketch2.canvas.components.view.KSketch_HomeView_IconItemRenderer;
			import sg.edu.smu.ksketch2.utils.KCache;
			import sg.edu.smu.ksketch2.utils.KSketchDocument;
			import sg.edu.smu.ksketch2.utils.SortingFunctions;
			
			[Bindable]
			private var arrDG:ArrayCollection = new ArrayCollection();
			
			public static var autoSaveCounter:int = 0;
			
			//class variables
			public static var _viewArr:Array = new Array(4);
			private var userData:Object = new Object();
			private var _mySO:SharedObject;
			private var _resultSketch:String;
			
			//variables for other components
			private var _syncOptions:KSketch_SyncOptions;
			private var _logoffNotice:KSketch_LogoutNotice;
			private var _canvasNotice:KSketch_CanvasNotice;
			
			//variables for connection
			public var _isConnected:Boolean;
			public var _isLoggingOut:Boolean = false;
			private var monitor:URLMonitor;
			
			//variables for web or cache retrieval
			private var _isXML:Boolean;
			private var _isSynced:Boolean;
			public var _isUsingCache:Boolean = true;
			private var _successfulRetrievalFromWeb:Boolean;
			
			//timer variables
			private var progressTimer:Timer;	//for progressBar
			private var showTimer:Timer;		//for caching after every data fetch
			
			//sketch selection variables
			private var selectedSketchName:String;
			private var selectedSketchId:String;
			private var selectedSketchVersion:String;
			
			public function addedToStageHandler():void
			{
				trace("in addedTOStageHandler: " + stage.deviceOrientation );
				stage.setAspectRatio("landscape");
				stage.autoOrients = true;
				stage.addEventListener(StageOrientationEvent.ORIENTATION_CHANGE, orientationChangedHandler);
				
				startMonitorConnection();
			}
			
			private function orientationChangedHandler(event:StageOrientationEvent):void {
				event.stopImmediatePropagation();
				if(event.afterOrientation == StageOrientation.ROTATED_RIGHT || event.afterOrientation == StageOrientation.ROTATED_LEFT)
					trace("Inside orientationChanging()");
			}
			
			private function init():void
			{	
				_syncOptions = new KSketch_SyncOptions();
				_syncOptions.createDeferredContent();
				
				_logoffNotice = new KSketch_LogoutNotice;
				_logoffNotice.createDeferredContent();
				
				_canvasNotice = new KSketch_CanvasNotice;
				_canvasNotice.createDeferredContent();
				
				//set KSketch Logo
				logoHolder.init(KSketchAssets.texture_logo, KSketchAssets.texture_logo);
				
				//check if user is logged in
				_isLoggingOut = false;
				
				GetUserSketch.addEventListener(FaultEvent.FAULT, retrieveFaultHandler);
				GetUserSketch.addEventListener(ResultEvent.RESULT, retrieveResultHandler);
			}
			
			private function prepareHomeView():void
			{
				//initialize login button and KUser object
				if(!data || data == "Skip Login" || data == "Lost Connection" || data == "Janrain Failed")
				{
					if(data)
					{
						var errorMessage:String = String(data);
						
						if(errorMessage == "Lost Connection")
							listSketches_unavailable.text = "Failed to login. You are not connected to the Internet.";
						else if(errorMessage == "Janrain Failed")
							listSketches_unavailable.text = "Our login provider is not accessible at the moment. Please try again later.";
					}
					
					var obj:Object = new Object();
					obj.status = "failed";
					obj.u_login = "n.a";
					var kUser:KSketch_User = new KSketch_User(obj);
					userData.kUser = kUser;
					
					loginButton.label = "Login";
				}
				else
				{
					//cast data from previous view to ObjectProxy. This is to avoid getting IEventDispatcher error
					var dataProxy:ObjectProxy = new ObjectProxy(data);
					
					if(dataProxy.kUser)
						userData.kUser = dataProxy.kUser;
					
					if(KSketch_LoginView._isLoggedIn)
						loginButton.label = "Logout, "+ userData.kUser.u_realname;
					else
						loginButton.label = "Login";
				}
				
				userData.homeView = this;
				userData.kSketchDocument = null;
				
				_viewArr[0] = com.adobe.serialization.json.JSON.encode(userData.kUser);
				
				_viewArr[3] = "CACHE";	//set to default "Cache"
				prepareDataList();
			}
			
			public function prepareDataList():void
			{
				startProgressBar();
				
				_viewArr = KCache.initFromCache(KSketch_LoginView._isLoggedIn, _isConnected, _viewArr[0]);	//read data from cache
				
				if(KSketch_LoginView._isLoggedIn && _isConnected)
					updateFromWeb();
				else
					endPreparation(1000);
			}
			
			public function updateFromWeb():void
			{
				_isXML = false;						//JSON retrieval is list of sketches, not XML of sketch
				_isUsingCache = false;				//Is using web
				_successfulRetrievalFromWeb = false;//reset variable for successful retrieval from web to false
				
				//get json object of user's list of sketches from the URL
				//returned result will be a stringified JSON object
				GetUserSketch.url = KSketchWebLinks.jsonurlSketch + userData.kUser.id;
				GetUserSketch.send();
			}
			
			private function retrieveResultHandler(event:ResultEvent):void
			{
				_successfulRetrievalFromWeb = true;	//returned result means successful retrieval
				
				var rawData:String = String(event.result);
				var obj:Object = com.adobe.serialization.json.JSON.decode(rawData,true);
				
				if(obj)
					retrieveData(obj,rawData);
				
				if(_isXML)
					resetDatagridSelectItem();
			}
			
			private function retrieveFaultHandler(event:FaultEvent):void
			{
				//if connection is lost in the midst of a 
				//web update, just fallback to cache
				_viewArr[3] = "CACHE";
				
				if(_isXML)
					retrieveXMLDataFromCache();
				
				
				endPreparation(1000);
			}
			
			private function retrieveData(obj:Object, rawData:String):void
			{
				arrDG.removeAll();	//reset arrDG
				
				if(!_isXML)	//if object contains list of sketches
				{
					//Check the 'entities' property of the object to know if user has any existing sketches
					var arrEntities:Array = [];
					arrEntities = (obj.entities as Array);
					
					if(arrEntities.length != 0)
					{
						//Create a UserSketch instance by sending only the 'entities' of the JSON object and user's ID
						var userSketch:KSketch_UserSketches = new KSketch_UserSketches(arrEntities, userData.kUser.id);
						
						autoSaveCounter = KSketch_UserSketches.initializeAutoSaveSketchName(userSketch);
						
						//Set DataGrid array to user sketches collection
						var sortBy:String = "sketchId";
						if(!arrDG)
							arrDG = userSketch.getUserSketchArray(sortBy); 
						else
							arrDG.addAll(userSketch.getUserSketchArray(sortBy));
						
						listSketches_unavailable.visible = false;
					}
					
					//solve discrepancies with cached data
					var resultSketch:String = rawData;
					
					if(!_isUsingCache)
						solveDiscrepancy(resultSketch);	
				}
				else //if object contains XML of a particular sketch
				{
					_isXML = false;
					
					//create XML and date object from JSON to create a KSketchDocument object
					var xml:XML = new XML(obj.data.fileData);
					var date:Date = new Date(obj.modified);
					var docObj:KSketchDocument = new KSketchDocument(obj.data.fileName, xml, obj.id, date, obj.data.originalName, obj.data.originalVersion, obj.data.sketchId, obj.data.changeDescription);
					
					if(_viewArr[2])
						_viewArr[2] += "%" + rawData;
					else
						_viewArr[2] = rawData;
					
					userData.kSketchDocument = docObj;
					
					navigateToScreen("CANVAS");
				}
			}
			
			private function solveDiscrepancy(resultSketch:String):void
			{
				var currentSketch:Object;
				var currentArr:Array;
				currentSketch = com.adobe.serialization.json.JSON.decode(resultSketch, true);
				currentArr = (currentSketch.entities as Array);
				
				//only solve discrepancy if previously retrieved from cache
				if(_viewArr[3] == "CACHE")
				{
					var previousSketch:Object;
					var previousArr:Array;
					if(_viewArr[1])
					{
						previousSketch = com.adobe.serialization.json.JSON.decode(_viewArr[1], true);
						previousArr = (previousSketch.entities as Array);
					}
					
					if(!previousArr && currentArr.length == 0)
					{
						startNewSketch();
					}
					
					var syncSketchArr:ArrayCollection = new ArrayCollection();	
					if(previousArr)	
						syncSketchArr = KSketch_UserSketches.getSketchArrayToSync(previousArr);
					
					//if sync array is not empty, get the sketch documents of the sketches
					var syncSketchDocsArr:ArrayCollection;
					if(syncSketchArr)
					{
						var sketchDocsArr:Array;
						
						if(_viewArr[2])
							sketchDocsArr = _viewArr[2].split("%");
						
						if(sketchDocsArr)
							syncSketchDocsArr = KSketch_UserSketches.getSketchDocumentArrayToSync(sketchDocsArr, syncSketchArr);
					}
					
					//if there are sketch documents to sync, then open the sync option box
					if(syncSketchDocsArr)
					{
						//sort according to filename for both sketch and document
						syncSketchArr = SortingFunctions.sortArray(syncSketchArr, "fileName");
						syncSketchDocsArr = SortingFunctions.sortArray(syncSketchDocsArr, "fileName");
					
						_syncOptions.resetSyncArrays();
						
						_syncOptions.currentUser = com.adobe.serialization.json.JSON.decode(_viewArr[0], true);
						_syncOptions.syncSketchArr = syncSketchArr;
						_syncOptions.syncSketchDocsArr = syncSketchDocsArr;
						_syncOptions.open(this,true);
						PopUpManager.centerPopUp(_syncOptions);	
						
						_isSynced = true;
						
						stopProgressBar();
					}
				}
				else
				{
					_isSynced = false
					
					if(currentArr.length == 0)
						startNewSketch();
				}
				
				_viewArr[1] = resultSketch;
				_viewArr[3] = "WEB";			//set method of retrieval to web so this method won't be called subsequently
				
				if(!_isSynced)
					endPreparation(1000);
			}
			
			private function retrieveXMLDataFromCache():void
			{
				if(selectedSketchName && _viewArr[2])
				{
					var isSketch:Boolean = false;
					var sketchDocumentListArr:Array = _viewArr[2].split("%");
					
					var rawData:String = KSketch_UserSketches.getSketchDocumentObjectByName(sketchDocumentListArr, selectedSketchName);
					if(rawData)
					{
						var obj:Object = com.adobe.serialization.json.JSON.decode(rawData,true);
						retrieveData(obj, rawData);
						
						isSketch = true;
					}
					
					if(!isSketch)
					{
						trace("OPEN ALERT BOX: CANNOT DISPLAY UNLESS CONNECTED");
						trace("_canvasNotice: " + _canvasNotice);
						_isXML = false;	
						_canvasNotice.open(this, true);
						PopUpManager.centerPopUp(_canvasNotice);
					}
				}
			}
			
			private function startNewSketch():void
			{
				listSketches_unavailable.visible = true;
				_viewArr[1] = null;
				_viewArr[2] = null;
			}
			
			public function endPreparation(time:Number):void
			{
				showTimer = new Timer(time,1);
				showTimer.addEventListener(TimerEvent.TIMER_COMPLETE, endPreparationHandler);
				showTimer.start();
				startProgressBar();
			}
			
			private function endPreparationHandler(event:TimerEvent):void
			{
				showTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, endPreparationHandler);
				showTimer.stop();
				
				if(_isUsingCache)
				{
					var rawData:String = String(_viewArr[1]);
					var obj:Object;
					
					if(rawData)
						obj = com.adobe.serialization.json.JSON.decode(rawData,true);
					
					if(obj)
						retrieveData(obj,rawData);
					else
						startNewSketch();
				}
				
				KCache.writeDataToCache(_viewArr);
				
				stopProgressBar();
			}
			
			private function createSketch():void
			{
				KSketch_CanvasView.isNewSketch = true;
				navigateToScreen('CANVAS');
			}
			
			private function navigateToScreen(screenName:String):void
			{
				arrDG.removeAll();
				
				KCache.writeDataToCache(_viewArr);
				
				if(screenName.indexOf("CANVAS") == -1) //if screen name is Login
				{
					KSketch_LoginView.userData = new Object();
					
					_isLoggingOut = true;
					
					//if the user logs off, reset everything
					if(KSketch_LoginView._isLoggedIn)
						startMonitorConnection();
					else
						navigator.pushView(KSketch_LoginView);
					
				}	
				else //if screen name is Canvas
					navigator.pushView(KSketch_CanvasView, userData);
			}
			
			private function prepareLogout():void
			{
				//if user is recorded as log in but using cache for data retrieval
				//then make sure data is synced on web before he logs out
				if(_isConnected)
				{
					if(_viewArr[3] == "CACHE")
						syncLogout();
					else
						endLogout(true);
				}
				else
				{
					var hasToSync:Boolean = hasToSync = KSketch_UserSketches.hasToSyncSketches(_viewArr[1]);
					
					if(_viewArr[3] == "CACHE" && hasToSync)
					{
						_logoffNotice.open(this, true);
						PopUpManager.centerPopUp(_logoffNotice);
					}
					else
						endLogout(true);
				}
			}
			
			private function syncLogout():void
			{
				//identify sketches that are stored in cache and haven't been saved on web
				//also get the sketch documents of these sketches.
				var syncSketchArr:ArrayCollection;
				var syncSketchDocsArr:ArrayCollection;
				
				if(_viewArr[1] && _viewArr[2])
				{
					var sketchDocArr:Array = String(_viewArr[2]).split("%");							//get sketch documents	
					var sketchObj:Object = com.adobe.serialization.json.JSON.decode(_viewArr[1], true);	//get sketch lis
					var sketchObjArr:Array = [];
					sketchObjArr = (sketchObj.entities as Array);
					
					if(sketchObjArr.length != 0)
					{
						//only add sketches with sketchId = -1 and its document
						syncSketchArr = KSketch_UserSketches.getSketchArrayToSync(sketchObjArr);
						syncSketchDocsArr = KSketch_UserSketches.getSketchDocumentArrayToSync(sketchDocArr, syncSketchArr);
					}
					
					if(syncSketchArr && syncSketchDocsArr)
					{
						_syncOptions.resetSyncArrays();
						
						_syncOptions._isConnected = true;
						_syncOptions.currentUser = com.adobe.serialization.json.JSON.decode(_viewArr[0], true);
						_syncOptions.syncSketchArr = syncSketchArr;
						_syncOptions.syncSketchDocsArr = syncSketchDocsArr;
						
						_syncOptions.save();
						
						endLogout(true);
					}
					else
						endLogout(false);
				}
				else
					endLogout(false);
			}
			
			public function endLogout(overwriteCache:Boolean):void
			{
				KSketch_LoginView._isLoggedIn = false;
				KSketch_LoginView._isLoggedOut = true;
				_isLoggingOut = false;
				
				var obj:Object = new Object();
				obj.status = "failed";
				obj.u_login = "n.a";
				var kUser:KSketch_User = new KSketch_User(obj);
				userData.kUser = kUser;
				
				_viewArr[0] = com.adobe.serialization.json.JSON.encode(userData.kUser);
				_viewArr = KCache.softReset(_viewArr);
				
				if(overwriteCache)
					KCache.writeDataToCache(_viewArr);
				
				navigator.pushView(KSketch_LoginView);
			}
			
			public function startMonitorConnection():void
			{
				//check for network connection
				monitor = new URLMonitor(new URLRequest(KSketchWebLinks.url));
				monitor.addEventListener(StatusEvent.STATUS, monitorConnection);
				monitor.start();
			}
			
			private function monitorConnection(event:StatusEvent):void
			{
				if(monitor.available)
					_isConnected = true;
				else
					_isConnected = false;
				
				monitor.stop();
				monitor.removeEventListener(StatusEvent.STATUS, monitorConnection);
				
				if(!_isLoggingOut)
					prepareHomeView();
				else
					prepareLogout();
			}
			
			private function startProgressBar():void
			{
				progressBar.visible = true;
				
				progressTimer = new Timer(1);
				progressTimer.addEventListener(TimerEvent.TIMER, progressBarHandler);
				progressTimer.start();
			}
			
			private function stopProgressBar():void
			{
				//stop progress bar
				progressTimer.stop();
				progressTimer.removeEventListener(TimerEvent.TIMER, progressBarHandler);
				progressBar.visible = false;
			}
			
			private function progressBarHandler(event:TimerEvent):void
			{
				progressBar.value += .008;
				
				if (progressBar.value >= 1)
					progressBar.value = 0;
			}
			
			private function datagridSelectItem():void
			{
				selectedSketchName = sg.edu.smu.ksketch2.canvas.components.view.KSketch_HomeView_IconItemRenderer.selectedSketchName;
				selectedSketchId = sg.edu.smu.ksketch2.canvas.components.view.KSketch_HomeView_IconItemRenderer.selectedSketchId;
				selectedSketchVersion = sg.edu.smu.ksketch2.canvas.components.view.KSketch_HomeView_IconItemRenderer.selectedVersion;
				
				_isXML = true; //set boolean to true because this JSON retrieval will be XML of sketch
				
				if(_viewArr[3] == "CACHE")
					retrieveXMLDataFromCache();
				else 
				{
					if(selectedSketchId && selectedSketchVersion)
					{
						//get json object of sketch from the URL and according to sketchid and version number
						GetUserSketch.url = KSketchWebLinks.jsonurlSketchXML + "/" + selectedSketchId + "/" + selectedSketchVersion;
						GetUserSketch.send();
						startProgressBar();
					}
				}
			}
			
			private function resetDatagridSelectItem():void
			{
				selectedSketchName = null;
				selectedSketchId = null;
				selectedSketchVersion = null;
				KSketch_HomeView_IconItemRenderer.selectedSketchName = null;
				KSketch_HomeView_IconItemRenderer.selectedSketchId = null;
				KSketch_HomeView_IconItemRenderer.selectedVersion = null;
			}
			
		]]>
	</fx:Script>
	
	<s:Group width="100%" height="100%">
		<!-- defines the page to arrange 'group' elements from left to right -->
		<s:layout> <s:HorizontalLayout gap="2"/> </s:layout>
		
		<!-- First half of the page -->
		<s:Group width="33%" height="100%">
			<!-- sets the background to grey -->
			<s:Rect width="100%" height="100%">
				<s:fill> <s:SolidColor color="0xE7E7E7"/> </s:fill>
			</s:Rect>
			
			<s:Group width="100%" height="100%">
				<!-- defines the page to arrange 'group' elements from top to bottom -->
				<s:layout> <s:VerticalLayout paddingLeft="15" paddingRight="15" paddingTop="15"/> </s:layout>
				
				<!-- Alignment for logo button -->
				<s:Group width="100%" height="40%">
					<s:layout> <s:HorizontalLayout paddingLeft="48" paddingTop="10"/> </s:layout>
					<buttons:KSketch_Button id="logoHolder"
											width="{KSketchStyles.LOGO_BUTTON_WIDTH}" 
											height="{KSketchStyles.LOGO_BUTTON_HEIGHT}"
											click="startMonitorConnection()"/>
				</s:Group>
				
				<s:Group width="100%">
					<s:layout> <s:VerticalLayout paddingBottom="10"/> </s:layout>
					<s:Button width="100%" label="Create a Sketch" click="createSketch()"/>
				</s:Group>
				
				<s:Group width="100%">
					<s:layout> <s:VerticalLayout paddingBottom="10"/> </s:layout>
					<s:Button id="loginButton" width="100%" click="navigateToScreen('LOGIN')"/>
				</s:Group>
				
				<!-- end alignment for buttons -->
			</s:Group>
		</s:Group>
		<!-- end of first half -->
		
		<!-- Second half of the page -->
		<s:Group width="67%" height="100%">
			
			<!-- Background for previewer -->
			<s:Rect width="100%" height="100%">
				<s:fill>
					<s:SolidColor color="0xE7E7E7"/>
				</s:fill>
			</s:Rect>
			
			<!--Previewer portion-->
			<s:Group width="100%" height="100%">
				<s:Rect top="15" left="15" right="15" bottom="15">
					<s:fill>
						<s:SolidColor color="0xFFFFFF"/>
					</s:fill>
					<s:filters>
						<s:DropShadowFilter angle="90" distance="1" color="0xdfdfdf"/>
					</s:filters>
				</s:Rect>
				
				<s:Group top="15" left="15" right="15" bottom="15">
					<s:List id="listSketches" contentBackgroundAlpha="0" width="100%" height="100%"
							itemRenderer="sg.edu.smu.ksketch2.canvas.components.view.KSketch_HomeView_IconItemRenderer"
							dataProvider="{arrDG}" change="datagridSelectItem()"
							>
					</s:List>
					<s:Label id="listSketches_unavailable" text="Start a new sketch now!" visible="false"/>
					
					<popup:DataProgressBar id="progressBar" skinClass="sg.edu.smu.ksketch2.canvas.components.popup.KSketch_DataProgressBar"
										   horizontalCenter="0" verticalCenter="0" visible="false"/>
				</s:Group>
				
			</s:Group> 
			<!-- end of previewer portion-->
		</s:Group>	
		<!-- end of second half -->
	</s:Group>
</s:View>
