<?xml version="1.0" encoding="utf-8"?>
<!--
*Copyright 2010-2012 Singapore Management University
*Developed under a grant from the Singapore-MIT GAMBIT Game Lab

*This Source Code Form is subject to the terms of the
*Mozilla Public License, v. 2.0. If a copy of the MPL was
*not distributed with this file, You can obtain one at
*http://mozilla.org/MPL/2.0/.
-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx" 
		actionBarVisible="false" 
		xmlns:view="sg.edu.smu.ksketch2.canvas.components.view.*"
		xmlns:buttons="sg.edu.smu.ksketch2.canvas.components.buttons.*" 
		xmlns:popup="sg.edu.smu.ksketch2.canvas.components.popup.*"
		initialize="init()"
		addedToStage="addedToStageHandler(event)"
		viewActivate="init()"
		destructionPolicy="never"
		>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:HTTPService id="GetUserSketch"               
					   resultFormat="text" 
					   result="ParseJSONObject(event)" 
					   showBusyCursor="false">                        
		</s:HTTPService>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectProxy;
			
			import air.net.URLMonitor;
			
			import sg.edu.smu.ksketch2.KSketchAssets;
			import sg.edu.smu.ksketch2.KSketchStyles;
			import sg.edu.smu.ksketch2.KSketchWebLinks;
			import sg.edu.smu.ksketch2.KSketch_User;
			import sg.edu.smu.ksketch2.KSketch_UserSketches;
			import sg.edu.smu.ksketch2.canvas.KSketch_LoginView;
			import sg.edu.smu.ksketch2.canvas.components.popup.KSketch_OfflineOptions;
			import sg.edu.smu.ksketch2.canvas.components.popup.KSketch_SaveOptions;
			import sg.edu.smu.ksketch2.canvas.components.popup.KSketch_SyncOptions;
			import sg.edu.smu.ksketch2.canvas.components.view.KSketch_HomeView_IconItemRenderer;
			import sg.edu.smu.ksketch2.utils.KSketchDocument;
			
			[Bindable]
			private var dataProxy:ObjectProxy;
			
			[Bindable] 
			public static var arrDG:ArrayCollection;	//to display user's list of sketches on the DataGrid
			
			public static var _mySO:SharedObject;
			public static var _cachedUser:String;
			public static var _cachedUserSketch:String;
			public static var _cachedSketchDocs:String;
			public static var _dup_cachedUser:String;
			public static var _dup_cachedUserSketch:String;
			public static var _dup_cachedSketchDocs:String;
			
			public static var autoSaveCounter:int = 0;
			
			private var monitor:URLMonitor;
			private var userData:Object = new Object();
			private var _syncOptions:KSketch_SyncOptions;
			private var _offlineOptions:KSketch_OfflineOptions;
			
			private var _lastClickEvent:int = 0;
			private var _isCanvas:Boolean;
			private var _isCached:Boolean;
			private var _isXML:Boolean;
			private var _successfulRetrievalFromWeb:Boolean;
			
			public var _isLoggedIn:Boolean;
			public var _isConnected:Boolean;
			public var _isUsingCache:Boolean;
			
			private var cacheTimer:Timer;
			private var refreshViewTimer:Timer;
			private var progressTimer:Timer;
			private var dataFromWebTimer:Timer = new Timer(10000,1);
			
			private function addedToStageHandler(event:Event):void
			{
				trace("stage orientation: " + stage.deviceOrientation);
				if(stage.deviceOrientation != "unknown")
				{
					trace("set to landscape");
					stage.setAspectRatio("landscape");
					stage.autoOrients = true;
					stage.addEventListener(StageOrientationEvent.ORIENTATION_CHANGE, orientationChangedHandler);
				}
				
				//check for network connection
				monitor = new URLMonitor(new URLRequest(KSketchWebLinks.url));
				monitor.addEventListener(StatusEvent.STATUS, isConnected);
				monitor.start();
				
				/*add timer to constantly cache data every X time
				cacheTimer = new Timer (60000, 1);
				cacheTimer.start();
				cacheTimer.addEventListener(TimerEvent.TIMER_COMPLETE, updateCache);*/
			}
			
			private function isConnected(event:StatusEvent):void
			{
				if(monitor.available)
					_isConnected = true;
				else
					_isConnected = false;
				
				monitor.stop();
				monitor.removeEventListener(StatusEvent.STATUS, isConnected);
				
				prepareView();
			}
			
			private function orientationChangedHandler(event:StageOrientationEvent):void {
				event.stopImmediatePropagation();
				if(event.afterOrientation == StageOrientation.ROTATED_RIGHT || event.afterOrientation == StageOrientation.ROTATED_LEFT)
					trace("Inside orientationChanging()");
			}
			
			public function refreshHomeView():void
			{
				//check for network connection
				monitor = new URLMonitor(new URLRequest(KSketchWebLinks.url));
				monitor.addEventListener(StatusEvent.STATUS, isConnected);
				monitor.start();
			}
			
			private function init():void
			{	
				_syncOptions = new KSketch_SyncOptions();
				_syncOptions.createDeferredContent();
				
				_offlineOptions = new KSketch_OfflineOptions;
				_offlineOptions.createDeferredContent();
				
				//set KSketch Logo
				logoHolder.init(KSketchAssets.texture_logo, KSketchAssets.texture_logo);
				
				//check if user is logged in
				_isLoggedIn = KSketch_LoginView._isLoggedIn;
			}
			
			private function prepareView():void
			{
				_mySO = SharedObject.getLocal("mydata");
				if (_mySO.data) {
					if(_mySO.data.user)
					{
						_cachedUser = _mySO.data.user;	
						_dup_cachedUser = _cachedUser;
					}
					
					if(_mySO.data.userSketch)
					{
						_cachedUserSketch = _mySO.data.userSketch;
						_dup_cachedUserSketch = _cachedUserSketch;
					}
					
					if(_mySO.data.sketchDocs)
					{
						_cachedSketchDocs = _mySO.data.sketchDocs;
						_dup_cachedSketchDocs = _cachedSketchDocs;
					}
				}
				
				if(!data || data == "Skip Login" || data == "Lost Connection" || data == "Janrain Failed")
				{
					if(data)
					{
						var errorMessage:String = String(data);
						
						if(errorMessage == "Lost Connection")
							listSketches_unavailable.text = "Failed to login. You are not connected to the Internet.";
						else if(errorMessage == "Janrain Failed")
							listSketches_unavailable.text = "Our login provider is not accessible at the moment. Please try again later.";
					}
					
					var obj:Object = new Object();
					obj.status = "failed";
					obj.u_login = "n.a";
					var kUser:KSketch_User = new KSketch_User(obj);
					userData.kUser = kUser;
					
					loginButton.label = "Login";
				}
				else
				{
					
					//cast data from previous view to ObjectProxy. This is to avoid getting IEventDispatcher error
					dataProxy = new ObjectProxy(data);
					
					if(dataProxy.kUser)
						userData.kUser = dataProxy.kUser;
					
					if(_isLoggedIn)
						loginButton.label = "Logout, "+ userData.kUser.u_realname;
					else
						loginButton.label = "Login";
				}
				
				userData.homeView = this;
				userData.kSketchDocument = null;
				_dup_cachedUser = com.adobe.serialization.json.JSON.encode(userData.kUser);
				
				updateDataList();
			}
			
			public function updateDataList():void
			{
				trace("Updating data list");
				if(arrDG)
					arrDG.removeAll();
				
				if(_isConnected)
				{
					if(_isLoggedIn)
					{
						if(KSketch_SaveOptions.isSaved)
						{
							refreshViewTimer = new Timer (5000, 1);
							refreshViewTimer.start();
							refreshViewTimer.addEventListener(TimerEvent.TIMER_COMPLETE, refreshViewFromWeb);
						}
						else
							retrieveDataFromWeb();
					}
					else
						retrieveDataFromCache();
				}
				else
					retrieveDataFromCache();
			}
			
			private function retrieveDataFromCache():void
			{
				//If there is a timer for web retrieval, remove it
				if(dataFromWebTimer.hasEventListener(TimerEvent.TIMER_COMPLETE))
				{
					dataFromWebTimer.stop();
					dataFromWebTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, timer_timeoutWebData);
					
					dataFromWebTimer = new Timer(1,1)
					dataFromWebTimer.addEventListener(TimerEvent.TIMER_COMPLETE, timer_timeoutWebData);
					dataFromWebTimer.start();
				}
				else
				{
				
					_isUsingCache = true;
					
					var rawData:String;
					
					if(_dup_cachedUserSketch && (_cachedUser == _dup_cachedUser))
					{
						
						rawData = _dup_cachedUserSketch;
						
						var obj:Object = com.adobe.serialization.json.JSON.decode(rawData,true);
						trace("Retrieve from cache raw data: " + rawData);
						retrieveData(obj, _dup_cachedUserSketch);
						
						progressTimer.stop();
						progressTimer.removeEventListener(TimerEvent.TIMER, timer_tickHandler);
						progressBar.visible = false;
					}
					else
						resetListOfSketches();
				}
			}
			
			private function refreshViewFromWeb(event:TimerEvent):void
			{
				refreshViewTimer.removeEventListener(TimerEvent.TIMER, refreshViewFromWeb);
				refreshViewTimer.stop();
				
				retrieveDataFromWeb();
			}
			
			public function retrieveDataFromWeb():void
			{
				trace("retrieving from web");
				
				arrDG.removeAll();
				
				_isUsingCache = false;
				_isXML = false;	//set boolean to false because first JSON retrieval is list of sketches, not XML of sketch
				
				//reset variable for successful retrieval from web to false
				_successfulRetrievalFromWeb = false;
				
				//get json object of user's list of sketches from the URL and according to his real name
				GetUserSketch.url = KSketchWebLinks.jsonurlSketch + userData.kUser.id;
				GetUserSketch.send();
				GetUserSketch.addEventListener(FaultEvent.FAULT, faultHandler);
				
				startProgressBar();
				
				//start timeout timer for web retrieval
				dataFromWebTimer = new Timer(60000,1);
				dataFromWebTimer.start();
				dataFromWebTimer.addEventListener(TimerEvent.TIMER_COMPLETE, timer_timeoutWebData);
			}
			
			private function ParseJSONObject(event:ResultEvent):void
			{
				var rawData:String = String(event.result);
				var obj:Object = com.adobe.serialization.json.JSON.decode(rawData,true);
				retrieveData(obj,rawData);
				
				trace("successfully retrieved data from the web");
				
				_successfulRetrievalFromWeb = true;
				
				//make sure offline option box is closed if it was open because of disconnectivity at any point
				if(_offlineOptions.isOpen)
				{
					_offlineOptions.close();
					PopUpManager.removePopUp(_offlineOptions);
				}
				
				//stop progress bar
				progressTimer.stop();
				progressTimer.removeEventListener(TimerEvent.TIMER, timer_tickHandler);
				progressBar.visible = false;
				
				//stop timeout for web retrieval
				dataFromWebTimer.stop();
				dataFromWebTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, timer_timeoutWebData);
			}
			
			private function sketchSync():void
			{
				trace("inside sketch sync: " + _cachedUserSketch);
				if(_cachedUser)
				{
					var previousCachedUser:KSketch_User = new KSketch_User(com.adobe.serialization.json.JSON.decode(_cachedUser,true));
					var currentCachedUser:KSketch_User = new KSketch_User(com.adobe.serialization.json.JSON.decode(_dup_cachedUser,true));
					if(_cachedUserSketch && (previousCachedUser.u_realname == "Anonymous" || previousCachedUser.u_realname == currentCachedUser.u_realname))
					{
						
						var newSketchObj:Object = com.adobe.serialization.json.JSON.decode(_dup_cachedUserSketch);
						var oldSketchObj:Object = com.adobe.serialization.json.JSON.decode(_cachedUserSketch);	
						
						trace("hello:" + _dup_cachedUserSketch + "..." + _cachedUserSketch);
						if(newSketchObj.entities.length != oldSketchObj.entities.length)
						{
							trace("bye");
							KSketch_SyncOptions._currentUser = userData.kUser;
							KSketch_SyncOptions._cachedUserSketch = _cachedUserSketch;
							KSketch_SyncOptions._cachedSketchDocs = _cachedSketchDocs;
							KSketch_SyncOptions._dup_cachedUserSketch = _dup_cachedUserSketch;
							KSketch_SyncOptions._dup_cachedSketchDocs = _dup_cachedSketchDocs;
							
							_syncOptions.open(this,true);
							PopUpManager.centerPopUp(_syncOptions);	
						}
					}
				}
				
				writeDataToCache();
			}
			
			private function retrieveData(obj:Object, rawData:String):void
			{
				startProgressBar();
				
				if(obj != null)
				{
					if(!_isXML)	//if object contains list of sketches
					{
						//Check the 'entities' property of the object to know if user has any existing sketches
						var arrEntities:Array = [];
						arrEntities = (obj.entities as Array);
						
						if(arrEntities.length != 0)
						{
							//Create a UserSketch instance by sending only the 'entities' of the JSON object and user's ID
							var userSketch:KSketch_UserSketches = new KSketch_UserSketches(arrEntities, userData.kUser.id);
							
							initializeAutoSaveSketchName(userSketch);
							
							//Set DataGrid array to user sketches collection
							var sortBy:String = "sketchId";
							if(!arrDG)
								arrDG = userSketch.getUserSketchArray(sortBy); 
							else
								arrDG.addAll(userSketch.getUserSketchArray(sortBy));
							
							_dup_cachedUserSketch = rawData;
							
							listSketches_unavailable.visible = false;
							
							sketchSync();
						}
						else
							startNewSketch();		
					}
					else //if object contains XML of a particular sketch
					{
						_isXML = false;
						trace("rawdata from retrieve data: " + rawData);
						
						//create XML and date object from JSON to create a KSketchDocument object
						var xml:XML = new XML(obj.data.fileData);
						var date:Date = new Date(obj.modified);
						var docObj:KSketchDocument = new KSketchDocument(obj.data.fileName, xml, obj.id, date, obj.data.originalName, obj.data.originalVersion, obj.data.sketchId, obj.data.changeDescription);
						
						if(_dup_cachedSketchDocs)
							_dup_cachedSketchDocs += "%" + rawData;
						else
							_dup_cachedSketchDocs = rawData;
						
						userData.kSketchDocument = docObj;
						
						navigateToScreen("CANVAS");
					}
				}
			}
			
			private function initializeAutoSaveSketchName(arrUserSketch:KSketch_UserSketches):void
			{
				var sortBy:String = "fileName";
				var arrTemp:ArrayCollection = arrUserSketch.getUserSketchArray(sortBy); 
				
				for(var i:int = 0; i<arrTemp.length; i++)
				{
					if(arrTemp.getItemAt(i).name.indexOf("My Sketch") >= 0)
					{
						var tempFilename:String = arrTemp.getItemAt(i).name;
						var trimFilename:String = tempFilename.replace("My Sketch", ""); 
						var isANumber:Boolean = !isNaN(Number(trimFilename));
						
						if(isANumber)
						{
							var tempNo:int = int(trimFilename);
							if(tempNo > autoSaveCounter)
								autoSaveCounter = tempNo;	
						}
					}
				}
			}
			
			private function startNewSketch():void
			{
				if(_isConnected && _isLoggedIn)
				{
					//if previous user has sketches and is Anonymous, display the sketches as well
					//var prevUserObj:Object = com.adobe.serialization.json.JSON.decode(_cachedUser,true);
					if(_cachedUser)
					{
						var previousCachedUser:KSketch_User = new KSketch_User(com.adobe.serialization.json.JSON.decode(_cachedUser,true));
						if(_cachedUserSketch && previousCachedUser.u_realname == "Anonymous")
						{
							KSketch_SyncOptions._currentUser = userData.kUser;
							KSketch_SyncOptions._cachedUserSketch = _cachedUserSketch;
							KSketch_SyncOptions._cachedSketchDocs = _cachedSketchDocs;
							KSketch_SyncOptions._dup_cachedUserSketch = _dup_cachedUserSketch;
							KSketch_SyncOptions._dup_cachedSketchDocs = _dup_cachedSketchDocs;
							
							_syncOptions.open(this,true);
							PopUpManager.centerPopUp(_syncOptions);
						}
						else
							resetListOfSketches();
					}
				}
				else
					resetListOfSketches();
				
				writeDataToCache();
			}
			
			private function resetListOfSketches():void
			{
				listSketches_unavailable.visible = true;
				_cachedUserSketch = null;
				_dup_cachedUserSketch = null;
				_cachedSketchDocs = null;
				_dup_cachedSketchDocs = null;
			}
			
			public static function writeDataToCache():void
			{
				_mySO.clear();
				
				_cachedUser = _dup_cachedUser;
				_mySO.data.user = _cachedUser;
				_dup_cachedUser = null;
				
				if(_dup_cachedUser)
				{
					_cachedUser = _dup_cachedUser;
					_mySO.data.user = _cachedUser;
					_dup_cachedUser = null;
				}
				
				if(_dup_cachedUserSketch)
				{
					_cachedUserSketch = _dup_cachedUserSketch;
					_mySO.data.userSketch = _cachedUserSketch;
					_dup_cachedUserSketch = null;
				}
				
				if(_dup_cachedSketchDocs)
				{
					_cachedSketchDocs = _dup_cachedSketchDocs;
					_mySO.data.sketchDocs = _cachedSketchDocs;
					_dup_cachedSketchDocs = null;
				}
				
				_mySO.flush();
				
				_mySO = SharedObject.getLocal("mydata");
				if (_mySO.data) {
					if(_mySO.data.user)
					{
						_cachedUser = _mySO.data.user;	
						_dup_cachedUser = _cachedUser;
					}
					
					if(_mySO.data.userSketch)
					{
						_cachedUserSketch = _mySO.data.userSketch;
						_dup_cachedUserSketch = _cachedUserSketch;
					}
					
					if(_mySO.data.sketchDocs)
					{
						_cachedSketchDocs = _mySO.data.sketchDocs;
						_dup_cachedSketchDocs = _cachedSketchDocs;
					}
				}
				
				trace("INITIALIZING CACHED DATA ----");
				trace("User: " + _cachedUser);
				trace("Sket: " + _cachedUserSketch);
				trace("Docs: " + _cachedSketchDocs);
				
			}
			
			private function datagridSelectItem():void
			{
				var selectedSketchName:String = sg.edu.smu.ksketch2.canvas.components.view.KSketch_HomeView_IconItemRenderer.selectedSketchName;
				var selectedSketchId:String = sg.edu.smu.ksketch2.canvas.components.view.KSketch_HomeView_IconItemRenderer.selectedSketchId;
				var selectedSketchVersion:String = sg.edu.smu.ksketch2.canvas.components.view.KSketch_HomeView_IconItemRenderer.selectedVersion;
				
				_isXML = true; //set boolean to true because this JSON retrieval will be XML of sketch
				_isCanvas = true;
				
				if(_isUsingCache)
				{
					if(selectedSketchName)
					{
						if(_dup_cachedSketchDocs)
						{
							var isSketch:Boolean = false;
							var sketchDocumentListArr:Array = _dup_cachedSketchDocs.split("%");
							
							for(var i:int=0; i<sketchDocumentListArr.length; i++)
							{
								var sketchObj:Object = com.adobe.serialization.json.JSON.decode(sketchDocumentListArr[i], true);
								
								//get sketchID and versionNo.
								var tempSketchName:String = sketchObj.data.fileName;
								var tempSketchId:String = sketchObj.data.sketchId;
								var tempSketchVer:String = sketchObj.data.version;
								
								if (tempSketchName == selectedSketchName)
								{
									tempSketchName = "";
									tempSketchId = "";
									tempSketchVer = "";
									_isXML = true;
									
									var rawData:String = sketchDocumentListArr[i];
									var obj:Object = com.adobe.serialization.json.JSON.decode(rawData,true);
									retrieveData(obj, rawData);
									
									isSketch = true;
									break;
								}
							}
							
							if(!isSketch)
								trace("display alert box that data has not been downloaded yet and needs internet connection to load the data");
						}
						else
							trace("display alert box that data has not been downloaded yet and needs internet connection to load the data");
					}
				}
				else 
				{
					if(selectedSketchId && selectedSketchVersion)
					{
						//get json object of sketch from the URL and according to sketchid and version number
						GetUserSketch.url = KSketchWebLinks.jsonurlSketchXML + "/" + selectedSketchId + "/" + selectedSketchVersion;
						GetUserSketch.send();
						startProgressBar();
					}
				}
				
				selectedSketchName = null;
				selectedSketchId = null;
				selectedSketchVersion = null;
				KSketch_HomeView_IconItemRenderer.selectedSketchName = null;
				KSketch_HomeView_IconItemRenderer.selectedSketchId = null;
				KSketch_HomeView_IconItemRenderer.selectedVersion = null;
			}
			
			private function navigateToScreen(screenName:String):void
			{
				if(_dup_cachedUser || _dup_cachedUserSketch || _dup_cachedSketchDocs)
				{
					/*if(cacheTimer.hasEventListener(TimerEvent.TIMER_COMPLETE))
					{
						cacheTimer.removeEventListener(TimerEvent.TIMER, updateCache);
						cacheTimer.stop();
					}*/
					
					writeDataToCache();
				}	
				
				arrDG = new ArrayCollection();
				if(screenName.indexOf("CANVAS") == -1) //if screen name is Login
				{
					KSketch_LoginView.userData = new Object();
					KSketch_LoginView._isLoggedIn = false;
					navigator.pushView(KSketch_LoginView);
				}	
				else //if screen name is Canvas
					navigator.pushView(KSketch_CanvasView, userData);
			}
			
			private function createSketch():void
			{
				KSketch_CanvasView.isNewSketch = true;
				navigateToScreen('CANVAS');
			}
		
			private function startProgressBar():void
			{
				progressBar.visible = true;
				
				progressTimer = new Timer(1);
				progressTimer.addEventListener(TimerEvent.TIMER, timer_tickHandler);
				progressTimer.start();
			}
			
			private function timer_tickHandler(event:TimerEvent):void
			{
				progressBar.value += .008;
				
				if (progressBar.value >= 1)
					progressBar.value = 0;
			}
		
			private function timer_timeoutWebData(event:TimerEvent):void
			{
				trace("inside timer_timeoutWebData: " + event.type);
				
				if(!_successfulRetrievalFromWeb)
				{
					//Open offline option pop-up
					_offlineOptions.open(this,true);
					PopUpManager.centerPopUp(_offlineOptions);
				}
				
				//if progress bar is showing
				if(progressBar.visible)
				{
					//stop progress bar
					progressTimer.stop();
					progressTimer.removeEventListener(TimerEvent.TIMER, timer_tickHandler);
					progressBar.visible = false;
				}
				
				dataFromWebTimer.stop();
				dataFromWebTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, timer_timeoutWebData);
			}
			
			private function faultHandler(event:FaultEvent):void
			{
				_isConnected = false;
				updateDataList();
			}
		]]>
	</fx:Script>
	
	<s:Group width="100%" height="100%">
		<!-- defines the page to arrange 'group' elements from left to right -->
		<s:layout> <s:HorizontalLayout gap="2"/> </s:layout>
		
		<!-- First half of the page -->
		<s:Group width="33%" height="100%">
			<!-- sets the background to grey -->
			<s:Rect width="100%" height="100%">
				<s:fill> <s:SolidColor color="0xE7E7E7"/> </s:fill>
			</s:Rect>
			
			<s:Group width="100%" height="100%">
				<!-- defines the page to arrange 'group' elements from top to bottom -->
				<s:layout> <s:VerticalLayout paddingLeft="15" paddingRight="15" paddingTop="15"/> </s:layout>
				
				<!-- Alignment for logo button -->
				<s:Group width="100%" height="40%">
					<s:layout> <s:HorizontalLayout paddingLeft="48" paddingTop="10"/> </s:layout>
					<buttons:KSketch_Button id="logoHolder"
											width="{KSketchStyles.LOGO_BUTTON_WIDTH}" 
											height="{KSketchStyles.LOGO_BUTTON_HEIGHT}"
											 click="refreshHomeView()"/>
				</s:Group>
				
				<s:Group width="100%">
					<s:layout> <s:VerticalLayout paddingBottom="10"/> </s:layout>
					<s:Button width="100%" label="Create a Sketch" click="createSketch()"/>
				</s:Group>
				
				<s:Group width="100%">
					<s:layout> <s:VerticalLayout paddingBottom="10"/> </s:layout>
					<s:Button id="loginButton" width="100%" click="navigateToScreen('LOGIN')"/>
				</s:Group>
				
				<!-- end alignment for buttons -->
			</s:Group>
		</s:Group>
		<!-- end of first half -->
		
		<!-- Second half of the page -->
		<s:Group width="67%" height="100%">
			
			<!-- Background for previewer -->
			<s:Rect width="100%" height="100%">
				<s:fill>
					<s:SolidColor color="0xE7E7E7"/>
				</s:fill>
			</s:Rect>
			
			<!--Previewer portion-->
			<s:Group width="100%" height="100%">
				<s:Rect top="15" left="15" right="15" bottom="15">
					<s:fill>
						<s:SolidColor color="0xFFFFFF"/>
					</s:fill>
					<s:filters>
						<s:DropShadowFilter angle="90" distance="1" color="0xdfdfdf"/>
					</s:filters>
				</s:Rect>
				
				<s:Group top="15" left="15" right="15" bottom="15">
					<s:List id="listSketches" contentBackgroundAlpha="0" width="100%" height="100%"
					 	itemRenderer="sg.edu.smu.ksketch2.canvas.components.view.KSketch_HomeView_IconItemRenderer"
						dataProvider="{arrDG}" change="datagridSelectItem()"
					 	>
					</s:List>
					<s:Label id="listSketches_unavailable" text="Start a new sketch now!" visible="false"/>
					
					<popup:DataProgressBar id="progressBar" skinClass="sg.edu.smu.ksketch2.canvas.components.popup.KSketch_DataProgressBar"
											horizontalCenter="0" verticalCenter="0" visible="false"/>
				</s:Group>
				
			</s:Group> 
			<!-- end of previewer portion-->
		</s:Group>	
		<!-- end of second half -->
	</s:Group>
</s:View>
