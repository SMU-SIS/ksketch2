<?xml version="1.0" encoding="utf-8"?>
<!--
*Copyright 2010-2012 Singapore Management University
*Developed under a grant from the Singapore-MIT GAMBIT Game Lab

*This Source Code Form is subject to the terms of the
*Mozilla Public License, v. 2.0. If a copy of the MPL was
*not distributed with this file, You can obtain one at
*http://mozilla.org/MPL/2.0/.
-->
<s:Button xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" width="{height*2}" height="100%"
		 skinClass="sg.edu.smu.ksketch2.controls.components.timeBar.KTouchTimebarButtonSkin">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import org.gestouch.events.GestureEvent;
			import org.gestouch.gestures.SwipeGesture;
			import org.gestouch.gestures.TapGesture;
			
			import sg.edu.smu.ksketch2.KSketch2;
			import sg.edu.smu.ksketch2.canvas.KSketch_CanvasView;
			
			public static const LEFT:int = -1;
			public static const RIGHT:int = 1;

			private const _PAN_SPEED_1:int = 1
			private const _PAN_SPEED_2:int = 3;
			private const _PAN_SPEED_3:int = 9;
			private const _PAN_SPEED_4:int = 15;
			private const _PAN_THRESHOLD_1:Number = 5;
			private const _PAN_THRESHOLD_2:Number = 8;
			private const _PAN_THRESHOLD_3:Number = 10;
			private const _STEP_THRESHOLD:Number = 7;
			
			private var _KSketch:KSketch2;
			private var _type:int;
			private var _timeControl:KTouchTimeControl;
		
			private var _tapGesture:TapGesture;
			private var _swipeGesture:SwipeGesture
			
			private const _FILL1:uint = 0x000000;

			public function init(KSketchInstance:KSketch2, timeControl:KTouchTimeControl, type:int):void
			{
				_KSketch = KSketchInstance;
				_timeControl = timeControl;
				_type = type;
				
				_tapGesture = new TapGesture(this);
				_tapGesture.maxTapDuration = 200;
				_tapGesture.addEventListener(org.gestouch.events.GestureEvent.GESTURE_RECOGNIZED, _handleTap);
				
				_swipeGesture = new SwipeGesture(this);
				_swipeGesture.minOffset = this.width*0.75;
				_swipeGesture.addEventListener(org.gestouch.events.GestureEvent.GESTURE_RECOGNIZED, _handleSwipe);
				
				var iconGraphics:Graphics = (skin as KTouchTimebarButtonSkin).iconGraphics.graphics
				
				if(_type == LEFT)
				{
					iconGraphics.beginFill(KSketch_CanvasView.CANVAS_BUTTON_COLOR, KSketch_CanvasView.CANVAS_BUTTON_BLEND);
					iconGraphics.moveTo(width*0.5,height*0.5);
					iconGraphics.lineTo(width*0.727,height*0.75);
					iconGraphics.lineTo(width*0.727,height*0.25);
					iconGraphics.lineTo(width*0.5,height*0.5);
					iconGraphics.endFill();
										
					iconGraphics.beginFill(KSketch_CanvasView.CANVAS_BUTTON_COLOR, KSketch_CanvasView.CANVAS_BUTTON_BLEND);
					iconGraphics.moveTo(width*0.2181,height*0.5);
					iconGraphics.lineTo(width*0.4454,height*0.25);
					iconGraphics.lineTo(width*0.4454,height*0.75);
					iconGraphics.lineTo(width*0.2181,height*0.5);
					iconGraphics.endFill();

					iconGraphics.lineStyle(1, KSketch_CanvasView.CANVAS_BUTTON_COLOR, KSketch_CanvasView.CANVAS_DIVIDER_BLEND);
					iconGraphics.moveTo(width,height*0.1);
					iconGraphics.lineTo(width,height*0.9);
				}
				else
				{
					iconGraphics.beginFill(KSketch_CanvasView.CANVAS_BUTTON_COLOR, KSketch_CanvasView.CANVAS_BUTTON_BLEND);
					iconGraphics.moveTo(width*0.5,height*0.5);
					iconGraphics.lineTo(width*0.2727,height*0.25);
					iconGraphics.lineTo(width*0.2727,height*0.75);
					iconGraphics.lineTo(width*0.5,height*0.5);
					iconGraphics.endFill();
					
					iconGraphics.beginFill(KSketch_CanvasView.CANVAS_BUTTON_COLOR, KSketch_CanvasView.CANVAS_BUTTON_BLEND);
					iconGraphics.moveTo(width*0.7818,height*0.5);
					iconGraphics.lineTo(width*0.5545,height*0.75);
					iconGraphics.lineTo(width*0.5545,height*0.25);
					iconGraphics.lineTo(width*0.7818,height*0.5);
					iconGraphics.endFill();
					
					iconGraphics.lineStyle(1, KSketch_CanvasView.CANVAS_BUTTON_COLOR, KSketch_CanvasView.CANVAS_DIVIDER_BLEND);
					iconGraphics.moveTo(1,height*0.1);
					iconGraphics.lineTo(1,height*0.9);
				}
			}
			
			/**
			 * Tap handler to handle tapping to advance/roll back to next/prev frame
			 */
			private function _handleTap(event:org.gestouch.events.GestureEvent):void
			{
				var log:XML = <op/>;
				var date:Date = new Date();
				
				log.@category = "Timeline";
				
				if(_type == LEFT)
				{
					_timeControl.time -= KSketch2.ANIMATION_INTERVAL;
					log.@type = "Prev Frame";
				}
				else
				{
					_timeControl.time += KSketch2.ANIMATION_INTERVAL;
					log.@type = "Next Frame";
				}
				
				log.@elapsedTime = KTouchTimeControl.toTimeCode(date.time - _KSketch.logStartTime);
				_KSketch.log.appendChild(log);
				
//				_timeControl.floatingLabel.showMessage(_timeControl.time);
			}
			
			/**
			 * Tap handler to handle tapping to fast Forward or fast rewind to prev/next key frame
			 */
			private function _handleSwipe(event:org.gestouch.events.GestureEvent):void
			{
				var i:int;
				var length:int = _timeControl.timings.length;
				
				var timeList:Vector.<int> = new Vector.<int>();
				
				var log:XML = <op/>;
				var date:Date = new Date();
				
				log.@category = "Timeline";
				
				for(i = 0; i<length; i++)
				{
					timeList.push(_timeControl.timings[i]);
				}
				
				timeList.unshift(0);
				timeList.push(_timeControl.maximum);
				
				var currentTime:Number = _KSketch.time;			
				var currentIndex:int = 0;
				
				for(i = 0; i < timeList.length; i++)
				{
					currentIndex = i;
					
					if(currentTime <= timeList[i])
						break;
				}
				
				var toTime:Number = 0;
				
				if(_swipeGesture.offsetX < 0)
				{
					currentIndex -= 1;
					
					if(currentIndex < 0)
						toTime = 0;
					else
						toTime = timeList[currentIndex];
					
					log.@type = "Prev Key";

				}
				else
				{
					if(currentIndex < timeList.length)
					{
						var checkTime:Number = timeList[currentIndex];
						if(checkTime == _KSketch.time)
						{
							while(checkTime == _KSketch.time)
							{
								currentIndex += 1;
								
								if(currentIndex < timeList.length)
									checkTime = timeList[currentIndex];
								else
									break;
							}
						}
						
						toTime = checkTime;
					}
					else
						toTime = _KSketch.time;
					
					log.@type = "Next Key";
				}
				
				_timeControl.time = toTime;

				log.@elapsedTime = KTouchTimeControl.toTimeCode(date.time - _KSketch.logStartTime);
				_KSketch.log.appendChild(log);
				
//				_timeControl.floatingLabel.showMessage(toTime);
			}
		]]>
	</fx:Script>
</s:Button>