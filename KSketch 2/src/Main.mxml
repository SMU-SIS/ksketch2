<?xml version="1.0" encoding="utf-8"?>
<!--
*Copyright 2010-2012 Singapore Management University
*Developed under a grant from the Singapore-MIT GAMBIT Game Lab

*This Source Code Form is subject to the terms of the
*Mozilla Public License, v. 2.0. If a copy of the MPL was
*not distributed with this file, You can obtain one at
*http://mozilla.org/MPL/2.0/.
-->
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:local="*" showStatusBar = "false"
					   minWidth ="900" minHeight = "600" width = "1067" height = "600"
					   initialize="_init()" invoke="_loadInitHandler(event)" closing="_closingHandler(event)" 
					   applicationComplete="stage.addEventListener(KeyboardEvent.KEY_UP,mainCanvas.handleKeyBoardPress)">
	
	<!--<fx:Style source="KSketch_2.css" />-->

	<fx:Script>
		
		<![CDATA[
			import mx.controls.Alert;
			import mx.core.IVisualElement;
			import mx.core.Window;
			import mx.events.CloseEvent;
			
			import sg.edu.smu.ksketch.interactor.KSystemCommandExecutor;
			import sg.edu.smu.ksketch.io.KFileSaver;
			import sg.edu.smu.ksketch.logger.KLogger;
			import sg.edu.smu.ksketch.logger.KPlaySketchLogger;
			
			private var _debuggerWindow:Window;
			
			public function triggerLogger(event:MouseEvent):void
			{
				var windowFreezer:Alert = _showFreezer();	
				var logXML:XML = KLogger.logFile;
				var modelXML:XML = mainCanvas.facade.saveFile();
				var appTime:Number = mainCanvas.appState.time;
				var canvas:LoggerCanvas = new LoggerCanvas();
				KLogger.enabled = false;
				mainCanvas.appCanvas.resetCanvas();
				canvas.initLogger(mainCanvas.appCanvas,new KSystemCommandExecutor(
					mainCanvas.appState,mainCanvas.appCanvas,mainCanvas.facade));
				var close:Function = function (e:Event):void
				{
					mainCanvas.appCanvas.loadFile(modelXML);
					KLogger.setLogFile(logXML);
					mainCanvas.appState.time = appTime;
					KLogger.enabled = true;
					windowFreezer.setVisible(false);
				};
				_showWindow("Logger",425,440,canvas,close);
			}
			
			public function triggerSettings(event:MouseEvent):void
			{
				var windowFreezer:Alert = _showFreezer();	
				var close:Function = function (e:Event):void
				{
					windowFreezer.setVisible(false);
				};				
				_showWindow("Settings",400,400,new OptionCanvas(mainCanvas),close);
			}
			
			public function triggerDebugger(event:MouseEvent):void
			{
				var canvas:DebuggerCanvas = new DebuggerCanvas();
				canvas.initNewDebuggerCanvas(mainCanvas.facade,mainCanvas.appState);
				var close:Function = function (e:Event):void
				{
					canvas.removeAllEventListeners();
				};	
				if (_debuggerWindow)
					_debuggerWindow.close();
				_debuggerWindow = _showWindow("Debugger",400,600,canvas,close);
				_debuggerWindow.title = "Version "+mainCanvas.appState.appBuildNumber;
			}
			
			private function _closingHandler(e:Event):void
			{
				e.preventDefault();
				if (mainCanvas.needSave())
					mainCanvas.promptForSave(_close);
				else
					_close();
			}
			
			private function _close():void
			{
				mainCanvas.commandExecutor.doButtonCommand(KPlaySketchLogger.BTN_EXIT);
				stage.nativeWindow.close();
			}

			private function _showWindow(title:String,width:Number,height:Number,
										 child:IVisualElement,closeHandler:Function):Window
			{
				var window:Window = new Window();
				window.setStyle("backgroundColor","#EEEEFF");
				window.showStatusBar = false;
				window.title = title;
				window.width = width;
				window.height = height;
				window.addElement(child);
				window.addEventListener(Event.CLOSE,closeHandler);
				window.alwaysInFront = true;
				window.open();
				return window;
			}
			
			private function _showFreezer():Alert
			{
				var freezer:Alert = Alert.show("");
				freezer.width = 0;
				freezer.height = 0;
				return freezer;
			}
			
			private function _init():void
			{
				nativeWindow.x = (Capabilities.screenResolutionX - nativeWindow.bounds.width)/2;
				nativeWindow.y = (Capabilities.screenResolutionY - nativeWindow.bounds.height)/2;
				mainCanvas.setOptionTrigger(triggerSettings);
				mainCanvas.setLogTrigger(triggerLogger);
				mainCanvas.setDebugTrigger(triggerDebugger);
				mainCanvas.appInit(nativeWindow.bounds.width, nativeWindow.bounds.height, 
					bounds.width-width, bounds.height-height);
				nativeWindow.activate();
				
				KLogger.logNewFile(mainCanvas.appState.appBuildNumber); 
				
		//		_automateLogFileUpload(KLogger.FILE_APP_DIR, "log.txt", "Test-User-3",
		//			KLogger.LOG_SERVER_URL, KLogger.LOG_INTERVAL);
			}
			
			private function _automateLogFileUpload(logDir:String, logFile:String, username:String,
													logURL:String, logInterval:Number):void
			{
				var timerFunction:Function = function(e:TimerEvent):void
				{
					new KFileSaver().saveToDir(KLogger.logFile, logDir, logFile);	
					var requestURL:URLRequest = new URLRequest(logURL+"/"+username);
					requestURL.method = URLRequestMethod.POST;
					var f:File = File.applicationStorageDirectory.resolvePath(logDir+"/"+logFile);
					f.upload(requestURL, "file");
				};
				var logTimer:Timer = new Timer(logInterval,0);
				logTimer.addEventListener(TimerEvent.TIMER,timerFunction);
				logTimer.start();				
			}
			
			private function _loadInitHandler(event:InvokeEvent):void
			{
				if(event.arguments.length > 0)
				{
					var file:File = new File(event.arguments[0].toString());			
					var stream:FileStream = new FileStream();
					stream.open(file, FileMode.READ);
					var data:String = stream.readMultiByte(file.size, File.systemCharset);
					stream.close();
					var xml:XML = new XML(data);
					mainCanvas.appCanvas.loadFile(xml);
					KLogger.setLogFile(new XML(xml.child(KLogger.COMMANDS)));
				}
			}					
		]]>
		
	</fx:Script>
	
	<local:KSketch2Canvas width="100%" height="100%" id="mainCanvas"/>

</s:WindowedApplication>
