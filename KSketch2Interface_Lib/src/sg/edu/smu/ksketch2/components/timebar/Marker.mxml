<?xml version="1.0" encoding="utf-8"?>
<!--
*Copyright 2010-2012 Singapore Management University
*Developed under a grant from the Singapore-MIT GAMBIT Game Lab

*This Source Code Form is subject to the terms of the
*Mozilla Public License, v. 2.0. If a copy of the MPL was
*not distributed with this file, You can obtain one at
*http://mozilla.org/MPL/2.0/.
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="12" height="21">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.core.UIComponent;
			
			//Data
			private var _keyList:Vector.<Object>;
			private var _selected:Boolean;
			private var _type:int;
			private var _time:Number;
			private var _originalPosition:Number;
			private var _clone:Marker;
			
			//Display Variables
			private var _previous:Marker;
			private var _next:Marker;
			private var _linkedMarkers:Vector.<Marker>;
			private var _hasTransform:Boolean;
			private var _activityBars:Vector.<ActivityBar>;
			private var _color:uint;
			private var _barThickness:Number;
			
			//Booleans to help in testing collisions
			public var hasTranslate:Boolean = false;
			public var hasRotate:Boolean = false;
			public var hasScale:Boolean = false;

			public function init():void
			{
				linkedMarkers = new Vector.<Marker>();
				keyList = new Vector.<Object>();
			}
			
			public function get next():Marker
			{
				return _next;
			}
			
			public function set next(value:Marker):void
			{
				_next = value;
			}
			
			public function get previous():Marker
			{
				return _previous;
			}
			
			public function set previous(value:Marker):void
			{
				_previous = value;
			}
			
			public function get activityBars():Vector.<ActivityBar>
			{
				if(!_activityBars)
					_activityBars = new Vector.<ActivityBar>();
				return _activityBars;
			}
			
			public function set activityBars(value:Vector.<ActivityBar>):void
			{
				if(!_activityBars)
					_activityBars = new Vector.<ActivityBar>();
				_activityBars = value;
			}
			
			public function get linkedMarkers():Vector.<Marker>
			{
				return _linkedMarkers;
			}
			
			public function set linkedMarkers(value:Vector.<Marker>):void
			{
				_linkedMarkers = value
			}

			public function get keyList():Vector.<Object>
			{
				return _keyList;
			}

			public function set keyList(value:Vector.<Object>):void
			{
				_keyList = value;
			}

			public function get selected():Boolean
			{
				return _selected;
			}

			public function set selected(value:Boolean):void
			{
				_selected = value;
				if(_selected)
					currentState = "SELECTED"
				else
					currentState = "UNSELECTED"
			}

			public function get type():int
			{
				return _type;
			}

			public function set type(value:int):void
			{
				_type = value;
				if(_type == TimeWidget.OVERVIEW)
				{
					_color = 0x000000;
				}
				else
				{
					alpha = 0;

					if(_type == TimeWidget.TRANSLATE)
						_color = 0x0000FF;
					else if(_type == TimeWidget.ROTATE)
						_color = 0x006600;
					else if(_type == TimeWidget.SCALE)
						_color = 0xCC0033;
				}
			}

			public function get time():Number
			{
				return _time;
			}

			public function set time(value:Number):void
			{
				_time = value;
			}

			public function get originalPosition():Number
			{
				return _originalPosition;
			}

			public function set originalPosition(value:Number):void
			{
				_originalPosition = value;
			}
			
			public function moveWithFuture(dx:Number):void
			{
				if(_next)
					next.moveWithFuture(dx);
				
				updateX(dx);
			}
			
			public function updateX(dx:Number):void
			{
				x += dx;
				
				if(x <= 0)
				{
					dx = -x;
					x = 0;
					
					if(next)
						next.moveWithFuture(dx);
				}
				
				if(_previous)
				{
					if(_previous.x <= x)
						_previous.updateX(x-TimeWidget.pixelPerFrame);
				}
				
				for each(var linkedMarker:Marker in _linkedMarkers)
				{
					if(linkedMarker.type == TimeWidget.OVERVIEW)
					{
						if(linkedMarker.linkedMarkers.length > 1)
							linkedMarker.moveClone(x);
						else
							linkedMarker.x = x;
					}
					else
						linkedMarker.x = x;
					
					for each(var activityBar:ActivityBar in linkedMarker.activityBars)
					{
						activityBar.renderBar();
					}
				}
				
				if(x == _originalPosition)
					removeClone();
			}
			
			public function moveClone(xPos:Number):void
			{
				if(!_clone)
				{
					_clone = new Marker();
					_clone.selected = true;
					(parent as Group).addElement(_clone);
				}
				
				_clone.x = xPos;
			}
			
			public function removeClone():void
			{
				if(_clone)
				{
					(parent as Group).removeElement(_clone);
				}
			}

			public function get hasTransform():Boolean
			{
				return _hasTransform;
			}

			public function set hasTransform(value:Boolean):void
			{
				_hasTransform = value;
			}

			
		]]>
	</fx:Script>
	<s:states>
		<s:State name="SELECTED"/>
		<s:State name="UNSELECTED"/>
	</s:states>
	<s:Rect height="100%" width="100%" radiusX="2" radiusY="2" includeIn="UNSELECTED" x="-6">                              
		<s:stroke>
			<s:SolidColorStroke color="0x6d6e70" weight="1"/>
		</s:stroke>
		<s:fill>
			<s:SolidColor color="0xadb2bb" alpha="1"/>
		</s:fill>
	</s:Rect>
	<s:Rect height="100%" width="100%" radiusX="2" radiusY="2" includeIn="SELECTED" x="-6">                              
		<s:stroke>
			<s:SolidColorStroke color="0x000000" weight="0"/>
		</s:stroke>
		<s:fill>
			<s:SolidColor color="0xE6E8ED" alpha="1"/>
		</s:fill>
	</s:Rect>
</s:Group>