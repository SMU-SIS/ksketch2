<?xml version="1.0" encoding="utf-8"?>
<!--
*Copyright 2010-2012 Singapore Management University
*Developed under a grant from the Singapore-MIT GAMBIT Game Lab

*This Source Code Form is subject to the terms of the
*Mozilla Public License, v. 2.0. If a copy of the MPL was
*not distributed with this file, You can obtain one at
*http://mozilla.org/MPL/2.0/.
-->
<s:SparkSkin name="TimeSliderSkin"
			 xmlns:fx="http://ns.adobe.com/mxml/2009"
			 xmlns:s="library://ns.adobe.com/flex/spark"
			 xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
			 minHeight="11"
			 alpha.disabled="0.5">
	<!-- states -->
	<s:states>
		<s:State name="normal" />
		<s:State name="disabled" />
	</s:states>
	
	<fx:Metadata>
		[HostComponent("spark.components.HSlider")]
	</fx:Metadata>
	
	<fx:Script fb:purpose="styling">
		<![CDATA[
			
			/* Define the skin elements that should not be colorized.
			For slider, the skin itself is colorized but the individual parts are not. */
			static private const exclusions:Array = ["track", "thumb"];
			
			override public function get colorizeExclusions():Array {
				return exclusions;
			}
		]]>
	</fx:Script>
	
	<fx:Script>
		<![CDATA[
			import sg.edu.smu.ksketch2.controls.widgets.KTimeControl;
			
			import spark.components.HSlider;
			import spark.components.Label;
			import spark.primitives.Graphic;
			
			public static const TICK_MAX_LENGTH:Number = 25;
			public static const FULL:Number = 15;

			public static const MILLISECONDS:Number = 1000;
			public static const TEXT_SCALE:Number = 1;
			public static const MAX_PARTITIONS:int = 20;
			
			private var host:KTimeControl;
			private var drawLayer:Graphics;
			private var unusedIndex:int;
			private var labels:Vector.<Label>;
			
			override protected function initializationComplete():void {

				unusedIndex = 0;
				
				useChromeColor = true;
				super.initializationComplete();
				
				host = hostComponent as KTimeControl;
				drawLayer = ticks.graphics;
				labels = new Vector.<Label>();
				
				for(var i:int = 0; i<=20; i++)
				{
					var label:Label = new Label();
					label.visible = false;
					label.includeInLayout = false;
					label.y = 7.5;
					labels.push(label);
					ticks.addElement(label);
				}
			}
			
			override protected function measure():void {
				// Temporarily move the thumb to the left of the Slider so measurement
				// doesn't factor in its x position. This allows resizing the
				// HSlider to less than 100px in width.
				var thumbPos:Number = thumb.getLayoutBoundsX();
				thumb.setLayoutBoundsPosition(0, thumb.getLayoutBoundsY());
				super.measure();
				thumb.setLayoutBoundsPosition(thumbPos, thumb.getLayoutBoundsY());
			}
			
			/**
			 * Probably a better way of doing this
			 */
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
				
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				if(host.defaultMaximum <= host.maxTime)
					drawTrackScale();
			}
			
			public function drawTrackScale():void {

				//House keeping and cleaning up of tick marks
				drawLayer.clear();
				drawLayer.lineStyle(1.5, 0x3A3E59);
				unusedIndex= 0;
				
				//Compute the range for the scale
				var scaleMax:int = host.maxTime/MILLISECONDS;
				var label:Label = labels[0];
				label.text = "WW.WW";
				var minPartitionWidth:Number = Math.ceil(label.measureText(label.text).width/10)*10;
				hideLabel(label);
			
				var secondsPerPartition:int = Math.ceil(scaleMax / MAX_PARTITIONS);
				var availableWidth:Number = width - thumb.width;
				var partitionWidth:Number = availableWidth/(scaleMax/secondsPerPartition);
				var numPartitions:int = scaleMax / secondsPerPartition;
				var numSubPartitions:int = secondsPerPartition == 1 ? 2:secondsPerPartition;
				var position:Number;
				
				for(var i:int = 0; i <= numPartitions; i++)
				{
					position = i*partitionWidth;
					drawPartition(position, partitionWidth, minPartitionWidth,numSubPartitions, i*secondsPerPartition);
				}
				
				for(var unused:int = unusedIndex; unused < labels.length; unused++)
				{
					hideLabel(labels[unused]);
				}
			}
			
			private function drawPartition(startPosition:Number, availableWidth:Number, minimumWidth:Number, numPartitions:int,
										   labelText:int = 0, level:int = 3):void
			{
				if(availableWidth < minimumWidth || level == 1)
					return;
				
				var position:Number;
				var partitionWidth:Number = availableWidth / numPartitions;
				
				drawTick(startPosition, FULL*(level/3));

				var label:Label;
				if(width < availableWidth + startPosition)
				{
					if(level ==3)
					{
						label = getNextUnusedLabel();
						label.text = labelText.toString();
						label.x = startPosition - label.measureText(label.text).width - 5;
					}
					
					return;
				}
				
				if(level ==3)
				{
					label = getNextUnusedLabel();
					label.text = labelText.toString();
					label.x = startPosition + 5;
				}
				
				for(var i:int = 0; i < numPartitions; i++)
				{
					if(partitionWidth >= (minimumWidth/2))
					{
						position = i*partitionWidth + startPosition;
						drawTick(position, FULL*((level-1)/3));
						drawPartition(position, partitionWidth, minimumWidth, numPartitions, 0 , level - 1);
					}
				}
			}
			
			private function drawTick(xPos:Number, tickMarkHeight:Number):void
			{
				drawLayer.moveTo(xPos, TICK_MAX_LENGTH);
				drawLayer.lineTo(xPos, TICK_MAX_LENGTH - tickMarkHeight);
			}
			
			private function getNextUnusedLabel():Label
			{
				var label:Label = labels[unusedIndex];
				label.visible = true;
				label.includeInLayout = true;
				unusedIndex ++;
				return label;
			}
			
			private function hideLabel(label:Label):void
			{
				label.text = "";
				label.visible = false;
				label.includeInLayout = false;
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!--- The tooltip used in the mx.controls.Slider control. To customize the DataTip's appearance, create a custom HSliderSkin class.-->
		<fx:Component id="dataTip">
			<s:DataRenderer minHeight="24" minWidth="40" y="-34">
				<s:Rect top="0" left="0" right="0" bottom="0">
					<s:fill>
						<s:SolidColor color="0x000000" alpha="0.9"/>
					</s:fill>
					<s:filters>
						<s:DropShadowFilter angle="90" color="0x999999" distance="3"/>
					</s:filters>
				</s:Rect>
				<s:Label id="labelDisplay" text="{data}"
						 horizontalCenter="0" verticalCenter="1"
						 left="5" right="5" top="5" bottom="5"
						 textAlign="center" verticalAlign="middle"
						 fontWeight="normal" color="white" fontSize="11">
				</s:Label>
			</s:DataRenderer>
		</fx:Component>
	</fx:Declarations>
	
	<!--- The default skin class is HSliderTrackSkin. -->
	<s:Button id="track" left="0" right="0" top="0" bottom="0" minWidth="33" width="100" skinClass="sg.edu.smu.ksketch2.controls.skins.TimeSliderTrackSkin"/>
	
	<!--- The default skin class is HSliderThumbSkin. -->
	<s:Button id="thumb" top="0" bottom="0" width="11" height="11" skinClass="sg.edu.smu.ksketch2.controls.skins.TimeSliderThumbSkin"/>
	<s:Group id="ticks" mouseChildren="false" mouseEnabled="false"/>
</s:SparkSkin>
