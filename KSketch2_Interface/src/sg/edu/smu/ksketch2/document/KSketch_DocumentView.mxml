<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" title="TempDocumentView" actionBarVisible="false" 
		creationComplete="_initComponents()"
		destructionPolicy="never"
		addedToStage="addedToStageHandler()" xmlns:utils="utils.*" xmlns:document="sg.edu.smu.ksketch2.document.*" xmlns:scrollerColumn="sg.edu.smu.ksketch2.document.scrollerColumn.*" xmlns:previewer="sg.edu.smu.ksketch2.document.previewer.*">
	<fx:Declarations>
		<document:DocumentProperties width="{width}" height="{height}" id="docProperties"/>
	</fx:Declarations>	
	<fx:Script>
		<![CDATA[
			import mx.managers.PopUpManager;
			
			import spark.events.PopUpEvent;
			
			import sg.edu.smu.ksketch2.KSketch2;
			import sg.edu.smu.ksketch2.canvas.KSketch_CanvasView;
			import sg.edu.smu.ksketch2.controls.components.ExportProgressBar;
			import sg.edu.smu.ksketch2.document.scrollerColumn.KDocumentSelectedEvent;
			import sg.edu.smu.ksketch2.utils.ExportUtil;
			import sg.edu.smu.ksketch2.utils.IO;
			import sg.edu.smu.ksketch2.utils.KSketchDocument;
			
			[Bindable]
			private var _currentDocument:KSketchDocument;
			
			private var _KSketch:KSketch2;
			private var _KSketchFiles:Vector.<File>;
			private var _KSketchDocuments:Vector.<KSketchDocument>;
			
			private function _initComponents():void
			{
				_KSketch = new KSketch2();
				docProperties.addEventListener(PopUpEvent.CLOSE, _createNewDocument);
				scroller.addEventListener(KDocumentSelectedEvent.DOCUMENT_SELECTED, _documentSelectedHandler);
				previewer.init(_KSketch);				
			}
			
			public function addedToStageHandler():void
			{
				if(_currentDocument)
				{
					IO.saveLocal(_currentDocument);
					_refreshDocumentList();
					currentDocument = _currentDocument;
				}
				else
				{
					_refreshDocumentList();
					_currentDocument = null;
				}
			}
			
			private function _refreshDocumentList():void
			{
				_KSketchDocuments = new Vector.<KSketchDocument>();
				scroller.resetDocuments();
				
				var dir:File;
				dir = File.applicationStorageDirectory;
				dir = dir.resolvePath(IO.KMV_DIRECTORY);
				
				if(dir.isDirectory)
				{
					var allFiles:Array = dir.getDirectoryListing();
					
					_KSketchFiles = new Vector.<File>();
					var currentFile:File;
					
					for(var i:int = 0; i < allFiles.length; i++)
					{
						currentFile = allFiles[i] as File;
						
						if(currentFile.url.search(".kmv") > -1)
						{
							currentFile.addEventListener(Event.COMPLETE, _loadFileComplete, false, 0, true);
							currentFile.load();
							_KSketchFiles.push(currentFile);
						}
					}
				}
			}
			
			//Handles completion of kmv file.
			private function _loadFileComplete(event:Event):void
			{
				(event.target as File).removeEventListener(Event.COMPLETE, _loadFileComplete);
				
				var pathParts:Array = (event.target as File).url.split("/");
				var fileID:String = pathParts[pathParts.length-1];
				fileID = fileID.substring(0, fileID.length-4);
				pathParts = fileID.split("%20");
				fileID = pathParts.join(" ");
				
				var xml:XML = new XML(event.target.data);
				
				if(!xml.documentProperties)
					throw new Error("Invalid kmv file has no document properties");
				
				var myDoc:KSketchDocument = new KSketchDocument(xml.documentProperties.@name, xml,
																fileID,
																Number(xml.documentProperties.@time),
																xml.documentProperties.@description);
 				
				scroller.addDocument(myDoc);
			}
			
			//Creates a new document
			private function _createNewDocument(event:PopUpEvent):void
			{
				if(event.commit)
				{
					_KSketch.reset();
					var newDoc:KSketchDocument = new KSketchDocument(event.data as String, _KSketch.sceneXML,
																	Math.floor(Math.random()*10000).toString()+Math.floor(Math.random()*10000).toString()+Math.floor(Math.random()*10000).toString(), new Date().time,
																	"Document description here");
					scroller.addDocument(newDoc);					
					currentDocument = newDoc;
					_openDocument(newDoc);
				}
			}
			
			//Loads the preview for the selected document
			private function _documentSelectedHandler(event:KDocumentSelectedEvent):void
			{
				currentDocument = event.selectedDocument;
			}
			
			private function _openDocumentPreview(doc:KSketchDocument):void
			{
				_KSketch.reset();
				
				if(doc)
				{
					var xml:XML = doc.xml;
					if(xml.scene.children().length() > 0)
						_KSketch.generateSceneFromXML(new XML(xml.scene));

					previewer.currentDocument = _currentDocument;
				}
				else
				{
					previewer.currentDocument = null;
				}
			}
			
			public function set currentDocument(document:KSketchDocument):void
			{
				_currentDocument = document;
				_openDocumentPreview(document);
			}
			
			//Opens the given doc
			private function _openDocument(doc:KSketchDocument):void
			{
				if(doc)
					navigator.pushView(KSketch_CanvasView, doc);
			}
			
			private function _deleteDocument(doc:KSketchDocument):void
			{
				if(doc)
				{
					IO.deleteDocument(doc);
					currentDocument = null;
					_refreshDocumentList();
				}
			}
			
			private function _export():void
			{

				var frames:Vector.<BitmapData> = previewer.exportFrames();
				
				if(frames)
				{
					var viewer:ExportProgressBar = new ExportProgressBar();
					viewer.open(this);
					
					PopUpManager.centerPopUp(viewer);
					viewer.addEventListener(Event.REMOVED_FROM_STAGE, 
						function handleExportComplete(event:Event):void
						{
							trace("Export completed!");
//							var fileRef:FileReference = new FileReference();
//							var date:Date = new Date();
//							fileRef.save(viewer.videoBuffer, date.fullYear.toString()+"_"+(date.month+1).toString()+"_"+date.date.toString()
//								+"_"+date.hours.toString()+date.minutes.toString()+".flv");
						}
						,false
						,0
						,true);
					
					viewer.encode(frames, ExportUtil.WIDTH_480P, ExportUtil.HEIGHT_480P);
				}				
			}
		]]>
	</fx:Script>
	
	<s:Rect width="100%" height="100%">
		<s:fill>
			<s:SolidColor color="0xFFFFFF"/>
		</s:fill>
	</s:Rect>
	<s:Group width="100%" height="100%">
		<s:layout>
			<s:HorizontalLayout gap="2"/>
		</s:layout>
		<s:Group width="33%" height="100%">
			<s:Rect width="100%" height="100%">
				<s:fill>
					<s:SolidColor color="0xE7E7E7"/>
				</s:fill>
			</s:Rect>
			<s:Group width="100%" height="100%">
				<s:layout>
					<s:VerticalLayout gap="5" paddingLeft="15" paddingRight="15" paddingTop="15"/>
				</s:layout>
				<s:Button skinClass="sg.edu.smu.ksketch2.document.scrollerColumn.KTouchNewDocumentButtonSkin" width="100%"
						  click="{docProperties.open(this)}" label="New Document"/>
				<scrollerColumn:KTouchDocumentScroller width="100%" height="100%" id="scroller"/>
			</s:Group>
		</s:Group>

		<s:Group width="67%" height="100%">
			<s:Rect width="100%" height="100%">
				<s:fill>
					<s:SolidColor color="0xE7E7E7"/>
				</s:fill>
			</s:Rect>
			
			<!--Previewer portion-->
			<s:Group width="100%" height="100%">
				<s:Rect top="15" left="15" right="15" bottom="15">
					<s:fill>
						<s:SolidColor color="0xFFFFFF"/>
					</s:fill>
					<s:filters>
						<s:DropShadowFilter angle="90" distance="1" color="0xdfdfdf"/>
					</s:filters>
				</s:Rect>
				<s:Group top="15" left="15" right="15" bottom="15">
					<s:layout>
						<s:VerticalLayout gap="15" paddingLeft="15" paddingRight="15" paddingTop="15" paddingBottom="15"/>
					</s:layout>
					<previewer:KTouchDocumentPreviewer width="100%" height="100%" id="previewer"/>
					<s:Group width="100%">
						<s:layout>
							<s:HorizontalLayout gap="15" verticalAlign="bottom"/>
						</s:layout>
						<s:Button label="Open"
								  skinClass="sg.edu.smu.ksketch2.document.previewer.KTouchPreviewerButtonSkin"
								  enabled="{_currentDocument!=null}"
								  click="_openDocument(_currentDocument)"/>
						<s:Button label="Export"
								  skinClass="sg.edu.smu.ksketch2.document.previewer.KTouchPreviewerButtonSkin"
								  enabled="{_currentDocument != null}"
								  click="_export()"/>
						<s:Group width="100%"/>
						<s:Button label="Delete"
								  skinClass="sg.edu.smu.ksketch2.document.previewer.KTouchPreviewerButtonSkin"
								  enabled="{_currentDocument != null}"
								  click="_deleteDocument(_currentDocument)"/>
					</s:Group>
				</s:Group>
			</s:Group>
		</s:Group>
	</s:Group>
</s:View>
