<?xml version="1.0" encoding="utf-8"?>
<s:SkinnablePopUpContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" backgroundAlpha="0.5" creationComplete="init()" backgroundColor="0x00">
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import org.gestouch.events.GestureEvent;
			import org.gestouch.gestures.PanGesture;
			import org.gestouch.gestures.TapGesture;
			
			import sg.edu.smu.ksketch2.controls.interactors.KDrawInteractor;
			import sg.edu.smu.ksketch2.utils.KMathUtil;
			
			private const RADIUS:Number  = 200;
			
			private var PIX2:Number = Math.PI*2;
			private var _closeGesture:TapGesture;
			private var _selectColorGesture:PanGesture;
			private var _wheelColorMap:BitmapData;
			
			public function init():void
			{
				width = Capabilities.screenResolutionX;
				height = Capabilities.screenResolutionY;

				_closeGesture = new TapGesture(closeComponent);
				_closeGesture.addEventListener(org.gestouch.events.GestureEvent.GESTURE_STATE_CHANGE, _closePenMenu);
				
				_setColor(0x000000);
				_selectColorGesture = new PanGesture(currentColor);
				_selectColorGesture.addEventListener(org.gestouch.events.GestureEvent.GESTURE_BEGAN, _beginColor);
				_selectColorGesture.addEventListener(org.gestouch.events.GestureEvent.GESTURE_CHANGED, _updateColor);
				_selectColorGesture.addEventListener(org.gestouch.events.GestureEvent.GESTURE_ENDED, _updateColor);
				
				_generateSpectrum();
			}
			
			private function _beginColor(event:org.gestouch.events.GestureEvent):void
			{
				spectrum.visible = true;
			}
			
			private function _updateColor(event:org.gestouch.events.GestureEvent):void
			{
				var polar:Point = KMathUtil.cartesianToPolar(currentColor.globalToLocal(_selectColorGesture.location));
				var color:uint = _getColor((polar.y+Math.PI), Math.abs(polar.x) > RADIUS? 1:Math.abs(polar.x)/RADIUS);
				_setColor(color);
				
				KDrawInteractor.penColor = color;
			}
			
			private function _endColor(event:org.gestouch.events.GestureEvent):void
			{
				spectrum.visible = false;
			}
			
			private function _closePenMenu(event:org.gestouch.events.GestureEvent):void
			{
				close();
			}
			
			/**
			 * retrieves a hex color given a hue value. Hue is [0,1]
			 */
			private function _getColor(hue:Number, value:Number):uint
			{
				// Calculate the RGB channels based on the angle of the line being drawn.
				var r:Number = (Math.cos(hue)                   * 127 + 128)*value << 16;
				var g:Number = (Math.cos(hue + 2 * Math.PI / 3) * 127 + 128)*value << 8;
				var b:Number = (Math.cos(hue + 4 * Math.PI / 3) * 127 + 128)*value;
				
				return (r | g | b);
			}
			
			private function _setColor(color:uint):void
			{
				currentColor.graphics.clear();
				currentColor.graphics.beginFill(color);
				currentColor.graphics.drawCircle(0,0,100);
				currentColor.graphics.endFill();
			}
			
			private function _generateSpectrum():void
			{
				var i:int = 0;
				var iterations:int = 360;
				var currentColor:uint = 0;
				var currentAngle:Number;
				var stepSize:Number = PIX2/iterations;
				var thickness:Number = 1 + int(RADIUS / 50);
				
				var startPoint:Point;
				var endPoint:Point;
				for(i;	i < iterations; i++)
				{
					currentAngle = i*stepSize;
					currentColor = _getColor(currentAngle, 1);
					startPoint = Point.polar(150, currentAngle - Math.PI);
					endPoint = Point.polar(200, currentAngle - Math.PI);
					
					// Create and draw the line.
					spectrum.graphics.lineStyle(thickness, currentColor);
					spectrum.graphics.moveTo(startPoint.x, startPoint.y);
					spectrum.graphics.lineTo(endPoint.x, endPoint.y);
				}
			}
			
		]]>
	</fx:Script>
	<s:Group width="100%" height="100%" id="closeComponent">
		<s:Rect width="100%" height="100%" alpha="0">
			<s:fill>
				<s:SolidColor color="0x000000"/>
			</s:fill>
		</s:Rect>	
	</s:Group>
	<s:Group width="100%" height="100%" id="content">
		<s:layout>
			<s:HorizontalLayout horizontalAlign="center" verticalAlign="middle"/>
		</s:layout>
		<s:Group id="spectrum" cacheAsBitmap="true" visible="false"/>
		<s:Group id="currentColor"/>
	</s:Group>
</s:SkinnablePopUpContainer>
