<?xml version="1.0" encoding="utf-8"?>
<!--
*Copyright 2010-2012 Singapore Management University
*Developed under a grant from the Singapore-MIT GAMBIT Game Lab

*This Source Code Form is subject to the terms of the
*Mozilla Public License, v. 2.0. If a copy of the MPL was
*not distributed with this file, You can obtain one at
*http://mozilla.org/MPL/2.0/.
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" width="110" height="50">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.core.UIComponent;
			
			import org.gestouch.events.GestureEvent;
			import org.gestouch.gestures.PanGesture;
			import org.gestouch.gestures.TapGesture;
			
			import sg.edu.smu.ksketch2.KSketch2;
			
			import views.canvas.KSketch_CanvasView;
			
			public static const LABEL_CURRENT_TIME:int = -1;
			public static const LABEL_MAX_TIME:int = 1;
			
			private var _KSketch:KSketch2;
			private var _type:int;
			private var _timeControl:KTouchTimeControl;
		
			private var _panGesture:PanGesture;
			private var _tapGesture:TapGesture;
			
			private const _FILL1:uint = 0x000000;

			public function init(KSketchInstance:KSketch2, timeControl:KTouchTimeControl, type:int , inputComponent:UIComponent):void
			{
				_KSketch = KSketchInstance;
				_timeControl = timeControl;
				_type = type;
				
				_panGesture = new PanGesture(inputComponent);
				_panGesture.addEventListener(org.gestouch.events.GestureEvent.GESTURE_CHANGED, _panUpdate);
				_panGesture.addEventListener(org.gestouch.events.GestureEvent.GESTURE_ENDED, _panEnd);
				
				_tapGesture = new TapGesture(inputComponent);
				_tapGesture.addEventListener(org.gestouch.events.GestureEvent.GESTURE_RECOGNIZED, _handleTap);
				
				if(_type == LABEL_CURRENT_TIME)
				{
					graphics.beginFill(KSketch_CanvasView.CANVAS_BUTTON_COLOR, KSketch_CanvasView.CANVAS_BUTTON_BLEND);
					graphics.moveTo(55,25);
					graphics.lineTo(80,37.5);
					graphics.lineTo(80,12.5);
					graphics.lineTo(55,25);
					graphics.endFill();
										
					graphics.beginFill(KSketch_CanvasView.CANVAS_BUTTON_COLOR, KSketch_CanvasView.CANVAS_BUTTON_BLEND);
					graphics.moveTo(24,25);
					graphics.lineTo(49,12.5);
					graphics.lineTo(49,37.5);
					graphics.lineTo(24,25);
					graphics.endFill();

					graphics.lineStyle(1, KSketch_CanvasView.CANVAS_BUTTON_COLOR, KSketch_CanvasView.CANVAS_DIVIDER_BLEND);
					graphics.moveTo(107,5);
					graphics.lineTo(107,45);
				}
				else
				{
					graphics.beginFill(KSketch_CanvasView.CANVAS_BUTTON_COLOR, KSketch_CanvasView.CANVAS_BUTTON_BLEND);
					graphics.moveTo(55,25);
					graphics.lineTo(30,12.5);
					graphics.lineTo(30,37.5);
					graphics.lineTo(55,25);
					graphics.endFill();
					
					graphics.beginFill(KSketch_CanvasView.CANVAS_BUTTON_COLOR, KSketch_CanvasView.CANVAS_BUTTON_BLEND);
					graphics.moveTo(86,25);
					graphics.lineTo(61,37.5);
					graphics.lineTo(61,12.5);
					graphics.lineTo(86,25);
					graphics.endFill();
					
					graphics.lineStyle(1, KSketch_CanvasView.CANVAS_BUTTON_COLOR, KSketch_CanvasView.CANVAS_DIVIDER_BLEND);
					graphics.moveTo(3,5);
					graphics.lineTo(3,45);
				}
			}
			
			/**
			 * Tap handler to handle tapping to advance/roll back frames
			 */
			private function _handleTap(event:org.gestouch.events.GestureEvent):void
			{
				_timeControl.jumpInDirection(_type)
			}
			
			private function _panUpdate(event:org.gestouch.events.GestureEvent):void
			{
				_timeControl.updateSlider(_panGesture.offsetX, _panGesture.offsetY);
			}
			
			private function _panEnd(event:org.gestouch.events.GestureEvent):void
			{
				_timeControl.resetSliderInteraction();
			}
			
			private function _updateCurrentTime(event:Event):void
			{
				//timeLabel.text = toTimeCode(_KSketch.time);
			}
			
			private function _updateMaxTime(event:Event):void
			{
				//timeLabel.text = toTimeCode(_timeControl.maximum);
			}
			
			public static function toTimeCode(milliseconds:Number):String
			{
				var seconds:int = Math.floor((milliseconds/1000));
				var strSeconds:String = seconds.toString();
				if(seconds < 10)
					strSeconds = "0" + strSeconds;
				
				
				var remainingMilliseconds:int = (milliseconds%1000)/10;
				var strMilliseconds:String = remainingMilliseconds.toString();
				strMilliseconds = strMilliseconds.charAt(0) + strMilliseconds.charAt(1);
				
				if(remainingMilliseconds < 10)
					strMilliseconds = "0" + strMilliseconds;
				
				var timeCode:String = strSeconds + ':' + strMilliseconds;
				return timeCode;
			}
		]]>
	</fx:Script>
	<s:Group width="100%" height="100%"> 
		<s:Rect width="100%" height="100%" alpha="0">
			<s:fill>
				<s:SolidColor color="0xFFFF00"/>
			</s:fill>
		</s:Rect>
	</s:Group>
</s:Group>