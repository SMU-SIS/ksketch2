<?xml version="1.0" encoding="utf-8"?>
<!--
*Copyright 2010-2012 Singapore Management University
*Developed under a grant from the Singapore-MIT GAMBIT Game Lab

*This Source Code Form is subject to the terms of the
*Mozilla Public License, v. 2.0. If a copy of the MPL was
*not distributed with this file, You can obtain one at
*http://mozilla.org/MPL/2.0/.
-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" actionBarVisible="false"
		initialize="_initData()" creationComplete="_initComponents()" xmlns:view="sg.edu.smu.ksketch2.view.*" xmlns:document="views.document.*"
		destructionPolicy="never"
		viewActivate="_viewActivateHandler(event)">
	<fx:Declarations>
		<document:KTouchDocumentCreator id="newDocConfigWindow" width="500" height="400"
										x="{(width/2) - (newDocConfigWindow.width/2)}"
										y="{(height/2) - (newDocConfigWindow.height/2)}"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import views.document.previewer.KTouchPreviewTimeControl;
			import views.document.scrollerColumn.KTouchDocumentScrollerButtonSkin;
			import views.document.scrollerColumn.KTouchDocumentScrollerButton;
			import utils.KSketchDocument;
			import spark.events.PopUpEvent;
			import spark.events.ViewNavigatorEvent;
			
			import sg.edu.smu.ksketch2.KSketch2;
			import sg.edu.smu.ksketch2.view.KModelDisplay;
			
			import views.canvas.KSketch_CanvasView;
			
			private var _documentIndex:int;
			private var _KSketch:KSketch2;
			private var _KSketchFiles:Vector.<File>;
			private var _KSketchDocuments:Vector.<KSketchDocument>;
			private var _timeControl:KTouchPreviewTimeControl;
			private var _currentDocument:KSketchDocument;
			
			private function _initData():void
			{
				_KSketch = new KSketch2();
				_KSketchDocuments = new Vector.<KSketchDocument>();
				_documentIndex = 0;
				
				var dir:File = File.applicationDirectory;
				dir = dir.resolvePath("tasks");
				var allFiles:Array = dir.getDirectoryListing();
				
				_KSketchFiles = new Vector.<File>();
				var currentFile:File;

				for(var i:int = 0; i < allFiles.length; i++)
				{
					currentFile = allFiles[i] as File;
					
					if(currentFile.url.search(".kmv") > -1)
					{
						currentFile.addEventListener(Event.COMPLETE, _loadComplete, false, 0, true);
						currentFile.load();
						_KSketchFiles.push(currentFile);
					}
				}
			}
			
			private function _initComponents():void
			{
				modelDisplay.init(_KSketch);
				
				_timeControl = new KTouchPreviewTimeControl();
				_timeControl.init(_KSketch, null, canvas_region);
				newDocConfigWindow.addEventListener(PopUpEvent.CLOSE, _newDocumentHandler);
			}
			
			private function _loadComplete(event:Event):void
			{
				var pathParts:Array = (event.target as File).url.split("/");
				var fileName:String = pathParts[pathParts.length-1];
				fileName = fileName.substring(0, fileName.length-4);
				pathParts = fileName.split("%20");
				fileName = pathParts.join(" ");
				
				var xml:XML = new XML(event.target.data);
				
				var myDoc:KSketchDocument = new KSketchDocument(fileName, xml, _documentIndex.toString());
				_KSketchDocuments.push(myDoc);
				_addToScroller(myDoc);
				_documentIndex ++;

				//Using document index for now.
				//Will need to sync with the server for ID
			}
			
			private function _addToScroller(newDocument:KSketchDocument):void
			{
				var newButton:KTouchDocumentScrollerButton = new KTouchDocumentScrollerButton();
				newButton.ksketchDocument = newDocument;
				newButton.setStyle("skinClass", Class(KTouchDocumentScrollerButtonSkin));
				documentScrollerContainer.addElement(newButton);
			}
			
			private function _loadFile(target:*):void
			{
				if(target is KTouchDocumentScrollerButton)
					_loadDocumentPreview((target as KTouchDocumentScrollerButton).ksketchDocument);
			}
			
			private function _loadDocumentPreview(document:KSketchDocument):void
			{
				_KSketch.reset();
				
				var xml:XML = document.xml;
				if(xml.scene.children().length() > 0)
					_KSketch.generateSceneFromXML(new XML(xml.scene));
				
				_currentDocument = document;
			}
			
			private function _showNewDocConfig():void
			{
				newDocConfigWindow.open(this, true);
			}
			
			private function _newDocumentHandler(event:PopUpEvent):void
			{
				if(!event.commit)
					return;
				
				_KSketch.reset();
				_documentIndex ++;
				_currentDocument = new KSketchDocument(event.data, _KSketch.sceneXML, _documentIndex.toString());
				_addToScroller(_currentDocument);
				_loadCurrentDocument()
			}
			
			private function _loadCurrentDocument():void
			{
				if(_currentDocument)
					navigator.pushView(KSketch_CanvasView, _currentDocument);
			}
			
			private function _viewActivateHandler(event:ViewNavigatorEvent):void
			{
				if(_currentDocument)
					_loadDocumentPreview(_currentDocument);
			}
		]]>
	</fx:Script>
	<s:Group width="100%" height="100%">
		<s:layout>
			<s:HorizontalLayout/>
		</s:layout>
		
		<s:Scroller id="documentScroller" width="25%" height="100%">
			<s:Group width="100%" height="100%">
				<s:Rect width="100%" height="100%">
					<s:fill>
						<s:SolidColor color="0xFFFFFF"/>
					</s:fill>
					<s:filters>
						<s:DropShadowFilter alpha="0.25" angle="0" color="0x000000" distance="0.25"/>
					</s:filters>
				</s:Rect>
				
				<s:Group width="100%">
					<s:layout>
						<s:VerticalLayout gap="1" horizontalAlign="left" paddingTop="5" paddingLeft="5"/>
					</s:layout>
					<s:Button skinClass="views.document.scrollerColumn.NewDocumentButton" width="100%" height="70"
							   click="_showNewDocConfig()"/>
					<s:Line width="90%" alpha="0.25">
						<s:stroke>
							<s:SolidColorStroke weight="1" color="0x000000"/>
						</s:stroke>
					</s:Line>
					<s:Group id="documentScrollerContainer" click="_loadFile(event.target)">
						<s:layout>
							<s:VerticalLayout gap="1" paddingLeft="15"/>
						</s:layout>
					</s:Group>
				</s:Group>
			</s:Group>
		</s:Scroller>
		
		<s:Group width="75%" height="100%">
			<s:Group width="100%" height="100%">
				<s:Group width="100%" height="100%">
					<s:layout>
						<s:VerticalLayout horizontalAlign="center" verticalAlign="middle"/>
					</s:layout>
					<!-- For show, all the visual elements that the user wont be able to "touch"-->
					<s:Group id="drawing_stage" height="65%" width="{drawing_stage.height/9*16}">
						<s:Rect width="100%" height="100%">
							<s:fill>
								<s:SolidColor color="0xFFFFFF"/>
							</s:fill>
							<s:stroke>
								<s:SolidColorStroke color="0xE6E6E6" weight="1.5"/>
							</s:stroke>
						</s:Rect>
						<!-- The model display displays the objects in the model -->
						<view:KModelDisplay id="modelDisplay" scaleX="{drawing_stage.width/KSketch2.CANONICAL_WIDTH}"
											scaleY="{drawing_stage.height/KSketch2.CANONICAL_HEIGHT}"/>
					</s:Group>
				</s:Group>
				<!-- Things inside this group really dispatches gesture events-->
				<s:Group id="canvas_region" width="100%" height="100%">
					<s:Rect width="100%" height="100%" alpha="0">
						<s:fill>
							<s:SolidColor color="0x000000"/>
						</s:fill>
					</s:Rect>
				</s:Group>	
			</s:Group>
			<s:Button label="open" click="_loadCurrentDocument()"/>
		</s:Group>
	</s:Group>
</s:View>
