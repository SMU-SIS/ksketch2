<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" title="TempDocumentView" actionBarVisible="false" xmlns:scrollerColumn="views.document.scrollerColumn.*"
		creationComplete="_initComponents()" xmlns:view="sg.edu.smu.ksketch2.view.*" xmlns:previewer="views.document.previewer.*"
		destructionPolicy="never"
		addedToStage="addedToStageHandler()" xmlns:utils="utils.*" xmlns:document="views.document.*">
	<fx:Declarations>
		<utils:ParticipantChooser width="{width}" height="{height}" id="participantChooser"/>
		<document:DocumentProperties width="{width}" height="{height}" id="docProperties"/>
	</fx:Declarations>	
	<fx:Script>
		<![CDATA[
			import spark.events.PopUpEvent;
			
			import sg.edu.smu.ksketch2.KSketch2;
			
			import utils.KSketchDocument;
			import utils.StudyIO;
			
			import views.canvas.KSketch_CanvasView;
			import views.document.previewer.KTouchPreviewerButtonSkin;
			import views.document.scrollerColumn.KDocumentSelectedEvent;
			import views.document.scrollerColumn.KTouchNewDocumentButtonSkin;
			
			[Bindable]
			private var _currentDocument:KSketchDocument;
			
			private var _KSketch:KSketch2;
			private var _KSketchFiles:Vector.<File>;
			private var _KSketchDocuments:Vector.<KSketchDocument>;
			
			[Bindable]
			private var _currentParticipant:String = "No Participant";
			
			public function addedToStageHandler():void
			{
				if(_currentDocument)
				{
					StudyIO.save(_currentParticipant, _currentDocument);
					_openDocumentPreview(_currentDocument);
				}
				else
					_openDocumentPreview(null);
			}
			
			private function _initComponents():void
			{
				_KSketch = new KSketch2();
				participantChooser.addEventListener(PopUpEvent.CLOSE, _updateParticipant);
				docProperties.addEventListener(PopUpEvent.CLOSE, _createNewDocument);
				scroller.addEventListener(KDocumentSelectedEvent.DOCUMENT_SELECTED, _documentSelectedHandler);
				previewer.init(_KSketch);				
			}
			
			private function _loadTasks():void
			{
				_KSketchDocuments = new Vector.<KSketchDocument>();
				
				var dir:File;
				
				if(StudyIO.participantAvailable(_currentParticipant))
				{
					dir = File.applicationStorageDirectory;
					dir = dir.resolvePath(StudyIO.STUDY_DIRECTORY+_currentParticipant);
				}
				else
				{
					dir = File.applicationDirectory;
					dir = dir.resolvePath(StudyIO.TASK_DIRECTORY);
				}
				
				if(dir.isDirectory)
				{
					var allFiles:Array = dir.getDirectoryListing();
					
					_KSketchFiles = new Vector.<File>();
					var currentFile:File;
					
					for(var i:int = 0; i < allFiles.length; i++)
					{
						currentFile = allFiles[i] as File;
						
						if(currentFile.url.search(".kmv") > -1)
						{
							currentFile.addEventListener(Event.COMPLETE, _loadFileComplete, false, 0, true);
							currentFile.load();
							_KSketchFiles.push(currentFile);
						}
					}
				}

			}
			
			//Handles completion of kmv file.
			private function _loadFileComplete(event:Event):void
			{
				(event.target as File).removeEventListener(Event.COMPLETE, _loadFileComplete);
				
				var pathParts:Array = (event.target as File).url.split("/");
				var fileName:String = pathParts[pathParts.length-1];
				fileName = fileName.substring(0, fileName.length-4);
				pathParts = fileName.split("%20");
				fileName = pathParts.join(" ");
				
				var xml:XML = new XML(event.target.data);
				
				var myDoc:KSketchDocument = new KSketchDocument(fileName, xml,
																Math.floor(Math.random()*10000).toString(),
																Math.floor(Math.random()*50));
				scroller.addDocument(myDoc);
			}
			
			//Creates a new document
			private function _createNewDocument(event:PopUpEvent):void
			{
				if(event.commit)
				{
					_KSketch.reset();
					var newDoc:KSketchDocument = new KSketchDocument(event.data as String, _KSketch.sceneXML,
																	Math.floor(Math.random()*10000).toString());
					scroller.addDocument(newDoc);					
					_openDocumentPreview(newDoc);
					_openDocument(newDoc);
				}
			}
			
			//Loads the preview for the selected document
			private function _documentSelectedHandler(event:KDocumentSelectedEvent):void
			{
				_openDocumentPreview(event.selectedDocument);
			}
			
			private function _openDocumentPreview(doc:KSketchDocument):void
			{
				_KSketch.reset();
				
				if(doc)
				{
					var xml:XML = doc.xml;
					if(xml.scene.children().length() > 0)
						_KSketch.generateSceneFromXML(new XML(xml.scene));

					_currentDocument = doc;
					previewer.currentDocument = _currentDocument;
				}
			}
			
			//Opens the given doc
			private function _openDocument(doc:KSketchDocument):void
			{
				if(doc)
					navigator.pushView(KSketch_CanvasView, doc);
			}
			
			private function _showParticipantList():void
			{
				participantChooser.open(this);
			}
			
			private function _updateParticipant(event:PopUpEvent):void
			{
				if(event.commit)
				{
					scroller.resetDocuments();
					
					if(event.data.studyMode == "Mode P")
						KSketch2.studyMode = KSketch2.STUDY_P;
					else if(event.data.studyMode == "Mode K")
						KSketch2.studyMode = KSketch2.STUDY_K;
					else if(event.data.studyMode == "Mode PK")
						KSketch2.studyMode = KSketch2.STUDY_PK;
					
					_currentParticipant = event.data.participant;
					
					_loadTasks();
				}
			}
		]]>
	</fx:Script>
	
	<s:Rect width="100%" height="100%">
		<s:fill>
			<s:SolidColor color="0xFFFFFF"/>
		</s:fill>
	</s:Rect>
	<s:Group width="100%" height="100%">
		<s:layout>
			<s:HorizontalLayout gap="2"/>
		</s:layout>
		<s:Group width="33%" height="100%">
			<s:Rect width="100%" height="100%">
				<s:fill>
					<s:SolidColor color="0xE7E7E7"/>
				</s:fill>
			</s:Rect>
			<s:Group width="100%" height="100%">
				<s:layout>
					<s:VerticalLayout gap="5" paddingLeft="15" paddingRight="15" paddingTop="15"/>
				</s:layout>
				<s:Button skinClass="views.document.scrollerColumn.KTouchNewDocumentButtonSkin" width="100%"
						  click="{docProperties.open(this)}" label="New Document"/>
				<s:Button skinClass="views.document.scrollerColumn.KTouchNewDocumentButtonSkin" width="100%" id="partID"
						  click="_showParticipantList()" label="{_currentParticipant}"/>
				<scrollerColumn:KTouchDocumentScroller width="100%" height="100%" id="scroller"/>
			</s:Group>
		</s:Group>

		<s:Group width="67%" height="100%">
			<s:Rect width="100%" height="100%">
				<s:fill>
					<s:SolidColor color="0xE7E7E7"/>
				</s:fill>
			</s:Rect>
			
			<!--Previewer portion-->
			<s:Group width="100%" height="100%">
				<s:Rect top="15" left="15" right="15" bottom="15">
					<s:fill>
						<s:SolidColor color="0xFFFFFF"/>
					</s:fill>
					<s:filters>
						<s:DropShadowFilter angle="90" distance="1" color="0xdfdfdf"/>
					</s:filters>
				</s:Rect>
				<s:Group top="15" left="15" right="15" bottom="15">
					<s:layout>
						<s:VerticalLayout gap="15" paddingLeft="15" paddingRight="15" paddingTop="15" paddingBottom="15"/>
					</s:layout>
					<previewer:KTouchDocumentPreviewer width="100%" height="100%" id="previewer"/>
					<s:Group width="100%">
						<s:layout>
							<s:HorizontalLayout gap="15" verticalAlign="bottom"/>
						</s:layout>
						<s:Button label="Open"
								  skinClass="views.document.previewer.KTouchPreviewerButtonSkin"
								  enabled="{_currentDocument!=null}"
								  click="_openDocument(_currentDocument)"/>
						<s:Button label="Export" skinClass="views.document.previewer.KTouchPreviewerButtonSkin" enabled="false"/>
						<s:Button label="Share" skinClass="views.document.previewer.KTouchPreviewerButtonSkin" enabled="false"/>
						<s:Button label="Delete" skinClass="views.document.previewer.KTouchPreviewerButtonSkin" enabled="false"/>
					</s:Group>
				</s:Group>
			</s:Group>
		</s:Group>
	</s:Group>
</s:View>
