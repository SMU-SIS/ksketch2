<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark">
	<fx:Script>
		<![CDATA[
			import org.gestouch.events.GestureEvent;
			import org.gestouch.gestures.PanGesture;
			import org.gestouch.gestures.TapGesture;
			
			import sg.edu.smu.ksketch2.KSketch2;
			import sg.edu.smu.ksketch2.controls.widgets.KTimeControl;
			
			private const _PAN_SPEED_1:int = 1
			private const _PAN_SPEED_2:int = 3;
			private const _PAN_SPEED_3:int = 9;
			private const _PAN_SPEED_4:int = 15;
			
			private const _PAN_THRESHOLD_1:Number = 5;
			private const _PAN_THRESHOLD_2:Number = 8;
			private const _PAN_THRESHOLD_3:Number = 10;

			private const _STEP_THRESHOLD:Number = 7;
			
			private var _KSketch:KSketch2;
			private var _tapGesture:TapGesture;
			private var _panGesture:PanGesture;
			
			private var _timer:Timer;
			private var _maxPlayTime:int;
			private var _rewindToTime:int;
			
			private var _isPlaying:Boolean;
			
			protected var _panVector:Point = new Point();
			protected var _panSpeed:int = _PAN_SPEED_1;
			protected var _prevOffset:Number = 1;
			protected var _panOffset:Number = 0;
			
			public function init(KSketchInstance:KSketch2, inputComponent:DisplayObject):void
			{
				_KSketch = KSketchInstance;
				_isPlaying = false;
				
				_timer = new Timer(KSketch2.ANIMATION_INTERVAL);
				
				_tapGesture = new TapGesture(inputComponent);
				_tapGesture.addEventListener(org.gestouch.events.GestureEvent.GESTURE_RECOGNIZED, handlePlayPause);
				
				_panGesture = new PanGesture(inputComponent);
				_panGesture.addEventListener(org.gestouch.events.GestureEvent.GESTURE_CHANGED, updateSlider);
			}
			
			public function get time():int
			{
				return _KSketch.time;
			}
			
			public function set time(value:int):void
			{
				_KSketch.time = value;
				
				trace(value/_KSketch.maxTime*100, value, _KSketch.maxTime);
				timeFill.percentWidth = value/_KSketch.maxTime*100;
			}
			
			public function handlePlayPause(event:org.gestouch.events.GestureEvent):void
			{
				if(_isPlaying)
					stop();
				else
					play();	
			}
			
			public function updateSlider(event:org.gestouch.events.GestureEvent):void
			{
				//Changed direction, have to reset all pan gesture calibrations till now.
				if((_prevOffset * _panGesture.offsetX) < 0)
					resetSliderInteraction();
				
				_panVector.x = _panGesture.offsetX;
				_panVector.y = _panGesture.offsetY;
				
				var absOffset:Number = _panVector.length;
				
				//Pan Offset is the absolute distance moved during a pan gesture
				//Need to update to see how far this pan has moved.
				_panOffset += absOffset;
				
				//Speed calibration according to how far the pan gesture moved.
				if( absOffset <= _PAN_THRESHOLD_1)
					_panSpeed = _PAN_SPEED_1;
				else if(absOffset <= _PAN_THRESHOLD_2)
					_panSpeed = _PAN_SPEED_2;
				else if(absOffset <= _PAN_THRESHOLD_3)
					_panSpeed = _PAN_SPEED_3 * (_KSketch.maxTime/KTimeControl.DEFAULT_MAX_TIME);
				else
					_panSpeed = absOffset * (_KSketch.maxTime/KTimeControl.DEFAULT_MAX_TIME);
				
				//Update the time according to the direction of the pan.
				//Advance if it's towards the right
				//Roll back if it's towards the left.
				if(_panOffset > _STEP_THRESHOLD)
				{				
					if(0 < _panGesture.offsetX)
						time = time + (_panSpeed*KSketch2.ANIMATION_INTERVAL);
					else if(_panGesture.offsetX < 0)
						time = time - (_panSpeed*KSketch2.ANIMATION_INTERVAL);
					
					_panOffset = 0;
				}
				
				//Save the current offset value, will need this thing to check for
				//change in direction in the next update event
				_prevOffset =  _panGesture.offsetX;
			}
			
			/**
			 * Enters the playing state machien
			 */
			public function play():void
			{
				_timer.delay = KSketch2.ANIMATION_INTERVAL;
				_timer.addEventListener(TimerEvent.TIMER, playHandler);
				_timer.start();
				
				if(_KSketch.maxTime <= time)
					time = 0;

				_maxPlayTime = _KSketch.maxTime;
				
				_rewindToTime = time;
				_isPlaying = true;

				this.dispatchEvent(new Event(KTimeControl.PLAY_START));
			}
			
			/**
			 * For resetting slider interaction values;
			 */
			public function resetSliderInteraction():void
			{
				_prevOffset = 1;
				_panOffset = 0;
				_panSpeed = _PAN_SPEED_1;
			}
			
			
			/**
			 * Updates the play state machine
			 * Different from record handler because it stops on max time
			 */
			private function playHandler(event:TimerEvent):void 
			{
				if(time >= _maxPlayTime)
				{
					time = _rewindToTime;
					stop();
				}
				else
					time = time + KSketch2.ANIMATION_INTERVAL;
			}
			
			/**
			 * Stops playing and remove listener from the timer
			 */
			public function stop():void
			{
				_timer.removeEventListener(TimerEvent.TIMER, playHandler);
				_timer.stop();
				_isPlaying = false;
				this.dispatchEvent(new Event(KTimeControl.PLAY_STOP));
			}
			
		]]>
	</fx:Script>
	<s:layout>
		<s:HorizontalLayout gap="10" paddingLeft="15" paddingRight="15" paddingTop="15"/>
	</s:layout>

	<s:Group width="100%" height="40">
		<s:Rect width="100%" height="100%" id="backGroundFill">
			<s:stroke>
				<s:SolidColorStroke color="0xdbd6d6"/>
			</s:stroke>
		</s:Rect>
		
		<s:Rect width="10%" height="100%" id="timeFill">
			<s:fill>
				<s:SolidColor color="0xdbd6d6"/>
			</s:fill>
		</s:Rect>
	</s:Group>
</s:Group>
