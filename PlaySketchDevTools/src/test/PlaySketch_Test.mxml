<?xml version="1.0" encoding="utf-8"?>
<!--
*Copyright 2010-2012 Singapore Management University
*Developed under a grant from the Singapore-MIT GAMBIT Game Lab

-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:ksketch="sg.edu.smu.ksketch.*"
		 xmlns:components="sg.edu.smu.ksketch.components.*"
		 initialize="_reNewKSketchApp(event)">

	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			public static const EVENT_RESUME:String = "RESUME";
			public static const COMMAND_FINISHED:String = "COMMAND_FINISHED";
			public var restartRequested:Boolean = false;
			public var cancelRequested:Boolean = false;
			
			[Bindable]
			public var commandList:XMLList;
			[Bindable]
			public var next:int;

			private var _executor:ITCommandExecutor;

			public function execute():void
			{
				_executor.executeCommand(commandList[next++]);
			}
			
			public function hasNextCommand():Boolean
			{
				if(cancelRequested)
				{
					cancelRequested = false;
					next = commandList.length();
				}
				else if(restartRequested)
				{
					restartRequested = false;
					_reNewKSketchApp();
					next = 0;
				}
				return next < commandList.length();
			}
			
			public function parseCommandList(xml:XML):void
			{
				commandList = _executor.generateCommandList(xml);
				next = 0;
			}

			private function _reNewKSketchApp(event:FlexEvent = null):void
			{
				if(_executor != null) // clear existing ksketchApp
				{
					appContainer.removeElement(_executor.application);
					_executor.restartTest();
				}
				else
					_executor = new ITCommandExecutor(this);
				appContainer.addElement(_executor.application);
			}
			
			private function _next_clickHandler(event:MouseEvent):void
			{
				_executor.resume();
			}
			
			private function _restart_clickHandler(event:MouseEvent):void
			{
				restartRequested = true;
				_executor.resume();
			}
			
			private function _cancel_clickHandler(event:MouseEvent):void
			{
				cancelRequested = true;
				_executor.resume();
			}
						
		]]>
	</fx:Script>

	<s:VGroup>
		<s:Group id="appContainer" height="580" width="1200"/>
		<s:Spacer height="70"/>
		<s:List width="100%" 
				selectedIndex="{next-1}"
				enabled="false">
			<s:itemRenderer>
				<fx:Component>
					<s:ItemRenderer>
						<s:Label text="{data.toXMLString()}" />
					</s:ItemRenderer>
				</fx:Component>
			</s:itemRenderer>
			<s:dataProvider>
				<s:XMLListCollection source="{commandList}" />
			</s:dataProvider>
		</s:List>	
		<s:HGroup>
			<s:Button label="Next" click="_next_clickHandler(event)" />
			<s:Button label="Restart" click="_restart_clickHandler(event)" />
			<s:Button label="Cancel" click="_cancel_clickHandler(event)"/>
		</s:HGroup>
	</s:VGroup>
</s:Group>
