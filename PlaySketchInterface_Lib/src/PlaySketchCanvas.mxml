<?xml version="1.0" encoding="utf-8"?>
<!--
*Copyright 2010-2012 Singapore Management University
*Developed under a grant from the Singapore-MIT GAMBIT Game Lab

-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:ksketchutilities="sg.edu.smu.ksketch.utilities.*"
		 xmlns:ksketchcomponents="sg.edu.smu.ksketch.components.*"
		 xmlns:playsketchskin="components.*"
		 xmlns:playsketchcomponents="sg.edu.smu.playsketch.components.*"
		 xmlns:timebar="sg.edu.smu.playsketch.components.timebar.*"
		 width="100%" height="100%" updateComplete = "update_interface()" xmlns:group="sg.edu.smu.playsketch.components.group.*" xmlns:local="*">
	<fx:Declarations>
	
		<ksketchutilities:KAppState id="appState"/>
		<fx:Array id="cursors"/>
	</fx:Declarations>
	<fx:Style>
		.buttonEraser_style {icon: Embed("assets/eraser.png");}
		.buttonVisibility_style_toggle {icon: Embed("assets/visibility.png");}
		.buttonFlvExport_style_toggle {icon: Embed("assets/flv_export.png");}
		.buttonWebcam_style_toggle {icon: Embed("assets/webcam.png");}
		.buttonMicrophone_style_toggle {icon: Embed("assets/microphone.png");}
	</fx:Style>		
	
	<fx:Script source="InterfaceMgt.as"/>
	<fx:Script source="ButtonFunctions.as"/>
	<fx:Script source="TimelineFunctions.as"/>
	
	<fx:Script>
		<![CDATA[
			import mx.events.MenuEvent;
			import mx.managers.CursorManager;
			
			import sg.edu.smu.ksketch.components.KPenMenu;
			import sg.edu.smu.ksketch.model.KModel;
			import sg.edu.smu.ksketch.operation.KModelFacade;
			
			private var _fullScreen:Boolean = false;
			private var _facade:KModelFacade;
			
			//Cursor embedding
			[Embed(source="assets/black_pen.png")]
			private var _cursorBlackPen:Class;
			
			[Embed(source="assets/red_pen.png")]
			private var _cursorRedPen:Class;

			[Embed(source="assets/green_pen.png")]
			private var _cursorGreenPen:Class;

			[Embed(source="assets/blue_pen.png")]
			private var _cursorBluePen:Class;
			
			[Embed(source="assets/white_pen.png")]
			private var _cursorEraser:Class;
			
			private static const _BLACK_PEN:String = KPenMenu.LABEL_BLACK;;
			private static const _RED_PEN:String = KPenMenu.LABEL_RED;
			private static const _GREEN_PEN:String = KPenMenu.LABEL_GREEN;
			private static const _BLUE_PEN:String = KPenMenu.LABEL_BLUE;
			private static const _ERASER:String = KPenMenu.LABEL_WHITE;
			private static const _PEN_COLORS:Array = [_BLACK_PEN,_RED_PEN,_GREEN_PEN,_BLUE_PEN,_ERASER];
			private static const _PEN_COMMANDS:Array = [KLogger.BTN_BLACK_PEN,
				KLogger.BTN_RED_PEN,KLogger.BTN_GREEN_PEN,KLogger.BTN_BLUE_PEN,KLogger.BTN_ERASER];
			
			public function get facade():KModelFacade
			{
				return _facade;
			}
			
			//Application init
			//Sets up the window attributes for the current computer
			public function appInit(fullAppWidth:Number, fullAppHeight:Number, 
									widthOffset:Number, heightOffset:Number):void
			{
				addEventListener(KeyboardEvent.KEY_UP, handleKeyBoardPress);
				setFocus();
				appCanvas.setFocus();
				
				_facade = new KModelFacade(appState);
				appState.penThickness = KPenMenu.THICKNESS_MEDIUM;					
				initialiseMouseCursors(_BLACK_PEN,new _cursorBlackPen());
				initialiseMouseCursors(_RED_PEN,new _cursorRedPen());
				initialiseMouseCursors(_GREEN_PEN,new _cursorGreenPen());
				initialiseMouseCursors(_BLUE_PEN,new _cursorBluePen());
				initialiseMouseCursors(_ERASER,new _cursorEraser());
				Mouse.cursor = _BLACK_PEN;
				init_canvas(fullAppWidth, fullAppHeight, widthOffset, heightOffset);
				initButtonFunctions();
				initTimebar();
			
				/*appCanvas.addEventListener(MenuEvent.ITEM_CLICK, function(event:MenuEvent):void
				{
					var label:String = event.item.@label;
					_switchPen(list_pen_selection.selectedIndex = _PEN_COLORS.indexOf(label));
				});
				appCanvas.addEventListener(KCommandEvent.EVENT_PEN_CHANGE, function(event:KCommandEvent):void
				{
					_switchPen(list_pen_selection.selectedIndex = _PEN_COLORS.indexOf(event.command));
				});*/
			}
			
			public function initialiseMouseCursors(pen:String,bitmap:Bitmap):void
			{
				var cursorData:MouseCursorData = new MouseCursorData();
				cursorData.hotSpot = new Point(2.5,2.5);
				cursorData.data = Vector.<BitmapData>([ bitmap.bitmapData]);
				Mouse.registerCursor(pen, cursorData);
			}

			public function setLogTrigger(trigger:Function):void
			{
				btn_log.addEventListener(MouseEvent.CLICK, trigger);
			}
			
			public function setDebugTrigger(trigger:Function):void
			{
				group_configOps.btn_debug.addEventListener(MouseEvent.CLICK, trigger);				
			}
			
			public function setOptionTrigger(trigger:Function):void
			{
				group_configOps.btn_settings.addEventListener(MouseEvent.CLICK, trigger);				
			}
			
			public function handleKeyBoardPress(event:KeyboardEvent):void
			{			
				if (!event.ctrlKey) return;
				switch(event.keyCode)
				{
					case 67: //c key
						_commandExecutor.doShortcutCommand(KLogger.SHORTCUT_COPY);
						break;
					case 70: //f key
						handleFullScreen();																				
						break;
					case 77: //m key
						_commandExecutor.doShortcutCommand(KLogger.SHORTCUT_PASTE_WITH_MOTION);
						break;
					case 86: //v key
						_commandExecutor.doShortcutCommand(KLogger.SHORTCUT_PASTE);
						break;
					case 89: //y key
						_commandExecutor.doShortcutCommand(KLogger.SHORTCUT_REDO);
						break;
					case 90: //z key
						if(event.shiftKey)
							_commandExecutor.doShortcutCommand(KLogger.SHORTCUT_REDO);
						else
							_commandExecutor.doShortcutCommand(KLogger.SHORTCUT_UNDO);
						break;
				}
			}
			
			public function handleFullScreen():void
			{	
				stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;
				_fullScreen = true;					
			}

			private function _switchPen(index:int):void
			{
				_commandExecutor.doButtonCommand(_PEN_COMMANDS[index]);
			}
			
			private function _isImplicitGrouping():Boolean
			{
				return appState.groupingMode == KAppState.GROUPING_IMPLICIT_DYNAMIC;
			}
		]]>
	</fx:Script>
	
	<!-- kCanvas will be the parent container to the rest of the interface components -->
	<ksketchcomponents:KCanvas id="appCanvas" borderVisible = "true" 
							   width="100%" height="100%" backgroundColor="0X748993">
		
		<!-- create the main column for the interface's layout-->
		<s:Group  id="appContainerGroup" width="100%" height="100%">
			
			<s:layout>
				<s:VerticalLayout id="appMainVerticalLayout" />
			</s:layout>
			
			<!--Top bar-->
			<s:Group id="topBar" width="100%">
				
				<s:Rect id="topBar_BG" width="100%" height="100%">
					<s:fill>
						<s:LinearGradient rotation="90">
							<s:GradientEntry ratio="0.011378" color="#BCD4EB"/>
							<s:GradientEntry ratio="0.988622" color="#476584"/>
						</s:LinearGradient>
					</s:fill>
				</s:Rect>
				
				<s:Group id="topBar_buttonContainer" width="100%" height="100%">
					
					<s:layout>
						<s:HorizontalLayout gap="5" paddingLeft="5" paddingRight="2" paddingTop="2" paddingBottom="2"/>
					</s:layout>
					<group:Group_IO id="group_fileOps"/>
					<group:Group_Edit id="group_editOps"/>
					<group:Group_Operation id="group_viewOps"/>
					<group:Group_Grouping id="group_groupOps" visible="{_isImplicitGrouping()?false:true}"
										  includeInLayout="{_isImplicitGrouping()?false:true}"/>
					<group:Group_Pen id="group_pen"/>
					<!--black red green blue white-->
					<group:Group_Zoom id="group_zoom"/>

					<!--Stretchable part of the top bar-->
					<s:Group id = "topBar_resizableContainer" width="100%"/>
					<s:Button id="btn_log" width="44" height="24" label="Log" />
					<group:Group_Settings id="group_configOps"/>
						
					
				</s:Group>
				
			</s:Group>
			<!-- end of top bar-->
			
			<!--
			Fully stretchable middle portion that act as a drawing area for the application. Just for
			presentation purposes since most of the logic is held in the kCanvas itself.
			-->
			<s:Group id="drawingArea" width="100%" height="100%">
				
				<s:layout>
					<s:HorizontalLayout id="drawingArea_Layout" paddingLeft="20" paddingRight="20" 
										verticalAlign="middle" horizontalAlign="center"/>
				</s:layout>
				<s:BorderContainer id="drawingArea_stage" borderWeight="1" 
								   borderColor="0X000000" backgroundColor="0XFFFFFF"/>
				
			</s:Group>
			<!--End of Drawing Area-->
			
			<!-- Time bar-->
			<s:Group id="timeBar" width="100%">
				
				<s:Group width="100%" id="timeBarMainGroup">
					<s:Rect width="100%" height="100%">
						<s:fill>
							<s:LinearGradient rotation="90">
								<s:GradientEntry ratio="0.011378" color="#BCD4EB"/>
								<s:GradientEntry ratio="0.988622" color="#476584"/>
							</s:LinearGradient>
						</s:fill>
					</s:Rect>
					<s:Group width="100%" height="100%">
						<s:layout>
							<s:HorizontalLayout gap="3" paddingLeft="3" paddingTop="3"/>
						</s:layout>
						<s:Group>
							<s:layout>
								<s:VerticalLayout gap="2" horizontalAlign="right"/>
							</s:layout>
							<s:Group>
								<s:layout>
									<s:HorizontalLayout gap="1"/>
								</s:layout>
								<s:Group>
									<s:layout>
										<s:VerticalLayout gap="0"/>
									</s:layout>
									<local:Button_Play id="btn_play"/>
								</s:Group>
								<local:Button_Rewind id="btn_firstFrame"/>
								<local:Button_PrevFrame id="btn_previous"/>	
							</s:Group>
							<s:Group id="symbols">
								<s:layout>
									<s:VerticalLayout gap="5" paddingTop="5"/>
								</s:layout>
								<local:Symbol_Translate/>
								<local:Symbol_Rotate scaleX="0.9" scaleY="0.9"/>
								<local:Symbol_Scale scaleX="0.9" scaleY="0.9"/>
							</s:Group>
						</s:Group>

						<s:Group width="100%">
							<s:layout>
								<s:VerticalLayout horizontalAlign="center"/>
							</s:layout>
							<s:Group width="100%" depth="1">
								<s:Rect width="100%" height="100%" radiusX="10">
									<s:fill>
										<s:LinearGradient rotation="90">
											<s:GradientEntry ratio="0.011378" color="#5D82A8"/>
											<s:GradientEntry ratio="0.988622" color="#476584"/>
										</s:LinearGradient>
									</s:fill>
								</s:Rect>
								<s:Group width="100%">
									<s:layout>
										<s:VerticalLayout horizontalAlign="center"/>
									</s:layout>
									<timebar:TimeSlider width="98%" id="slider_key_index"
														skinClass="sg.edu.smu.playsketch.components.skins.TimeSliderSkin" height="30"/>
								</s:Group>
							</s:Group>
							
							<s:Group width="98%" visible="true" depth="0">
								<s:layout>
									<s:VerticalLayout gap="2"/>
								</s:layout>
								<timebar:TimeWidget id="timeWidget"/>
								<timebar:TimeWidget id="expandedWidget1" visible="false"/>
								<timebar:TimeWidget id="expandedWidget2" visible="false"/>
								<timebar:TimeWidget id="expandedWidget3" visible="false"/>
							</s:Group>
						</s:Group>
						
						<local:Button_NextFrame id="btn_next"/>
						<group:Button_TimeBarControl id="btn_toogle"/>
					</s:Group>
				</s:Group>
				
			</s:Group>
			<!--End of time bar-->
			
		</s:Group>
	</ksketchcomponents:KCanvas>	
</s:Group>