<?xml version="1.0" encoding="utf-8"?>
<!--
*Copyright 2010-2012 Singapore Management University
*Developed under a grant from the Singapore-MIT GAMBIT Game Lab

-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:ksketchutilities="sg.edu.smu.ksketch.utilities.*"
		 xmlns:ksketchcomponents="sg.edu.smu.ksketch.components.*"
		 xmlns:playsketchskin="components.*"
		 xmlns:playsketchcomponents="sg.edu.smu.playsketch.components.*"
		 xmlns:timebar="sg.edu.smu.playsketch.components.timebar.*"
		 width="100%" height="100%" updateComplete = "update_interface()">
	<fx:Declarations>
	
		<ksketchutilities:KAppState id="appState"/>
		<fx:Array id="cursors"/>
	</fx:Declarations>
	<fx:Style>
		.buttonEraser_style {icon: Embed("assets/eraser.png");}
		.buttonVisibility_style_toggle {icon: Embed("assets/visibility.png");}
		.buttonFlvExport_style_toggle {icon: Embed("assets/flv_export.png");}
		.buttonWebcam_style_toggle {icon: Embed("assets/webcam.png");}
		.buttonMicrophone_style_toggle {icon: Embed("assets/microphone.png");}
	</fx:Style>		
	
	<fx:Script source="InterfaceMgt.as"/>
	<fx:Script source="ButtonFunctions.as"/>
	<fx:Script source="TimelineFunctions.as"/>
	
	<fx:Script>
		<![CDATA[
			import mx.events.MenuEvent;
			import mx.managers.CursorManager;
			
			import sg.edu.smu.ksketch.components.KPenMenu;
			import sg.edu.smu.ksketch.model.KModel;
			import sg.edu.smu.ksketch.operation.KModelFacade;
			
			private var _fullScreen:Boolean = false;
			private var _facade:KModelFacade;
			
			//Cursor embedding
			[Embed(source="assets/black_pen.png")]
			private var _cursorBlackPen:Class;
			
			[Embed(source="assets/red_pen.png")]
			private var _cursorRedPen:Class;

			[Embed(source="assets/green_pen.png")]
			private var _cursorGreenPen:Class;

			[Embed(source="assets/blue_pen.png")]
			private var _cursorBluePen:Class;
			
			[Embed(source="assets/white_pen.png")]
			private var _cursorEraser:Class;
			
			private static const _BLACK_PEN:String = KPenMenu.LABEL_BLACK;;
			private static const _RED_PEN:String = KPenMenu.LABEL_RED;
			private static const _GREEN_PEN:String = KPenMenu.LABEL_GREEN;
			private static const _BLUE_PEN:String = KPenMenu.LABEL_BLUE;
			private static const _ERASER:String = KPenMenu.LABEL_WHITE;
			private static const _PEN_COLORS:Array = [_BLACK_PEN,_RED_PEN,_GREEN_PEN,_BLUE_PEN,_ERASER];
			private static const _PEN_COMMANDS:Array = [KLogger.BTN_BLACK_PEN,
				KLogger.BTN_RED_PEN,KLogger.BTN_GREEN_PEN,KLogger.BTN_BLUE_PEN,KLogger.BTN_ERASER];
			
			public function get facade():KModelFacade
			{
				return _facade;
			}
			
			//Application init
			//Sets up the window attributes for the current computer
			public function appInit(fullAppWidth:Number, fullAppHeight:Number, 
									widthOffset:Number, heightOffset:Number):void
			{
				addEventListener(KeyboardEvent.KEY_UP, handleKeyBoardPress);
				setFocus();
				appCanvas.setFocus();
				
				_facade = new KModelFacade(appState);
				appState.penThickness = KPenMenu.THICKNESS_MEDIUM;					
				initialiseMouseCursors(_BLACK_PEN,new _cursorBlackPen());
				initialiseMouseCursors(_RED_PEN,new _cursorRedPen());
				initialiseMouseCursors(_GREEN_PEN,new _cursorGreenPen());
				initialiseMouseCursors(_BLUE_PEN,new _cursorBluePen());
				initialiseMouseCursors(_ERASER,new _cursorEraser());
				Mouse.cursor = _BLACK_PEN;
				init_canvas(fullAppWidth, fullAppHeight, widthOffset, heightOffset);
				initButtonFunctions();
				initTimebar();
			
				appCanvas.addEventListener(MenuEvent.ITEM_CLICK, function(event:MenuEvent):void
					{
						var label:String = event.item.@label;
						var index:int = _PEN_COLORS.indexOf(label);
						if (0 <= index && index <= 4)
							_switchPen(list_pen_selection.selectedIndex = index);
					});
			}
			
			public function initialiseMouseCursors(pen:String,bitmap:Bitmap):void
			{
				var cursorData:MouseCursorData = new MouseCursorData();
				cursorData.hotSpot = new Point(2.5,2.5);
				cursorData.data = Vector.<BitmapData>([ bitmap.bitmapData]);
				Mouse.registerCursor(pen, cursorData);
			}

			public function setLogTrigger(trigger:Function):void
			{
				btn_log.addEventListener(MouseEvent.CLICK, trigger);
			}
			
			public function setDebugTrigger(trigger:Function):void
			{
				group_configOps.btn_debug.addEventListener(MouseEvent.CLICK, trigger);				
			}
			
			public function setOptionTrigger(trigger:Function):void
			{
				group_configOps.btn_settings.addEventListener(MouseEvent.CLICK, trigger);				
			}
			
			public function handleKeyBoardPress(event:KeyboardEvent):void
			{			
				switch(event.keyCode)
				{
					case 67: //c key
						if(event.ctrlKey)
							_commandExecutor.doShortcutCommand(KLogger.SHORTCUT_COPY)
						break;					
					case 70: //f key
						if(event.ctrlKey)
							handleFullScreen();																				
						break;
					case 86: //v key
						if(event.ctrlKey)
							_commandExecutor.doShortcutCommand(KLogger.SHORTCUT_PASTE)
						break;
					case 89: //y key
						if(event.ctrlKey)
							_commandExecutor.doShortcutCommand(KLogger.SHORTCUT_REDO)
						break;
					case 90: //z key
						if(event.ctrlKey)
						{
							if(event.shiftKey)
								_commandExecutor.doShortcutCommand(KLogger.SHORTCUT_REDO)
							else
								_commandExecutor.doShortcutCommand(KLogger.SHORTCUT_UNDO)
						}
						break;
				}
			}
			
			public function handleFullScreen():void
			{	
				stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;
				_fullScreen = true;					
			}
			
			private function _changePen(e:IndexChangeEvent):void
			{
				_switchPen(e.newIndex);
			}
			
			private function _switchPen(index:int):void
			{
				if (index >= 0)
				{
					var itemColors:Array =list_pen_selection.getStyle("alternatingItemColors");
					list_pen_selection.setStyle("selectionColor",itemColors[index]);
					list_pen_selection.setStyle("chromeColor",itemColors[index]);
					_commandExecutor.doButtonCommand(_PEN_COMMANDS[index]);
				}
				else
				{
					list_pen_selection.selectedIndex = -1;
					list_pen_selection.prompt = "Eraser";
					list_pen_selection.setStyle("selectionColor","#666666");
					list_pen_selection.setStyle("chromeColor","#666666");
				}
			}
		]]>
	</fx:Script>
	
	<!-- kCanvas will be the parent container to the rest of the interface components -->
	<ksketchcomponents:KCanvas id="appCanvas" borderVisible = "true" 
							   width="100%" height="100%" backgroundColor="0X748993">
		
		<!-- create the main column for the interface's layout-->
		<s:Group  id="appContainerGroup" width="100%" height="100%">
			
			<s:layout>
				<s:VerticalLayout id="appMainVerticalLayout" />
			</s:layout>
			
			<!--Top bar-->
			<s:Group id="topBar" width="100%" height="35">
				
				<s:Rect id="topBar_BG" x="0" y="0" width="100%" height="100%">
					<s:fill>
						<s:LinearGradient x="600.447" y="-17.125" scaleX="91.077" rotation="90">
							<s:GradientEntry ratio="0.111378" color="#E6E7E8"/>
							<s:GradientEntry ratio="0.334811" color="#73A1BC"/>
							<s:GradientEntry ratio="0.615401" color="#30619E"/>
						</s:LinearGradient>
					</s:fill>
				</s:Rect>
				
				<s:Group id="topBar_buttonContainer" width="100%" height="100%">
					
					<s:layout>
						<s:HorizontalLayout id="topBar_layout" paddingLeft="5" paddingRight="5"
											verticalAlign="middle" horizontalAlign="left" />
					</s:layout>

					<playsketchskin:Group_FileHandling id="group_fileOps"/>
					<playsketchskin:Group_Editing id="group_editOps"/>
					<playsketchskin:Group_View id="group_viewOps"/>
					<playsketchskin:Group_Grouping id="group_groupOps"/>

					<s:DropDownList id="list_pen_selection" width="100" selectedIndex="0" 
									alternatingItemColors="[#000000,#FF0000,#00BB00,#0078FF,#999999]"
									color="#DDDDDD" chromeColor="#000000"  rollOverColor="#777777" 
									selectionColor="#000000" change="_changePen(event)" >
						<s:dataProvider>
							<s:ArrayList source="{_PEN_COLORS}" />
						</s:dataProvider>
					</s:DropDownList>

					<!--<s:Button id="btn_toogle" width="27" height="24" chromeColor="#012345" 
					click="this.changeStageAspect(_stageAspectRatioMode)"/>-->

					<s:Group>
						<s:layout>
							<s:HorizontalLayout/>
						</s:layout>
						<s:Button id="btn_FLV" styleName="buttonFlvExport_style_toggle" width="30" height="24"
								  toolTip="FLV Export" click="flvWizardWindow()"/>	
						<s:Button id="btn_IMG" width="35" height="24" styleName="buttonWebcam_style_toggle"
								  toolTip="WebCam/IMG Import" click="imgWizardWindow()"/>	
						<s:Button id="btn_SOUND" styleName="buttonMicrophone_style_toggle" width="29" height="24" 
								  label="S" toolTip="Sound Record" click="soundRecord()"/>
					</s:Group>
					
					<!--Stretchable part of the top bar-->
					<s:Group id = "topBar_resizableContainer" width="100%"/>
					
					<s:Button id="btn_log" width="44" height="24" label="Log" 
							  visible="false"/>
					
					<playsketchskin:Group_Config id="group_configOps"/>
					
				</s:Group>
				
			</s:Group>
			<!-- end of top bar-->
			
			<!--
			Fully stretchable middle portion that act as a drawing area for the application. Just for
			presentation purposes since most of the logic is held in the kCanvas itself.
			-->
			<s:Group id="drawingArea" width="100%" height="100%">
				
				<s:layout>
					<s:HorizontalLayout id="drawingArea_Layout" paddingLeft="20" paddingRight="20" 
										verticalAlign="middle" horizontalAlign="center"/>
				</s:layout>
				<s:BorderContainer id="drawingArea_stage" borderWeight="1" 
								   borderColor="0X000000" backgroundColor="0XFFFFFF"/>
				
			</s:Group>
			<!--End of Drawing Area-->
			
			<!-- Time bar-->
			<s:Group id="timeBar" width="100%" height="40">
				
				<s:Rect id="timeBar_BG" x="0" y="0" width="100%" height="100%">
					<s:fill>
						<s:LinearGradient x="600.447" y="-17.125" scaleX="91.077" rotation="90">
							<s:GradientEntry ratio="0.111378" color="#E6E7E8"/>
							<s:GradientEntry ratio="0.334811" color="#73A1BC"/>
							<s:GradientEntry ratio="0.615401" color="#30619E"/>
						</s:LinearGradient>
					</s:fill>
				</s:Rect>
				
				<s:Group width="100%" id="timeBarMainGroup">
					<s:layout>
						<s:HorizontalLayout gap="0"/>
					</s:layout>
					<s:Group height="100%">
						<s:layout>
							<s:VerticalLayout gap="3" horizontalAlign="right"/>
						</s:layout>
						<s:Group width="100%">
							<s:layout>
								<s:HorizontalLayout gap="0" horizontalAlign="right"/>
							</s:layout>
							<s:Button skinClass="components.Button_Play" id="_playButton" click="play()" scaleX="0.4651" scaleY="0.4651"/>
							<s:Button skinClass="components.Button_BackToStart" id="btn_firstFrame" scaleX="0.75" scaleY="0.75"/>
							<s:Button skinClass="components.Button_PrevFrame" id="btn_previous" scaleX="1.1" scaleY="1.1"/>
						</s:Group>
						<mx:Text text="Overview" height="20"/>
						<mx:Text text="Translation" height="20"/>
						<mx:Text text="Rotation" height="20"/>
						<mx:Text text="Scale" height="20"/>
					</s:Group>
					<s:Group height="100%" width="100%" id="timeWidgetGroups">
						<s:layout>
							<s:VerticalLayout id="timeWidgetLayout" gap="3" 
											  horizontalAlign="left" paddingBottom="3"/>
						</s:layout>
						<s:Group includeInLayout="false" width="100%" height="100%" 
								 id="sliderIndicator" mouseEnabled="false" mouseChildren="false"/>
						<s:Group width="100%" height="20">
							<timebar:TimeSlider width="100%" updateComplete="sliderUpdated()" 
														id="slider_key_index" height="40" scaleY="0.5"/>
							<s:Group id="sliderLabels" width="100%" height="20" 
									 mouseEnabled="false" mouseChildren="false"/>
						</s:Group>
						<timebar:TimeWidget id="timeWidget"/>
						<timebar:TimeWidget id="expandedWidget1" visible="false"/>
						<timebar:TimeWidget id="expandedWidget2" visible="false"/>
						<timebar:TimeWidget id="expandedWidget3" visible="false"/>
					</s:Group>
					<s:Button skinClass="components.Button_NextFrame" id="btn_next" scaleX="1.1" scaleY="1.1"/>
					<s:Group>
						<s:layout>
							<s:HorizontalLayout horizontalAlign="right"/>
						</s:layout>	
						<s:Group width="100%"/>
						<s:Button skinClass="components.Button_ExpandTimeBar" id="btn_toogle" />
					</s:Group>

				</s:Group>
				
			</s:Group>
			<!--End of time bar-->
			
		</s:Group>
	</ksketchcomponents:KCanvas>	
	
</s:Group>
