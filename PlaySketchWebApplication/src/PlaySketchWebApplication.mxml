<?xml version="1.0" encoding="utf-8"?>
<!--
*Copyright 2010-2012 Singapore Management University
*Developed under a grant from the Singapore-MIT GAMBIT Game Lab

-->
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:local="*"
			   width="100%" height="100%" minWidth="800" minHeight="600" initialize="_init()"
			   applicationComplete="stage.addEventListener(KeyboardEvent.KEY_UP,main.handleKeyBoardPress)" >
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>

	<fx:Style source="PlaySketchWebApplication.css" />
	
	<fx:Script>
		<![CDATA[
			import flash.utils.Timer;
			
			import mx.controls.Alert;
			import mx.core.IVisualElement;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			import mx.utils.UIDUtil;
			
			import sg.edu.smu.ksketch.interactor.KSystemCommandExecutor;
			import sg.edu.smu.ksketch.logger.KLogger;
			
			import spark.components.TitleWindow;

			private const _LOG_INTERVAL:Number = 30000;
			private const _LOG_SERVER_URL:String = "http://playsketch.org/logging/put/";
			
			private var _debuggerWindow:TitleWindow;

			public function triggerLogger(event:MouseEvent):void
			{
				var logXML:XML = KLogger.logFile;
				var modelXML:XML = main.facade.saveFile();
				var appTime:Number = main.appState.time;
				var canvas:LoggerCanvas = new LoggerCanvas();
				KLogger.enabled = false;
				main.appCanvas.resetCanvas();
				canvas.initLogger(main.appCanvas,new KSystemCommandExecutor(
					main.appState,main.appCanvas,main.facade));
				var close:Function = function (e:Event):void
				{
					main.appCanvas.loadFile(modelXML);
					KLogger.setLogFile(logXML);
					main.appState.time = appTime;
					KLogger.enabled = true;
					(e.target as TitleWindow).removeEventListener(Event.CLOSE, close);
					PopUpManager.removePopUp(e.target as TitleWindow);
				};
				_showWindow("Logger",425,440,canvas,close,true);
			}
						
			public function triggerSettings(event:MouseEvent):void
			{
				var close:Function = function(e:Event):void
				{
					(e.target as TitleWindow).removeEventListener(Event.CLOSE, close);
					PopUpManager.removePopUp(e.target as TitleWindow);
				};
				_showWindow("Settings",400,400,new OptionCanvas(main),close,true);
			}
			
			public function triggerDebugger(event:MouseEvent):void
			{
				var canvas:DebuggerCanvas = new DebuggerCanvas();
				canvas.initNewDebuggerCanvas(main.facade,main.appState);
				var close:Function = function (e:Event):void
				{
					canvas.removeAllEventListeners();
					(e.target as TitleWindow).removeEventListener(Event.CLOSE, close);
					PopUpManager.removePopUp(e.target as TitleWindow);
				};	
				if (_debuggerWindow)
					PopUpManager.removePopUp(_debuggerWindow);
				_debuggerWindow = _showWindow("Debugger",400,600,canvas,close);
			}
			
			private function _showWindow(title:String,width:Number,height:Number,
										 child:IVisualElement,closeHandler:Function,
										 modal:Boolean=false):TitleWindow
			{
				var window:TitleWindow = new TitleWindow();
				window.setStyle("backgroundColor","#EEEEFF");
				window.title = title;
				window.width = width;
				window.height = height;
				window.addElement(child);
				window.addEventListener(Event.CLOSE,closeHandler);
				PopUpManager.addPopUp(window, main, modal);
				return window;
			}
			
			private function _init():void
			{
				main.appInit(width, height, 10,10);
				main.setLogTrigger(triggerLogger);
				main.setOptionTrigger(triggerSettings);
				main.setDebugTrigger(triggerDebugger);	
				KLogger.logNewFile(main.appState.appBuildNumber); 
			
				var sessionID:String = new Date().toString();				
				var storedInfo:SharedObject = SharedObject.getLocal("ksketchLogging");
				var userID:String = storedInfo.data.hasOwnProperty("userID") ? 
					storedInfo.data.userID : "User_" + UIDUtil.createUID();
				storedInfo.data.userID = userID;
				_automateLogDataUpload(_LOG_SERVER_URL, userID, sessionID, _LOG_INTERVAL);
			}

			private function _automateLogDataUpload(logServerUrl:String, userID:String, 
													sessionID:String, logInterval:Number):void
			{
				var loggingService:HTTPService = new HTTPService();
				loggingService.url = logServerUrl;
				loggingService.method = "POST";
				loggingService.addEventListener(ResultEvent.RESULT, onLoggingServerResponse, false, 0, true);
				loggingService.addEventListener(FaultEvent.FAULT, onLoggingServerFault);
				var lastSendTime:String = "";
				var timerFunction:Function = function(e:TimerEvent):void
				{
					var time:String="";
					var data:String = "";
					var list:XMLList = KLogger.logFile.children();
					for each (var node:XML in list)
					{
						var newline:String = data != null && data.length > 0 ? "\n" : "";
						time = node.attribute(KLogger.LOG_TIME).toXMLString();
						if (lastSendTime < time)
							data = data + newline + node.toXMLString();
					}
					lastSendTime = time;
					var params:Object = {};
					params['userID'] = userID;
					params['sessionID'] = sessionID;
					params['logData'] = data;
					loggingService.send(params);
				};
				var logTimer:Timer = new Timer(logInterval,0);
				logTimer.addEventListener(TimerEvent.TIMER,timerFunction);
				logTimer.start();				
			}
			
			private function onLoggingServerResponse(e:ResultEvent): void
			{
				if ( e.result != "OK")
					Alert.show("Error uploading log files:\n" + e.result);
				else
					trace("Log uploaded correctly: " + e.result);
			}
			
			private function onLoggingServerFault(e:FaultEvent): void
			{
				var complaint:String = e.fault.faultCode + e.fault.faultString + e.fault.faultDetail;
				Alert.show("Error uploading log files:\n" + complaint);
			}
						
		]]>
	</fx:Script>
	
	<local:PlaySketchCanvas width="100%" height="100%" id="main"/>
</s:Application>
