<?xml version="1.0" encoding="utf-8"?>
<s:SkinnablePopUpContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
						   xmlns:s="library://ns.adobe.com/flex/spark" backgroundAlpha="0" xmlns:canvas="views.canvas.*"
						   creationComplete="setUpToggles()">
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import sg.edu.smu.ksketch2.canvas.KSketch_CanvasView;
			import sg.edu.smu.ksketch2.controls.interactioncontrol.KMobileInteractionControl;
			import sg.edu.smu.ksketch2.controls.interactors.KTouchDrawInteractor;
			import sg.edu.smu.ksketch2.controls.interactors.draw.KDrawInteractor;
			
			
			private var _interactionControl:KMobileInteractionControl;
			private var _canvasView:KSketch_CanvasView;
			private var _isPen:Boolean
			
			public static const BLACK_PEN_COLOR:uint = 0x000000;
			public static const RED_PEN_COLOR:uint = 0xFA5882;
			public static const GREEN_PEN_COLOR:uint = 0x82FA58;
			public static const BLUE_PEN_COLOR:uint = 0x58ACFA;
			
			public function init(interactionControl:KMobileInteractionControl, canvasView:KSketch_CanvasView):void
			{
				_interactionControl = interactionControl;
				_canvasView = canvasView;
				_isPen = true;
			}
			
			public function setUpToggles():void
			{
				isPen = _isPen;	
			}
			
			private function _activateCamera():void
			{
//				var camera:CameraUI = new CameraUI();
//				camera.addEventListener(MediaEvent.COMPLETE, _imageConfirmed);
//				camera.launch(MediaType.IMAGE);
//				close();
			}
			
			private function _activateGallery():void
			{
//				var gallery:CameraRoll = new CameraRoll();
//				gallery.addEventListener(MediaEvent.SELECT, _imageConfirmed);
//				gallery.browseForImage();
//				close();
			}
			
			public function clear():void
			{
				_interactionControl.reset();
			}
			
			public function penColor(value:uint):void
			{
				isPen = true;
				KDrawInteractor.penColor = value;
				(penBtn.skin as PopUpMenuButtonSkin).penColor = value;
			}
			
			public function set isPen(value:Boolean):void
			{
				_isPen = value;
				
				if(!penBtn.skin || !eraserBtn.skin)
					return;

				if(_isPen)
				{
					penBtn.skin.setCurrentState("selected");
					eraserBtn.skin.setCurrentState("unselected");
				}
				else
				{
					penBtn.skin.setCurrentState("unselected");
					eraserBtn.skin.setCurrentState("selected");
				}
				
				KTouchDrawInteractor.eraser = !_isPen;
			}
			
			public function exit():void
			{
				close();
				_canvasView.navigator.popView();
			}
			
			private function _onMediaLoaded(event:Event):void
			{
//				var dataSource:IDataInput = event.target as IDataInput;
//				var imageBytes:ByteArray = new ByteArray();
//				dataSource.readBytes( imageBytes );
//
//				var now:Date = new Date();
//				var filename:String = "IMG" + now.fullYear + now.month + now.day + now.hours + now.minutes + now.seconds + ".jpg";
//				var imgFile:File = File.applicationStorageDirectory.resolvePath( filename );
//				
//				var imageDocument:KTouchImageDocument = new KTouchImageDocument(imgFile);
//
//				_canvasView.navigator.pushView(KSketch_ImageEditingView, imageDocument);
			}
		]]>
	</fx:Script>
	
	<s:filters>
		<s:DropShadowFilter color="0xA4A4A4" distance="2" blurX="8" blurY="8" strength="2" angle="90"/>
	</s:filters>
	<s:Rect width="100%" height="100%" radiusX="5" radiusY="5">
		<s:fill>
			<s:SolidColor color="0xE7E7E7"/>
		</s:fill>
	</s:Rect>

	<s:Group>
		<s:Group>
			<s:layout>
				<s:VerticalLayout gap="1" paddingLeft="3" paddingRight="3" verticalAlign="middle" horizontalAlign="center"/>
			</s:layout>
			<s:Group>
				<s:layout>
					<s:VerticalLayout gap="1" paddingLeft="3" paddingRight="3" paddingTop="3" paddingBottom="3"/>
				</s:layout>
				<s:Button name="new" skinClass="sg.edu.smu.ksketch2.controls.components.popup.PopUpMenuButtonSkin" click="clear()"/>
			</s:Group>
			<s:Line alpha="{KSketch_CanvasView.CANVAS_DIVIDER_BLEND}" width="90%">
				<s:stroke>
					<s:SolidColorStroke weight="1" color="{KSketch_CanvasView.CANVAS_BUTTON_COLOR}"/>
				</s:stroke>
			</s:Line>			
			<s:Group>
				<s:layout>
					<s:VerticalLayout gap="1" paddingLeft="3" paddingRight="3" paddingTop="3" paddingBottom="3"/>
				</s:layout>
				<s:Button name="pen" id="penBtn" skinClass="sg.edu.smu.ksketch2.controls.components.popup.PopUpMenuButtonSkin" mouseUp="{isPen = true}"/>
				<s:Button name="eraser" id="eraserBtn" skinClass="sg.edu.smu.ksketch2.controls.components.popup.PopUpMenuButtonSkin" mouseUp="{isPen = false}"/>
				<s:Group id="penGroup">
					<s:layout>
						<s:VerticalLayout gap="1"/>
					</s:layout>
					<s:Button name="black" id="black" skinClass="sg.edu.smu.ksketch2.controls.components.popup.PopUpMenuButtonSkin"
							  click="penColor(BLACK_PEN_COLOR)"/>
					<s:Button name="red" id="red" skinClass="sg.edu.smu.ksketch2.controls.components.popup.PopUpMenuButtonSkin"
							  click="penColor(RED_PEN_COLOR)"/>
					<s:Button name="green" id="green" skinClass="sg.edu.smu.ksketch2.controls.components.popup.PopUpMenuButtonSkin"
							  click="penColor(GREEN_PEN_COLOR)"/>
					<s:Button name="blue" id="blue" skinClass="sg.edu.smu.ksketch2.controls.components.popup.PopUpMenuButtonSkin"
							  click="penColor(BLUE_PEN_COLOR)"/>
				</s:Group>
			</s:Group>
			<s:Line alpha="{KSketch_CanvasView.CANVAS_DIVIDER_BLEND}" width="90%">
				<s:stroke>
					<s:SolidColorStroke weight="1" color="{KSketch_CanvasView.CANVAS_BUTTON_COLOR}"/>
				</s:stroke>
			</s:Line>
			<s:Group>
				<s:layout>
					<s:VerticalLayout gap="1" paddingLeft="3" paddingRight="3" paddingTop="3" paddingBottom="3"/>
				</s:layout>
				<s:Button name="exit" skinClass="sg.edu.smu.ksketch2.controls.components.popup.PopUpMenuButtonSkin" click="exit()"/>
			</s:Group>
			<s:Line alpha="0.25" width="90%">
				<s:stroke>
					<s:SolidColorStroke weight="1" color="0x000000"/>
				</s:stroke>
			</s:Line>
			<!--
			<s:Group>
				<s:layout>
					<s:VerticalLayout gap="1" paddingLeft="3" paddingRight="3" paddingTop="3" paddingBottom="3"/>
				</s:layout>
				<s:Button name="modeI" skinClass="views.canvas.components.popup.PopUpMenuButtonSkin" click="{KSketch2.studyMode = KSketch2.STUDY_K}"/>
				<s:Button name="modeD" skinClass="views.canvas.components.popup.PopUpMenuButtonSkin" click="{KSketch2.studyMode = KSketch2.STUDY_P}"/>
				<s:Button name="modeDI" skinClass="views.canvas.components.popup.PopUpMenuButtonSkin" click="{KSketch2.studyMode = KSketch2.STUDY_PK}"/>
			</s:Group>-->
<!--			<s:Group>
				<s:layout>
					<s:VerticalLayout gap="1" paddingLeft="3" paddingRight="3" paddingTop="3" paddingBottom="3"/>
				</s:layout>
				<s:Button name="camera" skinClass="sg.edu.smu.ksketch2.controls.components.popup.PopUpMenuButtonSkin" click="_activateCamera()" enabled="{CameraUI.isSupported}"/>
				<s:Button name="gallery" skinClass="sg.edu.smu.ksketch2.controls.components.popup.PopUpMenuButtonSkin" click="_activateGallery()" enabled="{CameraRoll.supportsBrowseForImage}"/>
			</s:Group>
			<s:Line alpha="0.25" width="90%">
				<s:stroke>
					<s:SolidColorStroke weight="1" color="0x000000"/>
				</s:stroke>
			</s:Line>-->
		<!--
			<s:Group>
				<s:layout>
					<s:VerticalLayout gap="1" paddingLeft="3" paddingRight="3" paddingTop="3" paddingBottom="3"/>
				</s:layout>
				<s:Button name="zoomIn" skinClass="views.canvas.components.popup.PopUpMenuButtonSkin"/>
				<s:Button name="zoomOut" skinClass="views.canvas.components.popup.PopUpMenuButtonSkin"/>
			</s:Group>-->
		</s:Group>
	</s:Group>
</s:SkinnablePopUpContainer>
